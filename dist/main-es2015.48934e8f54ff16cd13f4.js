(window.webpackJsonp = window.webpackJsonp || []).push([
  [1],
  {
    0: function(t, e, n) {
      t.exports = n('zUnb');
    },
    '0QMH': function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return r;
      });
      var s = n('8Y7J'),
        i = n('rB/T');
      function r(t, e) {
        let n;
        t.hot.accept(),
          e()
            .then(t => (n = t))
            .catch(t => console.error(t)),
          t.hot.dispose(() => {
            const t = n.injector.get(s.g).components.map(t => t.location.nativeElement),
              e = Object(i.createNewHosts)(t);
            n.destroy(), e();
          });
      }
    },
    '2QA8': function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return s;
      });
      const s = 'function' == typeof Symbol ? Symbol('rxSubscriber') : '@@rxSubscriber_' + Math.random();
    },
    '2fFW': function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return i;
      });
      let s = !1;
      const i = {
        Promise: void 0,
        set useDeprecatedSynchronousErrorHandling(t) {
          s = t;
        },
        get useDeprecatedSynchronousErrorHandling() {
          return s;
        }
      };
    },
    '3UD+': function(t, e) {
      t.exports = function(t) {
        if (!t.webpackPolyfill) {
          var e = Object.create(t);
          e.children || (e.children = []),
            Object.defineProperty(e, 'loaded', {
              enumerable: !0,
              get: function() {
                return e.l;
              }
            }),
            Object.defineProperty(e, 'id', {
              enumerable: !0,
              get: function() {
                return e.i;
              }
            }),
            Object.defineProperty(e, 'exports', { enumerable: !0 }),
            (e.webpackPolyfill = 1);
        }
        return e;
      };
    },
    '4odN': function(t) {
      t.exports = {
        APP_NAME: 'The Incredible',
        About: 'A propos',
        'Hello world !': 'Bonjour le monde !',
        Home: 'Accueil',
        Version: 'Version'
      };
    },
    '5+tZ': function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return l;
      });
      var s = n('ZUHj'),
        i = n('l7GE'),
        r = n('51Dv'),
        o = n('lJxs'),
        a = n('Cfvw');
      function l(t, e, n = Number.POSITIVE_INFINITY) {
        return 'function' == typeof e
          ? s => s.pipe(l((n, s) => Object(a.a)(t(n, s)).pipe(Object(o.a)((t, i) => e(n, t, s, i))), n))
          : ('number' == typeof e && (n = e), e => e.lift(new c(t, n)));
      }
      class c {
        constructor(t, e = Number.POSITIVE_INFINITY) {
          (this.project = t), (this.concurrent = e);
        }
        call(t, e) {
          return e.subscribe(new h(t, this.project, this.concurrent));
        }
      }
      class h extends i.a {
        constructor(t, e, n = Number.POSITIVE_INFINITY) {
          super(t),
            (this.project = e),
            (this.concurrent = n),
            (this.hasCompleted = !1),
            (this.buffer = []),
            (this.active = 0),
            (this.index = 0);
        }
        _next(t) {
          this.active < this.concurrent ? this._tryNext(t) : this.buffer.push(t);
        }
        _tryNext(t) {
          let e;
          const n = this.index++;
          try {
            e = this.project(t, n);
          } catch (s) {
            return void this.destination.error(s);
          }
          this.active++, this._innerSub(e, t, n);
        }
        _innerSub(t, e, n) {
          const i = new r.a(this, void 0, void 0);
          this.destination.add(i), Object(s.a)(this, t, e, n, i);
        }
        _complete() {
          (this.hasCompleted = !0),
            0 === this.active && 0 === this.buffer.length && this.destination.complete(),
            this.unsubscribe();
        }
        notifyNext(t, e, n, s, i) {
          this.destination.next(e);
        }
        notifyComplete(t) {
          const e = this.buffer;
          this.remove(t),
            this.active--,
            e.length > 0
              ? this._next(e.shift())
              : 0 === this.active && this.hasCompleted && this.destination.complete();
        }
      }
    },
    '51Dv': function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return i;
      });
      var s = n('7o/Q');
      class i extends s.a {
        constructor(t, e, n) {
          super(), (this.parent = t), (this.outerValue = e), (this.outerIndex = n), (this.index = 0);
        }
        _next(t) {
          this.parent.notifyNext(this.outerValue, t, this.outerIndex, this.index++, this);
        }
        _error(t) {
          this.parent.notifyError(t, this), this.unsubscribe();
        }
        _complete() {
          this.parent.notifyComplete(this), this.unsubscribe();
        }
      }
    },
    '7o/Q': function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return c;
      });
      var s = n('n6bG'),
        i = n('gRHU'),
        r = n('quSY'),
        o = n('2QA8'),
        a = n('2fFW'),
        l = n('NJ4a');
      class c extends r.a {
        constructor(t, e, n) {
          switch (
            (super(),
            (this.syncErrorValue = null),
            (this.syncErrorThrown = !1),
            (this.syncErrorThrowable = !1),
            (this.isStopped = !1),
            arguments.length)
          ) {
            case 0:
              this.destination = i.a;
              break;
            case 1:
              if (!t) {
                this.destination = i.a;
                break;
              }
              if ('object' == typeof t) {
                t instanceof c
                  ? ((this.syncErrorThrowable = t.syncErrorThrowable), (this.destination = t), t.add(this))
                  : ((this.syncErrorThrowable = !0), (this.destination = new h(this, t)));
                break;
              }
            default:
              (this.syncErrorThrowable = !0), (this.destination = new h(this, t, e, n));
          }
        }
        [o.a]() {
          return this;
        }
        static create(t, e, n) {
          const s = new c(t, e, n);
          return (s.syncErrorThrowable = !1), s;
        }
        next(t) {
          this.isStopped || this._next(t);
        }
        error(t) {
          this.isStopped || ((this.isStopped = !0), this._error(t));
        }
        complete() {
          this.isStopped || ((this.isStopped = !0), this._complete());
        }
        unsubscribe() {
          this.closed || ((this.isStopped = !0), super.unsubscribe());
        }
        _next(t) {
          this.destination.next(t);
        }
        _error(t) {
          this.destination.error(t), this.unsubscribe();
        }
        _complete() {
          this.destination.complete(), this.unsubscribe();
        }
        _unsubscribeAndRecycle() {
          const { _parentOrParents: t } = this;
          return (
            (this._parentOrParents = null),
            this.unsubscribe(),
            (this.closed = !1),
            (this.isStopped = !1),
            (this._parentOrParents = t),
            this
          );
        }
      }
      class h extends c {
        constructor(t, e, n, r) {
          let o;
          super(), (this._parentSubscriber = t);
          let a = this;
          Object(s.a)(e)
            ? (o = e)
            : e &&
              ((o = e.next),
              (n = e.error),
              (r = e.complete),
              e !== i.a &&
                ((a = Object.create(e)),
                Object(s.a)(a.unsubscribe) && this.add(a.unsubscribe.bind(a)),
                (a.unsubscribe = this.unsubscribe.bind(this)))),
            (this._context = a),
            (this._next = o),
            (this._error = n),
            (this._complete = r);
        }
        next(t) {
          if (!this.isStopped && this._next) {
            const { _parentSubscriber: e } = this;
            a.a.useDeprecatedSynchronousErrorHandling && e.syncErrorThrowable
              ? this.__tryOrSetError(e, this._next, t) && this.unsubscribe()
              : this.__tryOrUnsub(this._next, t);
          }
        }
        error(t) {
          if (!this.isStopped) {
            const { _parentSubscriber: e } = this,
              { useDeprecatedSynchronousErrorHandling: n } = a.a;
            if (this._error)
              n && e.syncErrorThrowable
                ? (this.__tryOrSetError(e, this._error, t), this.unsubscribe())
                : (this.__tryOrUnsub(this._error, t), this.unsubscribe());
            else if (e.syncErrorThrowable)
              n ? ((e.syncErrorValue = t), (e.syncErrorThrown = !0)) : Object(l.a)(t), this.unsubscribe();
            else {
              if ((this.unsubscribe(), n)) throw t;
              Object(l.a)(t);
            }
          }
        }
        complete() {
          if (!this.isStopped) {
            const { _parentSubscriber: t } = this;
            if (this._complete) {
              const e = () => this._complete.call(this._context);
              a.a.useDeprecatedSynchronousErrorHandling && t.syncErrorThrowable
                ? (this.__tryOrSetError(t, e), this.unsubscribe())
                : (this.__tryOrUnsub(e), this.unsubscribe());
            } else this.unsubscribe();
          }
        }
        __tryOrUnsub(t, e) {
          try {
            t.call(this._context, e);
          } catch (n) {
            if ((this.unsubscribe(), a.a.useDeprecatedSynchronousErrorHandling)) throw n;
            Object(l.a)(n);
          }
        }
        __tryOrSetError(t, e, n) {
          if (!a.a.useDeprecatedSynchronousErrorHandling) throw new Error('bad call');
          try {
            e.call(this._context, n);
          } catch (s) {
            return a.a.useDeprecatedSynchronousErrorHandling
              ? ((t.syncErrorValue = s), (t.syncErrorThrown = !0), !0)
              : (Object(l.a)(s), !0);
          }
          return !1;
        }
        _unsubscribe() {
          const { _parentSubscriber: t } = this;
          (this._context = null), (this._parentSubscriber = null), t.unsubscribe();
        }
      }
    },
    '8Y7J': function(t, e, n) {
      'use strict';
      n.d(e, 'kb', function() {
        return Bo;
      }),
        n.d(e, 'lb', function() {
          return Vo;
        }),
        n.d(e, 'mb', function() {
          return Uo;
        }),
        n.d(e, 'nb', function() {
          return Ho;
        }),
        n.d(e, 'jb', function() {
          return Mr;
        }),
        n.d(e, 'ib', function() {
          return yr;
        }),
        n.d(e, 'g', function() {
          return So;
        }),
        n.d(e, 'R', function() {
          return wo;
        }),
        n.d(e, 'x', function() {
          return vo;
        }),
        n.d(e, 'S', function() {
          return me;
        }),
        n.d(e, 'W', function() {
          return pe;
        }),
        n.d(e, 'c', function() {
          return Nr;
        }),
        n.d(e, 'B', function() {
          return jr;
        }),
        n.d(e, 'A', function() {
          return Fr;
        }),
        n.d(e, 'b', function() {
          return Br;
        }),
        n.d(e, 'd', function() {
          return Rr;
        }),
        n.d(e, 'e', function() {
          return Pr;
        }),
        n.d(e, 'U', function() {
          return Lo;
        }),
        n.d(e, 'M', function() {
          return uo;
        }),
        n.d(e, 'Y', function() {
          return fo;
        }),
        n.d(e, 't', function() {
          return Ur;
        }),
        n.d(e, 'f', function() {
          return zo;
        }),
        n.d(e, 'm', function() {
          return Tr;
        }),
        n.d(e, 'l', function() {
          return he;
        }),
        n.d(e, 'G', function() {
          return Fe;
        }),
        n.d(e, 'H', function() {
          return je;
        }),
        n.d(e, 'a', function() {
          return En;
        }),
        n.d(e, 'P', function() {
          return Q;
        }),
        n.d(e, 'N', function() {
          return cs;
        }),
        n.d(e, 'Ob', function() {
          return g;
        }),
        n.d(e, 'T', function() {
          return w;
        }),
        n.d(e, 'q', function() {
          return fn;
        }),
        n.d(e, 'Pb', function() {
          return V;
        }),
        n.d(e, 'V', function() {
          return U;
        }),
        n.d(e, 'n', function() {
          return T;
        }),
        n.d(e, 'p', function() {
          return A;
        }),
        n.d(e, 'o', function() {
          return h;
        }),
        n.d(e, 'z', function() {
          return u;
        }),
        n.d(e, 'I', function() {
          return p;
        }),
        n.d(e, 'y', function() {
          return io;
        }),
        n.d(e, 'D', function() {
          return as;
        }),
        n.d(e, 'E', function() {
          return rs;
        }),
        n.d(e, 'F', function() {
          return os;
        }),
        n.d(e, 'i', function() {
          return Gr;
        }),
        n.d(e, 'j', function() {
          return Xn;
        }),
        n.d(e, 'k', function() {
          return ns;
        }),
        n.d(e, 'u', function() {
          return q;
        }),
        n.d(e, 'w', function() {
          return $;
        }),
        n.d(e, 'v', function() {
          return Do;
        }),
        n.d(e, 'C', function() {
          return Ir;
        }),
        n.d(e, 'J', function() {
          return Oo;
        }),
        n.d(e, 'K', function() {
          return Ao;
        }),
        n.d(e, 'L', function() {
          return ks;
        }),
        n.d(e, 'O', function() {
          return As;
        }),
        n.d(e, 'h', function() {
          return un;
        }),
        n.d(e, 'r', function() {
          return ws;
        }),
        n.d(e, 's', function() {
          return Cs;
        }),
        n.d(e, 'Q', function() {
          return On;
        }),
        n.d(e, 'X', function() {
          return Fo;
        }),
        n.d(e, 'wb', function() {
          return In;
        }),
        n.d(e, 'bb', function() {
          return Vr;
        }),
        n.d(e, 'Z', function() {
          return pn;
        }),
        n.d(e, 'ab', function() {
          return Jn;
        }),
        n.d(e, 'eb', function() {
          return Me;
        }),
        n.d(e, 'fb', function() {
          return Ue;
        }),
        n.d(e, 'gb', function() {
          return _e;
        }),
        n.d(e, 'vb', function() {
          return D;
        }),
        n.d(e, 'zb', function() {
          return An;
        }),
        n.d(e, 'Hb', function() {
          return y;
        }),
        n.d(e, 'xb', function() {
          return qn;
        }),
        n.d(e, 'yb', function() {
          return $n;
        }),
        n.d(e, 'ub', function() {
          return Er;
        }),
        n.d(e, 'tb', function() {
          return Sr;
        }),
        n.d(e, 'cb', function() {
          return vr;
        }),
        n.d(e, 'db', function() {
          return wr;
        }),
        n.d(e, 'Nb', function() {
          return rt;
        }),
        n.d(e, 'Lb', function() {
          return Sn;
        }),
        n.d(e, 'Rb', function() {
          return Pn;
        }),
        n.d(e, 'Qb', function() {
          return Nn;
        }),
        n.d(e, 'Mb', function() {
          return Mn;
        }),
        n.d(e, 'Sb', function() {
          return Fn;
        }),
        n.d(e, 'hb', function() {
          return $o;
        }),
        n.d(e, 'ob', function() {
          return Ri;
        }),
        n.d(e, 'pb', function() {
          return ul;
        }),
        n.d(e, 'qb', function() {
          return Ks;
        }),
        n.d(e, 'rb', function() {
          return nr;
        }),
        n.d(e, 'sb', function() {
          return qo;
        }),
        n.d(e, 'Ab', function() {
          return Si;
        }),
        n.d(e, 'Bb', function() {
          return Ei;
        }),
        n.d(e, 'Cb', function() {
          return ea;
        }),
        n.d(e, 'Db', function() {
          return zi;
        }),
        n.d(e, 'Eb', function() {
          return sr;
        }),
        n.d(e, 'Fb', function() {
          return ir;
        }),
        n.d(e, 'Gb', function() {
          return Go;
        }),
        n.d(e, 'Ib', function() {
          return sa;
        }),
        n.d(e, 'Jb', function() {
          return $s;
        }),
        n.d(e, 'Kb', function() {
          return oa;
        });
      var s = n('XNiG'),
        i = n('quSY'),
        r = n('HDdC'),
        o = n('VRyK'),
        a = n('w1tV');
      const l = '__parameters__';
      function c(t, e, n) {
        const s = (function(t) {
          return function(...e) {
            if (t) {
              const n = t(...e);
              for (const t in n) this[t] = n[t];
            }
          };
        })(e);
        function i(...t) {
          if (this instanceof i) return s.apply(this, t), this;
          const e = new i(...t);
          return (n.annotation = e), n;
          function n(t, n, s) {
            const i = t.hasOwnProperty(l) ? t[l] : Object.defineProperty(t, l, { value: [] })[l];
            for (; i.length <= s; ) i.push(null);
            return (i[s] = i[s] || []).push(e), t;
          }
        }
        return (
          n && (i.prototype = Object.create(n.prototype)), (i.prototype.ngMetadataName = t), (i.annotationCls = i), i
        );
      }
      const h = c('Inject', t => ({ token: t })),
        u = c('Optional'),
        d = c('Self'),
        p = c('SkipSelf');
      var m = (function(t) {
        return (
          (t[(t.Default = 0)] = 'Default'),
          (t[(t.Host = 1)] = 'Host'),
          (t[(t.Self = 2)] = 'Self'),
          (t[(t.SkipSelf = 4)] = 'SkipSelf'),
          (t[(t.Optional = 8)] = 'Optional'),
          t
        );
      })({});
      function f(t) {
        for (let e in t) if (t[e] === f) return e;
        throw Error('Could not find renamed property on target object.');
      }
      function g(t) {
        return { token: t.token, providedIn: t.providedIn || null, factory: t.factory, value: void 0 };
      }
      function b(t) {
        const e = t[_];
        return e && e.token === t ? e : null;
      }
      const _ = f({ ngInjectableDef: f });
      function y(t) {
        if ('string' == typeof t) return t;
        if (t instanceof Array) return '[' + t.map(y).join(', ') + ']';
        if (null == t) return '' + t;
        if (t.overriddenName) return `${t.overriddenName}`;
        if (t.name) return `${t.name}`;
        const e = t.toString();
        if (null == e) return '' + e;
        const n = e.indexOf('\n');
        return -1 === n ? e : e.substring(0, n);
      }
      const v = f({ __forward_ref__: f });
      function w(t) {
        return (
          (t.__forward_ref__ = w),
          (t.toString = function() {
            return y(this());
          }),
          t
        );
      }
      function C(t) {
        const e = t;
        return 'function' == typeof e && e.hasOwnProperty(v) && e.__forward_ref__ === w ? e() : t;
      }
      const x = 'undefined' != typeof globalThis && globalThis,
        E = 'undefined' != typeof window && window,
        S =
          'undefined' != typeof self &&
          'undefined' != typeof WorkerGlobalScope &&
          self instanceof WorkerGlobalScope &&
          self,
        k = 'undefined' != typeof global && global,
        D = x || k || E || S;
      class A {
        constructor(t, e) {
          (this._desc = t),
            (this.ngMetadataName = 'InjectionToken'),
            (this.ngInjectableDef = void 0),
            'number' == typeof e
              ? (this.__NG_ELEMENT_ID__ = e)
              : void 0 !== e &&
                (this.ngInjectableDef = g({ token: this, providedIn: e.providedIn || 'root', factory: e.factory }));
        }
        toString() {
          return `InjectionToken ${this._desc}`;
        }
      }
      const T = new A('INJECTOR', -1),
        O = new Object(),
        I = 'ngTempTokenPath',
        R = 'ngTokenPath',
        P = /\n/gm,
        N = '\u0275',
        M = '__source',
        L = f({ provide: String, useValue: f });
      let j,
        F = void 0;
      function B(t) {
        const e = F;
        return (F = t), e;
      }
      function V(t, e = m.Default) {
        return (j ||
          function(t, e = m.Default) {
            if (void 0 === F) throw new Error('inject() must be called from an injection context');
            return null === F
              ? (function(t, e, n) {
                  const s = b(t);
                  if (s && 'root' == s.providedIn) return void 0 === s.value ? (s.value = s.factory()) : s.value;
                  if (n & m.Optional) return null;
                  throw new Error(`Injector: NOT_FOUND [${y(t)}]`);
                })(t, 0, e)
              : F.get(t, e & m.Optional ? null : void 0, e);
          })(t, e);
      }
      const U = V;
      class H {
        get(t, e = O) {
          if (e === O) {
            const e = new Error(`NullInjectorError: No provider for ${y(t)}!`);
            throw ((e.name = 'NullInjectorError'), e);
          }
          return e;
        }
      }
      function z(t, e, n, s = null) {
        t = t && '\n' === t.charAt(0) && t.charAt(1) == N ? t.substr(2) : t;
        let i = y(e);
        if (e instanceof Array) i = e.map(y).join(' -> ');
        else if ('object' == typeof e) {
          let t = [];
          for (let n in e)
            if (e.hasOwnProperty(n)) {
              let s = e[n];
              t.push(n + ':' + ('string' == typeof s ? JSON.stringify(s) : y(s)));
            }
          i = `{${t.join(', ')}}`;
        }
        return `${n}${s ? '(' + s + ')' : ''}[${i}]: ${t.replace(P, '\n  ')}`;
      }
      class $ {}
      class q {}
      function W(t, e, n) {
        e >= t.length ? t.push(n) : t.splice(e, 0, n);
      }
      function K(t, e) {
        return e >= t.length - 1 ? t.pop() : t.splice(e, 1)[0];
      }
      const Y = (function() {
          var t = { OnPush: 0, Default: 1 };
          return (t[t.OnPush] = 'OnPush'), (t[t.Default] = 'Default'), t;
        })(),
        Q = (function() {
          var t = { Emulated: 0, Native: 1, None: 2, ShadowDom: 3 };
          return (
            (t[t.Emulated] = 'Emulated'),
            (t[t.Native] = 'Native'),
            (t[t.None] = 'None'),
            (t[t.ShadowDom] = 'ShadowDom'),
            t
          );
        })(),
        G = {},
        Z = [],
        X = f({ ngComponentDef: f }),
        J = f({ ngDirectiveDef: f }),
        tt = f({ ngPipeDef: f });
      let et = 0;
      function nt(t) {
        return (
          (function(t) {
            return t[X] || null;
          })(t) ||
          (function(t) {
            return t[J] || null;
          })(t)
        );
      }
      function st(t) {
        return (function(t) {
          return t[tt] || null;
        })(t);
      }
      function it(t, e) {
        if (null == t) return G;
        const n = {};
        for (const s in t)
          if (t.hasOwnProperty(s)) {
            let i = t[s],
              r = i;
            Array.isArray(i) && ((r = i[1]), (i = i[0])), (n[i] = s), e && (e[i] = r);
          }
        return n;
      }
      const rt = function(t) {
          const e = t.type,
            n = e.prototype,
            s = {},
            i = {
              type: e,
              providersResolver: null,
              consts: t.consts,
              vars: t.vars,
              factory: t.factory,
              template: t.template || null,
              ngContentSelectors: t.ngContentSelectors,
              hostBindings: t.hostBindings || null,
              contentQueries: t.contentQueries || null,
              declaredInputs: s,
              inputs: null,
              outputs: null,
              exportAs: t.exportAs || null,
              onChanges: null,
              onInit: n.ngOnInit || null,
              doCheck: n.ngDoCheck || null,
              afterContentInit: n.ngAfterContentInit || null,
              afterContentChecked: n.ngAfterContentChecked || null,
              afterViewInit: n.ngAfterViewInit || null,
              afterViewChecked: n.ngAfterViewChecked || null,
              onDestroy: n.ngOnDestroy || null,
              onPush: t.changeDetection === Y.OnPush,
              directiveDefs: null,
              pipeDefs: null,
              selectors: t.selectors,
              viewQuery: t.viewQuery || null,
              features: t.features || null,
              data: t.data || {},
              encapsulation: t.encapsulation || Q.Emulated,
              id: 'c',
              styles: t.styles || Z,
              _: null,
              setInput: null,
              schemas: t.schemas || null,
              tView: null
            };
          return (
            (i._ =
              '' +
              {
                toString: () => {
                  const n = t.directives,
                    r = t.features,
                    o = t.pipes;
                  (i.id += et++),
                    (i.inputs = it(t.inputs, s)),
                    (i.outputs = it(t.outputs)),
                    r && r.forEach(t => t(i)),
                    (i.directiveDefs = n ? () => ('function' == typeof n ? n() : n).map(nt) : null),
                    (i.pipeDefs = o ? () => ('function' == typeof o ? o() : o).map(st) : null),
                    e.hasOwnProperty(_) || (e[_] = g({ token: e, factory: t.factory }));
                }
              }),
            i
          );
        },
        ot = 0,
        at = 1,
        lt = 7,
        ct = 12,
        ht = 19;
      let ut = null;
      const dt = new Map();
      let pt = null;
      const mt = 1,
        ft = 0;
      function gt(t, e) {
        return (
          (pt && t === pt) ||
            ((pt = t),
            e && (ut = dt.get(t) || null),
            (ut = ut || { classesBitMask: ft, classesIndex: mt, stylesBitMask: ft, stylesIndex: mt })),
          ut
        );
      }
      function bt(t, e) {
        return (function(t) {
          for (; Array.isArray(t); ) t = t[ot];
          return t;
        })(e[t.index]);
      }
      function _t(t, e) {
        return e[at].data[t + ht];
      }
      let yt = null;
      function vt() {
        return Ct;
      }
      let wt,
        Ct,
        xt,
        Et = 1,
        St = 0,
        kt = 0,
        Dt = -1;
      function At() {
        return Dt;
      }
      function Tt() {
        return xt;
      }
      const Ot = (() =>
          (('undefined' != typeof requestAnimationFrame && requestAnimationFrame) || setTimeout).bind(D))(),
        It = '--MAP--',
        Rt = 0;
      function Pt(t, e) {
        e === Rt
          ? t[2] > Rt &&
            (function(t) {
              Mt(t, 2 | Nt(t));
            })(t)
          : (t[2] = e);
      }
      function Nt(t) {
        return t[1];
      }
      function Mt(t, e) {
        t[1] = e;
      }
      function Lt(t, e) {
        return t[e + 2];
      }
      function jt(t, e) {
        return 1 & t[e + 0];
      }
      function Ft(t, e) {
        return (1 & jt(t, e)) > 0;
      }
      function Bt(t, e) {
        return t[e + 0] >> 1;
      }
      function Vt(t, e, n) {
        const s = jt(t, e);
        t[e + 0] = s | (n << 1);
      }
      function Ut(t, e) {
        return t[e + 1];
      }
      function Ht(t, e, n) {
        return t[e + 3 + n];
      }
      function zt(t, e) {
        return !(!t || e !== t[2]);
      }
      function $t(t) {
        return (1 & Nt(t)) > 0;
      }
      function qt(t) {
        return (2 & Nt(t)) > 0;
      }
      function Wt(t) {
        return 6 + t[4];
      }
      function Kt(t, e) {
        let n = Array.isArray(t) ? t[0] : t,
          s = Array.isArray(e) ? e[0] : e;
        return (
          n instanceof String && (n = n.toString()),
          s instanceof String && (s = s.toString()),
          !(n != n && s != s) && n !== s
        );
      }
      function Yt(t) {
        return null != t && '' !== t;
      }
      function Qt(t, e, n = ' ') {
        return t + (e.length && t.length ? n : '') + e;
      }
      function Gt(t) {
        return t.replace(/[a-z][A-Z]/g, t => t.charAt(0) + '-' + t.charAt(1)).toLowerCase();
      }
      function Zt(t) {
        return Xt(t) ? t[0] : t;
      }
      function Xt(t) {
        return Array.isArray(t) && t.length >= 6 && 'string' != typeof t[1];
      }
      function Jt(t, e) {
        return t[e + 0];
      }
      function te(t, e, n) {
        t[e + 1] = n;
      }
      function ee(t, e) {
        return t[e + 1];
      }
      const ne = (function() {
        var t = { Important: 1, DashCase: 2 };
        return (t[t.Important] = 'Important'), (t[t.DashCase] = 'DashCase'), t;
      })();
      function se(t) {
        return !!t.listen;
      }
      const ie = 'ngDebugContext',
        re = 'ngOriginalError',
        oe = 'ngErrorLogger';
      function ae(t) {
        return t[ie];
      }
      function le(t) {
        return t[re];
      }
      function ce(t, ...e) {
        t.error(...e);
      }
      class he {
        constructor() {
          this._console = console;
        }
        handleError(t) {
          const e = this._findOriginalError(t),
            n = this._findContext(t),
            s = (function(t) {
              return t[oe] || ce;
            })(t);
          s(this._console, 'ERROR', t),
            e && s(this._console, 'ORIGINAL ERROR', e),
            n && s(this._console, 'ERROR CONTEXT', n);
        }
        _findContext(t) {
          return t ? (ae(t) ? ae(t) : this._findContext(le(t))) : null;
        }
        _findOriginalError(t) {
          let e = le(t);
          for (; e && le(e); ) e = le(e);
          return e;
        }
      }
      let ue = !0,
        de = !1;
      function pe() {
        return (de = !0), ue;
      }
      function me() {
        if (de) throw new Error('Cannot enable prod mode after platform setup.');
        ue = !1;
      }
      class fe {
        constructor(t) {
          if (
            ((this.defaultDoc = t),
            (this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert')),
            (this.inertBodyElement = this.inertDocument.body),
            null == this.inertBodyElement)
          ) {
            const t = this.inertDocument.createElement('html');
            this.inertDocument.appendChild(t),
              (this.inertBodyElement = this.inertDocument.createElement('body')),
              t.appendChild(this.inertBodyElement);
          }
          (this.inertBodyElement.innerHTML = '<svg><g onload="this.parentNode.remove()"></g></svg>'),
            !this.inertBodyElement.querySelector || this.inertBodyElement.querySelector('svg')
              ? ((this.inertBodyElement.innerHTML = '<svg><p><style><img src="</style><img src=x onerror=alert(1)//">'),
                (this.getInertBodyElement =
                  this.inertBodyElement.querySelector &&
                  this.inertBodyElement.querySelector('svg img') &&
                  (function() {
                    try {
                      return !!window.DOMParser;
                    } catch (t) {
                      return !1;
                    }
                  })()
                    ? this.getInertBodyElement_DOMParser
                    : this.getInertBodyElement_InertDocument))
              : (this.getInertBodyElement = this.getInertBodyElement_XHR);
        }
        getInertBodyElement_XHR(t) {
          t = '<body><remove></remove>' + t + '</body>';
          try {
            t = encodeURI(t);
          } catch (s) {
            return null;
          }
          const e = new XMLHttpRequest();
          (e.responseType = 'document'), e.open('GET', 'data:text/html;charset=utf-8,' + t, !1), e.send(void 0);
          const n = e.response.body;
          return n.removeChild(n.firstChild), n;
        }
        getInertBodyElement_DOMParser(t) {
          t = '<body><remove></remove>' + t + '</body>';
          try {
            const n = new window.DOMParser().parseFromString(t, 'text/html').body;
            return n.removeChild(n.firstChild), n;
          } catch (e) {
            return null;
          }
        }
        getInertBodyElement_InertDocument(t) {
          const e = this.inertDocument.createElement('template');
          return 'content' in e
            ? ((e.innerHTML = t), e)
            : ((this.inertBodyElement.innerHTML = t),
              this.defaultDoc.documentMode && this.stripCustomNsAttrs(this.inertBodyElement),
              this.inertBodyElement);
        }
        stripCustomNsAttrs(t) {
          const e = t.attributes;
          for (let s = e.length - 1; 0 < s; s--) {
            const n = e.item(s).name;
            ('xmlns:ns1' !== n && 0 !== n.indexOf('ns1:')) || t.removeAttribute(n);
          }
          let n = t.firstChild;
          for (; n; ) n.nodeType === Node.ELEMENT_NODE && this.stripCustomNsAttrs(n), (n = n.nextSibling);
        }
      }
      const ge = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:\/?#]*(?:[\/?#]|$))/gi,
        be = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
      function _e(t) {
        return (t = String(t)).match(ge) || t.match(be)
          ? t
          : (pe() && console.warn(`WARNING: sanitizing unsafe URL value ${t} (see http://g.co/ng/security#xss)`),
            'unsafe:' + t);
      }
      function ye(t) {
        const e = {};
        for (const n of t.split(',')) e[n] = !0;
        return e;
      }
      function ve(...t) {
        const e = {};
        for (const n of t) for (const t in n) n.hasOwnProperty(t) && (e[t] = !0);
        return e;
      }
      const we = ye('area,br,col,hr,img,wbr'),
        Ce = ye('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),
        xe = ye('rp,rt'),
        Ee = ve(xe, Ce),
        Se = ve(
          we,
          ve(
            Ce,
            ye(
              'address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'
            )
          ),
          ve(
            xe,
            ye(
              'a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'
            )
          ),
          Ee
        ),
        ke = ye('background,cite,href,itemtype,longdesc,poster,src,xlink:href'),
        De = ye('srcset'),
        Ae = ve(
          ke,
          De,
          ye(
            'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width'
          ),
          ye(
            'aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext'
          )
        ),
        Te = ye('script,style,template');
      class Oe {
        constructor() {
          (this.sanitizedSomething = !1), (this.buf = []);
        }
        sanitizeChildren(t) {
          let e = t.firstChild,
            n = !0;
          for (; e; )
            if (
              (e.nodeType === Node.ELEMENT_NODE
                ? (n = this.startElement(e))
                : e.nodeType === Node.TEXT_NODE
                ? this.chars(e.nodeValue)
                : (this.sanitizedSomething = !0),
              n && e.firstChild)
            )
              e = e.firstChild;
            else
              for (; e; ) {
                e.nodeType === Node.ELEMENT_NODE && this.endElement(e);
                let t = this.checkClobberedElement(e, e.nextSibling);
                if (t) {
                  e = t;
                  break;
                }
                e = this.checkClobberedElement(e, e.parentNode);
              }
          return this.buf.join('');
        }
        startElement(t) {
          const e = t.nodeName.toLowerCase();
          if (!Se.hasOwnProperty(e)) return (this.sanitizedSomething = !0), !Te.hasOwnProperty(e);
          this.buf.push('<'), this.buf.push(e);
          const n = t.attributes;
          for (let i = 0; i < n.length; i++) {
            const t = n.item(i),
              e = t.name,
              r = e.toLowerCase();
            if (!Ae.hasOwnProperty(r)) {
              this.sanitizedSomething = !0;
              continue;
            }
            let o = t.value;
            ke[r] && (o = _e(o)),
              De[r] &&
                ((s = o),
                (o = (s = String(s))
                  .split(',')
                  .map(t => _e(t.trim()))
                  .join(', '))),
              this.buf.push(' ', e, '="', Pe(o), '"');
          }
          var s;
          return this.buf.push('>'), !0;
        }
        endElement(t) {
          const e = t.nodeName.toLowerCase();
          Se.hasOwnProperty(e) && !we.hasOwnProperty(e) && (this.buf.push('</'), this.buf.push(e), this.buf.push('>'));
        }
        chars(t) {
          this.buf.push(Pe(t));
        }
        checkClobberedElement(t, e) {
          if (
            e &&
            (t.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY
          )
            throw new Error(`Failed to sanitize html because the element is clobbered: ${t.outerHTML}`);
          return e;
        }
      }
      const Ie = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
        Re = /([^\#-~ |!])/g;
      function Pe(t) {
        return t
          .replace(/&/g, '&amp;')
          .replace(Ie, function(t) {
            return '&#' + (1024 * (t.charCodeAt(0) - 55296) + (t.charCodeAt(1) - 56320) + 65536) + ';';
          })
          .replace(Re, function(t) {
            return '&#' + t.charCodeAt(0) + ';';
          })
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;');
      }
      let Ne;
      function Me(t, e) {
        let n = null;
        try {
          Ne = Ne || new fe(t);
          let s = e ? String(e) : '';
          n = Ne.getInertBodyElement(s);
          let i = 5,
            r = s;
          do {
            if (0 === i) throw new Error('Failed to sanitize html because the input is unstable');
            i--, (s = r), (r = n.innerHTML), (n = Ne.getInertBodyElement(s));
          } while (s !== r);
          const o = new Oe(),
            a = o.sanitizeChildren(Le(n) || n);
          return (
            pe() &&
              o.sanitizedSomething &&
              console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss'),
            a
          );
        } finally {
          if (n) {
            const t = Le(n) || n;
            for (; t.firstChild; ) t.removeChild(t.firstChild);
          }
        }
      }
      function Le(t) {
        return 'content' in t &&
          (function(t) {
            return t.nodeType === Node.ELEMENT_NODE && 'TEMPLATE' === t.nodeName;
          })(t)
          ? t.content
          : null;
      }
      const je = (function() {
        var t = { NONE: 0, HTML: 1, STYLE: 2, SCRIPT: 3, URL: 4, RESOURCE_URL: 5 };
        return (
          (t[t.NONE] = 'NONE'),
          (t[t.HTML] = 'HTML'),
          (t[t.STYLE] = 'STYLE'),
          (t[t.SCRIPT] = 'SCRIPT'),
          (t[t.URL] = 'URL'),
          (t[t.RESOURCE_URL] = 'RESOURCE_URL'),
          t
        );
      })();
      class Fe {}
      const Be = new RegExp(
          '^([-,."\'%_!# a-zA-Z0-9]+|(?:(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|Z|3d)?|(?:rgb|hsl)a?|(?:repeating-)?(?:linear|radial)-gradient|(?:calc|attr))\\([-0-9.%, #a-zA-Z]+\\))$',
          'g'
        ),
        Ve = /^url\(([^)]+)\)$/;
      function Ue(t) {
        if (!(t = String(t).trim())) return '';
        const e = t.match(Ve);
        return (e && _e(e[1]) === e[1]) ||
          (t.match(Be) &&
            (function(t) {
              let e = !0,
                n = !0;
              for (let s = 0; s < t.length; s++) {
                const i = t.charAt(s);
                "'" === i && n ? (e = !e) : '"' === i && e && (n = !n);
              }
              return e && n;
            })(t))
          ? t
          : (pe() && console.warn(`WARNING: sanitizing unsafe style value ${t} (see http://g.co/ng/security#xss).`),
            'unsafe');
      }
      const He = /([A-Z])/g;
      function ze(t) {
        try {
          return null != t ? t.toString().slice(0, 30) : t;
        } catch (e) {
          return '[ERROR] Exception while trying to serialize the value';
        }
      }
      const $e = 1,
        qe = 0,
        We = null,
        Ke = 1;
      let Ye = [];
      function Qe(t, e, n, s, i, r, o, a, l) {
        $t(t) ||
          (o
            ? (function(t, e, n, s, i) {
                Ye.unshift(t, e, n, s, i);
              })(t, n, s, i, l)
            : (Ye.length && Ge(), Ze(t, n, s, i, l)));
        const c = a || Kt(e[i], r);
        return c && (e[i] = r), c;
      }
      function Ge() {
        let t = 0;
        for (; t < Ye.length; ) Ze(Ye[t++], Ye[t++], Ye[t++], Ye[t++], Ye[t++]);
        Ye.length = 0;
      }
      function Ze(t, e, n, s, i) {
        let r = !1;
        if (n) {
          let o = !1,
            a = Wt(t);
          for (; a < t.length; ) {
            const r = Ut(t, a),
              l = Lt(t, a);
            if ((o = n <= l)) {
              n < l && Xe(t, a, n, i), Je(t, !1, a, s, e);
              break;
            }
            a += 3 + r;
          }
          o || (Xe(t, t.length, n, i), Je(t, !1, a, s, e), (r = !0));
        } else Je(t, !0, 3, s, e), (r = !0);
        return r;
      }
      function Xe(t, e, n, s) {
        t.splice(e, 0, s ? 1 : 0, Ke, n, We), Vt(t, e, $e);
      }
      function Je(t, e, n, s, i) {
        const r = n + 3;
        let o = r + Ut(t, n);
        if ((e || o--, 'number' == typeof s)) {
          for (let e = r; e <= o; e++) if (t[e] === s) return;
          t.splice(o, 0, s), t[n + 1]++, Vt(t, n, Bt(t, n) | (1 << i));
        } else null !== s && null == t[o] && (t[o] = s);
      }
      function tn(t, e, n, s, i, r, o, a) {
        return i &&
          s &&
          ((function(t) {
            if (!$t(t)) {
              const e = Zt(t);
              e &&
                (function(t, e) {
                  for (let n = 1; n < e.length; n += 2) {
                    const s = ee(e, n);
                    s && Ze(t, -1, Jt(e, n), s, !1);
                  }
                })(t, e),
                (function(t) {
                  Mt(t, 1 | Nt(t));
                })(t);
            }
          })(s),
          (function(t, e) {
            return t && e > ft;
          })(s, r))
          ? ((function(t, e, n, s, i, r, o) {
              const a = !0 === (l = i) ? -1 : !1 === l ? 0 : l;
              var l;
              const c = en,
                h = (a & Bt(t, 3)) > 0 ? 1 : 0;
              let u = Wt(t);
              for (; u < t.length; ) {
                const i = Ut(t, u);
                if (a & Bt(t, u)) {
                  let a = !1;
                  const l = Lt(t, u),
                    d = i - 1,
                    p = Ht(t, u, d);
                  for (let i = 0; i < d; i++) {
                    const c = Ht(t, u, i),
                      h = s[c];
                    if (Yt(h)) {
                      r(e, n, l, o && Ft(t, u) ? o(l, h, 2) : h, c), (a = !0);
                      break;
                    }
                  }
                  if (c) {
                    const i = c(t, e, n, s, r, o, h | (a ? 4 : 2), l, p);
                    a = a || i;
                  }
                  a || r(e, n, l, p);
                }
                u += 3 + i;
              }
              c && c(t, e, n, s, r, o, h);
            })(s, t, e, n, r, o, a),
            !0)
          : i;
      }
      let en = null;
      const nn = (t, e, n, s) => {
          const i = e.style;
          s
            ? ((s = s.toString()), t && se(t) ? t.setStyle(e, n, s, ne.DashCase) : i && i.setProperty(n, s))
            : t && se(t)
            ? t.removeStyle(e, n, ne.DashCase)
            : i && i.removeProperty(n);
        },
        sn = (t, e, n, s) => {
          if ('' !== n) {
            const i = e.classList;
            s ? (t && se(t) ? t.addClass(e, n) : i && i.add(n)) : t && se(t) ? t.removeClass(e, n) : i && i.remove(n);
          }
        },
        rn = {},
        on = (t, e, n, s, i, r, o, a, l) => {
          let c = !1;
          if (Ut(t, 3)) {
            let h = !0;
            const u = !a;
            u && -2 & o && ((h = !1), (c = !0)),
              h &&
                (c = (function t(e, n, s, i, r, o, a, l, c, h) {
                  let u = !1;
                  if (c < Ut(e, 3)) {
                    const d = Ht(e, 3, c),
                      p = i[d];
                    let m = (function(t) {
                      return t >= cn.length && cn.push(1), cn[t];
                    })(c);
                    for (; m < p.length; ) {
                      const f = Jt(p, m),
                        g = l && f > l,
                        b = !g && f === l,
                        _ = ee(p, m),
                        y = Yt(_);
                      let v = t(e, n, s, i, r, o, g ? a : an(a, y, b), g ? l : f, c + 1, h);
                      if (g) {
                        u || (u = v);
                        break;
                      }
                      if (!v && ln(a, b)) {
                        const t = b && !y,
                          e = t ? h : _,
                          i = t ? d : null;
                        r(n, s, f, o ? o(f, e, 3) : e, i), (v = !0);
                      }
                      (u = v && b), (m += 2);
                    }
                    if (((cn[c] = m), 1 === p.length || !l)) return t(e, n, s, i, r, o, a, l, c + 1, h);
                  }
                  return u;
                })(t, e, n, s, i, r, o, a || null, 0, l || null)),
              u &&
                (function() {
                  for (let t = 0; t < cn.length; t++) cn[t] = 1;
                })();
          }
          return c;
        };
      function an(t, e, n) {
        let s = t;
        return e || 4 & t || !(n || 1 & t) ? ((s |= 4), (s &= -3)) : ((s |= 2), (s &= -5)), s;
      }
      function ln(t, e) {
        let n = (1 & t) > 0;
        return n ? 4 & t && e && (n = !1) : 2 & t && (n = e), n;
      }
      const cn = [];
      function hn(t, e, n, s) {
        for (let i = 1; i < t.length; i += 2) {
          const r = Jt(t, i);
          if (e <= r) {
            let o = !1;
            if (r === e) {
              const e = t[i];
              (!s && Yt(e)) || ((o = !0), te(t, i, n));
            } else (o = !0), t.splice(i, 0, e, n);
            return o;
          }
        }
        return t.push(e, n), !0;
      }
      let un = (() => {
        class t {}
        return (t.__NG_ELEMENT_ID__ = () => dn()), t;
      })();
      const dn = (...t) => {},
        pn = new A('The presence of this token marks an injector as being the root injector.'),
        mn = function(t, e, n) {
          return new wn(t, e, n);
        };
      let fn = (() => {
        class t {
          static create(t, e) {
            return Array.isArray(t) ? mn(t, e, '') : mn(t.providers, t.parent, t.name || '');
          }
        }
        return (
          (t.THROW_IF_NOT_FOUND = O),
          (t.NULL = new H()),
          (t.ngInjectableDef = g({ token: t, providedIn: 'any', factory: () => V(T) })),
          (t.__NG_ELEMENT_ID__ = -1),
          t
        );
      })();
      const gn = function(t) {
          return t;
        },
        bn = [],
        _n = gn,
        yn = function() {
          return Array.prototype.slice.call(arguments);
        },
        vn = '\u0275';
      class wn {
        constructor(t, e = fn.NULL, n = null) {
          (this.parent = e), (this.source = n);
          const s = (this._records = new Map());
          s.set(fn, { token: fn, fn: gn, deps: bn, value: this, useNew: !1 }),
            s.set(T, { token: T, fn: gn, deps: bn, value: this, useNew: !1 }),
            (function t(e, n) {
              if (n)
                if ((n = C(n)) instanceof Array) for (let s = 0; s < n.length; s++) t(e, n[s]);
                else {
                  if ('function' == typeof n) throw xn('Function/Class not supported', n);
                  if (!n || 'object' != typeof n || !n.provide) throw xn('Unexpected provider', n);
                  {
                    let t = C(n.provide);
                    const s = (function(t) {
                      const e = (function(t) {
                        let e = bn;
                        const n = t.deps;
                        if (n && n.length) {
                          e = [];
                          for (let t = 0; t < n.length; t++) {
                            let s = 6,
                              i = C(n[t]);
                            if (i instanceof Array)
                              for (let t = 0, e = i; t < e.length; t++) {
                                const n = e[t];
                                n instanceof u || n == u
                                  ? (s |= 1)
                                  : n instanceof p || n == p
                                  ? (s &= -3)
                                  : n instanceof d || n == d
                                  ? (s &= -5)
                                  : (i = n instanceof h ? n.token : C(n));
                              }
                            e.push({ token: i, options: s });
                          }
                        } else if (t.useExisting) e = [{ token: C(t.useExisting), options: 6 }];
                        else if (!(n || L in t)) throw xn("'deps' required", t);
                        return e;
                      })(t);
                      let n = gn,
                        s = bn,
                        i = !1,
                        r = C(t.provide);
                      if (L in t) s = t.useValue;
                      else if (t.useFactory) n = t.useFactory;
                      else if (t.useExisting);
                      else if (t.useClass) (i = !0), (n = C(t.useClass));
                      else {
                        if ('function' != typeof r)
                          throw xn(
                            'StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable',
                            t
                          );
                        (i = !0), (n = r);
                      }
                      return { deps: e, fn: n, useNew: i, value: s };
                    })(n);
                    if (!0 === n.multi) {
                      let s = e.get(t);
                      if (s) {
                        if (s.fn !== yn) throw Cn(t);
                      } else e.set(t, (s = { token: n.provide, deps: [], useNew: !1, fn: yn, value: bn }));
                      s.deps.push({ token: (t = n), options: 6 });
                    }
                    const i = e.get(t);
                    if (i && i.fn == yn) throw Cn(t);
                    e.set(t, s);
                  }
                }
            })(s, t);
        }
        get(t, e, n = m.Default) {
          const s = this._records.get(t);
          try {
            return (function t(e, n, s, i, r, o) {
              try {
                return (function(e, n, s, i, r, o) {
                  let a;
                  if (!n || o & m.SkipSelf) o & m.Self || (a = i.get(e, r, m.Default));
                  else {
                    if ((a = n.value) == _n) throw Error(vn + 'Circular dependency');
                    if (a === bn) {
                      n.value = _n;
                      let e = void 0,
                        r = n.useNew,
                        o = n.fn,
                        l = n.deps,
                        c = bn;
                      if (l.length) {
                        c = [];
                        for (let e = 0; e < l.length; e++) {
                          const n = l[e],
                            r = n.options,
                            o = 2 & r ? s.get(n.token) : void 0;
                          c.push(
                            t(n.token, o, s, o || 4 & r ? i : fn.NULL, 1 & r ? null : fn.THROW_IF_NOT_FOUND, m.Default)
                          );
                        }
                      }
                      n.value = a = r ? new o(...c) : o.apply(e, c);
                    }
                  }
                  return a;
                })(e, n, s, i, r, o);
              } catch (a) {
                throw (a instanceof Error || (a = new Error(a)),
                (a[I] = a[I] || []).unshift(e),
                n && n.value == _n && (n.value = bn),
                a);
              }
            })(t, s, this._records, this.parent, e, n);
          } catch (i) {
            return (function(t, e, n, s) {
              const i = t[I];
              throw (e[M] && i.unshift(e[M]),
              (t.message = z('\n' + t.message, i, 'StaticInjectorError', s)),
              (t[R] = i),
              (t[I] = null),
              t);
            })(i, t, 0, this.source);
          }
        }
        toString() {
          const t = [];
          return this._records.forEach((e, n) => t.push(y(n))), `StaticInjector[${t.join(', ')}]`;
        }
      }
      function Cn(t) {
        return xn('Cannot mix multi providers and regular providers', t);
      }
      function xn(t, e) {
        return new Error(z(t, e, 'StaticInjectorError'));
      }
      const En = new A('AnalyzeForEntryComponents');
      function Sn(t) {
        const e = vt(),
          n = e[at];
        n.firstTemplatePass &&
          ((function(t, e, n) {
            const s = t.expandoInstructions,
              i = s.length;
            i >= 2 && s[i - 2] === e.hostBindings ? (s[i - 1] = s[i - 1] + n) : s.push(e.hostBindings, n);
          })(n, yt, t),
          (function(t, e, n) {
            for (let s = 0; s < n; s++) e.push(rn), t.blueprint.push(rn), t.data.push(null);
          })(n, e, t));
      }
      let kn = null;
      function Dn() {
        if (!kn) {
          const t = D.Symbol;
          if (t && t.iterator) kn = t.iterator;
          else {
            const t = Object.getOwnPropertyNames(Map.prototype);
            for (let e = 0; e < t.length; ++e) {
              const n = t[e];
              'entries' !== n && 'size' !== n && Map.prototype[n] === Map.prototype.entries && (kn = n);
            }
          }
        }
        return kn;
      }
      function An(t, e) {
        return t === e || ('number' == typeof t && 'number' == typeof e && isNaN(t) && isNaN(e));
      }
      function Tn(t, e) {
        const n = In(t),
          s = In(e);
        if (n && s)
          return (function(t, e, n) {
            const s = t[Dn()](),
              i = e[Dn()]();
            for (;;) {
              const t = s.next(),
                e = i.next();
              if (t.done && e.done) return !0;
              if (t.done || e.done) return !1;
              if (!n(t.value, e.value)) return !1;
            }
          })(t, e, Tn);
        {
          const i = t && ('object' == typeof t || 'function' == typeof t),
            r = e && ('object' == typeof e || 'function' == typeof e);
          return !(n || !i || s || !r) || An(t, e);
        }
      }
      class On {
        constructor(t) {
          this.wrapped = t;
        }
        static wrap(t) {
          return new On(t);
        }
        static unwrap(t) {
          return On.isWrapped(t) ? t.wrapped : t;
        }
        static isWrapped(t) {
          return t instanceof On;
        }
      }
      function In(t) {
        return !!Rn(t) && (Array.isArray(t) || (!(t instanceof Map) && Dn() in t));
      }
      function Rn(t) {
        return null !== t && ('function' == typeof t || 'object' == typeof t);
      }
      function Pn() {
        var t, e;
        vt()[at].firstTemplatePass && ((t = wt), (e = Bn()), Pt(Un(t), e), Pt(Vn(t), e));
      }
      function Nn(t) {
        const e = At(),
          n = vt(),
          s = _t(e, n),
          i = Vn(s),
          r = Bn(),
          o = n[lt]++;
        !r &&
          (function(t) {
            return 0 != (16 & t.flags);
          })(s) &&
          t !== rn &&
          (jn(i, n, s, o, t, !1), (t = rn)),
          Ln(e, i, o, t, !1, zn());
      }
      function Mn(t) {
        !(function(t, e) {
          const n = vt(),
            s = _t(t, n),
            i = Un(s),
            r = Bn(),
            o = n[lt]++;
          !r &&
            (function(t) {
              return 0 != (8 & t.flags);
            })(s) &&
            e !== rn &&
            (jn(i, n, s, o, e, !0), (e = rn)),
            Ln(t, i, o, e, !0, zn());
        })(At(), t);
      }
      function Ln(t, e, n, s, i, r) {
        en = on;
        const o = vt();
        let a = !1;
        if (s !== rn) {
          const l = bt(_t(t, o), o),
            c = o[n];
          a = Kt(c, s);
          const h = (function(t, e, n) {
            const s = Array.isArray(t) ? t : [null];
            s[0] = e || null;
            for (let a = 1; a < s.length; a += 2) te(s, a, null);
            let i,
              r = null,
              o = !1;
            if (
              ('string' == typeof e
                ? e.length && ((r = e.split(/\s+/)), (o = !0))
                : ((r = e ? Object.keys(e) : null), (i = e)),
              r)
            )
              for (let a = 0; a < r.length; a++) {
                const t = r[a];
                hn(s, n ? Gt(t) : t, !!o || i[t], !0);
              }
            return s;
          })(c, s, !i);
          i
            ? (function(t, e, n, s, i, r, o, a) {
                const c = gt(l, qt(t)),
                  h = qe;
                (!Qe(t, e, h, null, i, r, o, a, !1) && !a) || (c.classesBitMask |= 1 << h);
              })(e, o, 0, 0, n, h, r, a)
            : (function(t, e, n, s, i, r, o, a, l) {
                const c = gt(n, qt(t)),
                  h = qe;
                (!Qe(t, e, h, null, i, r, a, l, !0) && !l) || (c.stylesBitMask |= 1 << h);
              })(e, o, l, 0, n, h, Tt(), r, a);
        }
        return a;
      }
      function jn(t, e, n, s, i, r) {
        e[s] !== i &&
          ((i || $t(t)) &&
            (function(t, e, n) {
              const s = t[at];
              for (let i = 0; i < e.length; ) {
                const r = e[i++],
                  o = e[i++],
                  a = e[i++],
                  l = t[r],
                  c = s.data[r];
                c.setInput ? c.setInput(l, n, o, a) : (l[a] = n);
              }
            })(
              e,
              n.inputs[r ? 'class' : 'style'],
              (function(t, e, n) {
                let s = e;
                var i;
                return (
                  t.length > 0 &&
                    (s = n
                      ? Qt(t, ((i = e) && 'string' != typeof i && (i = Object.keys(i).join(' ')), i || ''))
                      : Qt(
                          t,
                          (function(t) {
                            let e = '';
                            if (t) {
                              const n = Object.keys(t);
                              for (let s = 0; s < n.length; s++) {
                                const i = n[s];
                                e = Qt(e, `${i}:${t[i]}`, ';');
                              }
                            }
                            return e;
                          })(e),
                          ';'
                        )),
                  s
                );
              })(
                (function(t) {
                  const e = Zt(t);
                  return (e && e[0]) || '';
                })(t),
                i,
                r
              )
            ),
          (e[s] = i));
      }
      function Fn() {
        const t = At(),
          e = vt(),
          n = _t(t, e),
          s = (function(t, e) {
            return 3 === t.type ? e[ct] : null;
          })(n, e),
          i = bt(n, e),
          r = Bn(),
          o = Tt();
        (function(t, e, n, s, i, r, o) {
          const a = n ? qt(n) : !!s && qt(s),
            l = zt(n, r),
            c = zt(s, r);
          Ye.length && (l || c) && Ge();
          const h = gt(i, a),
            u = tn(t, i, e, n, l, h.classesBitMask, sn, null),
            d = tn(t, i, e, s, c, h.stylesBitMask, nn, o);
          u && d
            ? ((ut = null),
              (pt = null),
              a &&
                (function(t) {
                  dt.delete(t);
                })(i))
            : a &&
              (function(t, e) {
                dt.set(t, e);
              })(i, h);
        })(s, e, Un(n), Vn(n), i, r, o),
          (xt = null);
      }
      function Bn() {
        return Et + St;
      }
      function Vn(t) {
        return Hn(t, !1);
      }
      function Un(t) {
        return Hn(t, !0);
      }
      function Hn(t, e) {
        let n = e ? t.classes : t.styles;
        return Xt(n) || ((n = [n || [''], 0, Rt, 1, 0, It]), e ? (t.classes = n) : (t.styles = n)), n;
      }
      function zn() {
        return kt > 0;
      }
      function $n(t) {
        return !!t && 'function' == typeof t.then;
      }
      function qn(t) {
        return !!t && 'function' == typeof t.subscribe;
      }
      class Wn {
        constructor(t, e, n) {
          (this.previousValue = t), (this.currentValue = e), (this.firstChange = n);
        }
        isFirstChange() {
          return this.firstChange;
        }
      }
      class Kn {}
      class Yn {}
      function Qn(t) {
        const e = Error(`No component factory found for ${y(t)}. Did you add it to @NgModule.entryComponents?`);
        return (e[Gn] = t), e;
      }
      const Gn = 'ngComponent';
      class Zn {
        resolveComponentFactory(t) {
          throw Qn(t);
        }
      }
      let Xn = (() => {
        class t {}
        return (t.NULL = new Zn()), t;
      })();
      class Jn {
        constructor(t, e, n) {
          (this._parent = e), (this._ngModule = n), (this._factories = new Map());
          for (let s = 0; s < t.length; s++) {
            const e = t[s];
            this._factories.set(e.componentType, e);
          }
        }
        resolveComponentFactory(t) {
          let e = this._factories.get(t);
          if ((!e && this._parent && (e = this._parent.resolveComponentFactory(t)), !e)) throw Qn(t);
          return new ts(e, this._ngModule);
        }
      }
      class ts extends Yn {
        constructor(t, e) {
          super(),
            (this.factory = t),
            (this.ngModule = e),
            (this.selector = t.selector),
            (this.componentType = t.componentType),
            (this.ngContentSelectors = t.ngContentSelectors),
            (this.inputs = t.inputs),
            (this.outputs = t.outputs);
        }
        create(t, e, n, s) {
          return this.factory.create(t, e, n, s || this.ngModule);
        }
      }
      function es(...t) {}
      let ns = (() => {
        class t {
          constructor(t) {
            this.nativeElement = t;
          }
        }
        return (t.__NG_ELEMENT_ID__ = () => ss(t)), t;
      })();
      const ss = es;
      class is {}
      class rs {}
      const os = (function() {
        var t = { Important: 1, DashCase: 2 };
        return (t[t.Important] = 'Important'), (t[t.DashCase] = 'DashCase'), t;
      })();
      let as = (() => {
        class t {}
        return (t.__NG_ELEMENT_ID__ = () => ls()), t;
      })();
      const ls = es;
      class cs {
        constructor(t) {
          (this.full = t),
            (this.major = t.split('.')[0]),
            (this.minor = t.split('.')[1]),
            (this.patch = t
              .split('.')
              .slice(2)
              .join('.'));
        }
      }
      const hs = new cs('8.2.2');
      class us {
        constructor() {}
        supports(t) {
          return In(t);
        }
        create(t) {
          return new ps(t);
        }
      }
      const ds = (t, e) => e;
      class ps {
        constructor(t) {
          (this.length = 0),
            (this._linkedRecords = null),
            (this._unlinkedRecords = null),
            (this._previousItHead = null),
            (this._itHead = null),
            (this._itTail = null),
            (this._additionsHead = null),
            (this._additionsTail = null),
            (this._movesHead = null),
            (this._movesTail = null),
            (this._removalsHead = null),
            (this._removalsTail = null),
            (this._identityChangesHead = null),
            (this._identityChangesTail = null),
            (this._trackByFn = t || ds);
        }
        forEachItem(t) {
          let e;
          for (e = this._itHead; null !== e; e = e._next) t(e);
        }
        forEachOperation(t) {
          let e = this._itHead,
            n = this._removalsHead,
            s = 0,
            i = null;
          for (; e || n; ) {
            const r = !n || (e && e.currentIndex < bs(n, s, i)) ? e : n,
              o = bs(r, s, i),
              a = r.currentIndex;
            if (r === n) s--, (n = n._nextRemoved);
            else if (((e = e._next), null == r.previousIndex)) s++;
            else {
              i || (i = []);
              const t = o - s,
                e = a - s;
              if (t != e) {
                for (let n = 0; n < t; n++) {
                  const s = n < i.length ? i[n] : (i[n] = 0),
                    r = s + n;
                  e <= r && r < t && (i[n] = s + 1);
                }
                i[r.previousIndex] = e - t;
              }
            }
            o !== a && t(r, o, a);
          }
        }
        forEachPreviousItem(t) {
          let e;
          for (e = this._previousItHead; null !== e; e = e._nextPrevious) t(e);
        }
        forEachAddedItem(t) {
          let e;
          for (e = this._additionsHead; null !== e; e = e._nextAdded) t(e);
        }
        forEachMovedItem(t) {
          let e;
          for (e = this._movesHead; null !== e; e = e._nextMoved) t(e);
        }
        forEachRemovedItem(t) {
          let e;
          for (e = this._removalsHead; null !== e; e = e._nextRemoved) t(e);
        }
        forEachIdentityChange(t) {
          let e;
          for (e = this._identityChangesHead; null !== e; e = e._nextIdentityChange) t(e);
        }
        diff(t) {
          if ((null == t && (t = []), !In(t)))
            throw new Error(`Error trying to diff '${y(t)}'. Only arrays and iterables are allowed`);
          return this.check(t) ? this : null;
        }
        onDestroy() {}
        check(t) {
          this._reset();
          let e,
            n,
            s,
            i = this._itHead,
            r = !1;
          if (Array.isArray(t)) {
            this.length = t.length;
            for (let e = 0; e < this.length; e++)
              (s = this._trackByFn(e, (n = t[e]))),
                null !== i && An(i.trackById, s)
                  ? (r && (i = this._verifyReinsertion(i, n, s, e)), An(i.item, n) || this._addIdentityChange(i, n))
                  : ((i = this._mismatch(i, n, s, e)), (r = !0)),
                (i = i._next);
          } else
            (e = 0),
              (function(t, e) {
                if (Array.isArray(t)) for (let n = 0; n < t.length; n++) e(t[n]);
                else {
                  const n = t[Dn()]();
                  let s;
                  for (; !(s = n.next()).done; ) e(s.value);
                }
              })(t, t => {
                (s = this._trackByFn(e, t)),
                  null !== i && An(i.trackById, s)
                    ? (r && (i = this._verifyReinsertion(i, t, s, e)), An(i.item, t) || this._addIdentityChange(i, t))
                    : ((i = this._mismatch(i, t, s, e)), (r = !0)),
                  (i = i._next),
                  e++;
              }),
              (this.length = e);
          return this._truncate(i), (this.collection = t), this.isDirty;
        }
        get isDirty() {
          return (
            null !== this._additionsHead ||
            null !== this._movesHead ||
            null !== this._removalsHead ||
            null !== this._identityChangesHead
          );
        }
        _reset() {
          if (this.isDirty) {
            let t, e;
            for (t = this._previousItHead = this._itHead; null !== t; t = t._next) t._nextPrevious = t._next;
            for (t = this._additionsHead; null !== t; t = t._nextAdded) t.previousIndex = t.currentIndex;
            for (this._additionsHead = this._additionsTail = null, t = this._movesHead; null !== t; t = e)
              (t.previousIndex = t.currentIndex), (e = t._nextMoved);
            (this._movesHead = this._movesTail = null),
              (this._removalsHead = this._removalsTail = null),
              (this._identityChangesHead = this._identityChangesTail = null);
          }
        }
        _mismatch(t, e, n, s) {
          let i;
          return (
            null === t ? (i = this._itTail) : ((i = t._prev), this._remove(t)),
            null !== (t = null === this._linkedRecords ? null : this._linkedRecords.get(n, s))
              ? (An(t.item, e) || this._addIdentityChange(t, e), this._moveAfter(t, i, s))
              : null !== (t = null === this._unlinkedRecords ? null : this._unlinkedRecords.get(n, null))
              ? (An(t.item, e) || this._addIdentityChange(t, e), this._reinsertAfter(t, i, s))
              : (t = this._addAfter(new ms(e, n), i, s)),
            t
          );
        }
        _verifyReinsertion(t, e, n, s) {
          let i = null === this._unlinkedRecords ? null : this._unlinkedRecords.get(n, null);
          return (
            null !== i
              ? (t = this._reinsertAfter(i, t._prev, s))
              : t.currentIndex != s && ((t.currentIndex = s), this._addToMoves(t, s)),
            t
          );
        }
        _truncate(t) {
          for (; null !== t; ) {
            const e = t._next;
            this._addToRemovals(this._unlink(t)), (t = e);
          }
          null !== this._unlinkedRecords && this._unlinkedRecords.clear(),
            null !== this._additionsTail && (this._additionsTail._nextAdded = null),
            null !== this._movesTail && (this._movesTail._nextMoved = null),
            null !== this._itTail && (this._itTail._next = null),
            null !== this._removalsTail && (this._removalsTail._nextRemoved = null),
            null !== this._identityChangesTail && (this._identityChangesTail._nextIdentityChange = null);
        }
        _reinsertAfter(t, e, n) {
          null !== this._unlinkedRecords && this._unlinkedRecords.remove(t);
          const s = t._prevRemoved,
            i = t._nextRemoved;
          return (
            null === s ? (this._removalsHead = i) : (s._nextRemoved = i),
            null === i ? (this._removalsTail = s) : (i._prevRemoved = s),
            this._insertAfter(t, e, n),
            this._addToMoves(t, n),
            t
          );
        }
        _moveAfter(t, e, n) {
          return this._unlink(t), this._insertAfter(t, e, n), this._addToMoves(t, n), t;
        }
        _addAfter(t, e, n) {
          return (
            this._insertAfter(t, e, n),
            (this._additionsTail =
              null === this._additionsTail ? (this._additionsHead = t) : (this._additionsTail._nextAdded = t)),
            t
          );
        }
        _insertAfter(t, e, n) {
          const s = null === e ? this._itHead : e._next;
          return (
            (t._next = s),
            (t._prev = e),
            null === s ? (this._itTail = t) : (s._prev = t),
            null === e ? (this._itHead = t) : (e._next = t),
            null === this._linkedRecords && (this._linkedRecords = new gs()),
            this._linkedRecords.put(t),
            (t.currentIndex = n),
            t
          );
        }
        _remove(t) {
          return this._addToRemovals(this._unlink(t));
        }
        _unlink(t) {
          null !== this._linkedRecords && this._linkedRecords.remove(t);
          const e = t._prev,
            n = t._next;
          return null === e ? (this._itHead = n) : (e._next = n), null === n ? (this._itTail = e) : (n._prev = e), t;
        }
        _addToMoves(t, e) {
          return t.previousIndex === e
            ? t
            : ((this._movesTail = null === this._movesTail ? (this._movesHead = t) : (this._movesTail._nextMoved = t)),
              t);
        }
        _addToRemovals(t) {
          return (
            null === this._unlinkedRecords && (this._unlinkedRecords = new gs()),
            this._unlinkedRecords.put(t),
            (t.currentIndex = null),
            (t._nextRemoved = null),
            null === this._removalsTail
              ? ((this._removalsTail = this._removalsHead = t), (t._prevRemoved = null))
              : ((t._prevRemoved = this._removalsTail), (this._removalsTail = this._removalsTail._nextRemoved = t)),
            t
          );
        }
        _addIdentityChange(t, e) {
          return (
            (t.item = e),
            (this._identityChangesTail =
              null === this._identityChangesTail
                ? (this._identityChangesHead = t)
                : (this._identityChangesTail._nextIdentityChange = t)),
            t
          );
        }
      }
      class ms {
        constructor(t, e) {
          (this.item = t),
            (this.trackById = e),
            (this.currentIndex = null),
            (this.previousIndex = null),
            (this._nextPrevious = null),
            (this._prev = null),
            (this._next = null),
            (this._prevDup = null),
            (this._nextDup = null),
            (this._prevRemoved = null),
            (this._nextRemoved = null),
            (this._nextAdded = null),
            (this._nextMoved = null),
            (this._nextIdentityChange = null);
        }
      }
      class fs {
        constructor() {
          (this._head = null), (this._tail = null);
        }
        add(t) {
          null === this._head
            ? ((this._head = this._tail = t), (t._nextDup = null), (t._prevDup = null))
            : ((this._tail._nextDup = t), (t._prevDup = this._tail), (t._nextDup = null), (this._tail = t));
        }
        get(t, e) {
          let n;
          for (n = this._head; null !== n; n = n._nextDup)
            if ((null === e || e <= n.currentIndex) && An(n.trackById, t)) return n;
          return null;
        }
        remove(t) {
          const e = t._prevDup,
            n = t._nextDup;
          return (
            null === e ? (this._head = n) : (e._nextDup = n),
            null === n ? (this._tail = e) : (n._prevDup = e),
            null === this._head
          );
        }
      }
      class gs {
        constructor() {
          this.map = new Map();
        }
        put(t) {
          const e = t.trackById;
          let n = this.map.get(e);
          n || ((n = new fs()), this.map.set(e, n)), n.add(t);
        }
        get(t, e) {
          const n = this.map.get(t);
          return n ? n.get(t, e) : null;
        }
        remove(t) {
          const e = t.trackById;
          return this.map.get(e).remove(t) && this.map.delete(e), t;
        }
        get isEmpty() {
          return 0 === this.map.size;
        }
        clear() {
          this.map.clear();
        }
      }
      function bs(t, e, n) {
        const s = t.previousIndex;
        if (null === s) return s;
        let i = 0;
        return n && s < n.length && (i = n[s]), s + e + i;
      }
      class _s {
        constructor() {}
        supports(t) {
          return t instanceof Map || Rn(t);
        }
        create() {
          return new ys();
        }
      }
      class ys {
        constructor() {
          (this._records = new Map()),
            (this._mapHead = null),
            (this._appendAfter = null),
            (this._previousMapHead = null),
            (this._changesHead = null),
            (this._changesTail = null),
            (this._additionsHead = null),
            (this._additionsTail = null),
            (this._removalsHead = null),
            (this._removalsTail = null);
        }
        get isDirty() {
          return null !== this._additionsHead || null !== this._changesHead || null !== this._removalsHead;
        }
        forEachItem(t) {
          let e;
          for (e = this._mapHead; null !== e; e = e._next) t(e);
        }
        forEachPreviousItem(t) {
          let e;
          for (e = this._previousMapHead; null !== e; e = e._nextPrevious) t(e);
        }
        forEachChangedItem(t) {
          let e;
          for (e = this._changesHead; null !== e; e = e._nextChanged) t(e);
        }
        forEachAddedItem(t) {
          let e;
          for (e = this._additionsHead; null !== e; e = e._nextAdded) t(e);
        }
        forEachRemovedItem(t) {
          let e;
          for (e = this._removalsHead; null !== e; e = e._nextRemoved) t(e);
        }
        diff(t) {
          if (t) {
            if (!(t instanceof Map || Rn(t)))
              throw new Error(`Error trying to diff '${y(t)}'. Only maps and objects are allowed`);
          } else t = new Map();
          return this.check(t) ? this : null;
        }
        onDestroy() {}
        check(t) {
          this._reset();
          let e = this._mapHead;
          if (
            ((this._appendAfter = null),
            this._forEach(t, (t, n) => {
              if (e && e.key === n) this._maybeAddToChanges(e, t), (this._appendAfter = e), (e = e._next);
              else {
                const s = this._getOrCreateRecordForKey(n, t);
                e = this._insertBeforeOrAppend(e, s);
              }
            }),
            e)
          ) {
            e._prev && (e._prev._next = null), (this._removalsHead = e);
            for (let t = e; null !== t; t = t._nextRemoved)
              t === this._mapHead && (this._mapHead = null),
                this._records.delete(t.key),
                (t._nextRemoved = t._next),
                (t.previousValue = t.currentValue),
                (t.currentValue = null),
                (t._prev = null),
                (t._next = null);
          }
          return (
            this._changesTail && (this._changesTail._nextChanged = null),
            this._additionsTail && (this._additionsTail._nextAdded = null),
            this.isDirty
          );
        }
        _insertBeforeOrAppend(t, e) {
          if (t) {
            const n = t._prev;
            return (
              (e._next = t),
              (e._prev = n),
              (t._prev = e),
              n && (n._next = e),
              t === this._mapHead && (this._mapHead = e),
              (this._appendAfter = t),
              t
            );
          }
          return (
            this._appendAfter ? ((this._appendAfter._next = e), (e._prev = this._appendAfter)) : (this._mapHead = e),
            (this._appendAfter = e),
            null
          );
        }
        _getOrCreateRecordForKey(t, e) {
          if (this._records.has(t)) {
            const n = this._records.get(t);
            this._maybeAddToChanges(n, e);
            const s = n._prev,
              i = n._next;
            return s && (s._next = i), i && (i._prev = s), (n._next = null), (n._prev = null), n;
          }
          const n = new vs(t);
          return this._records.set(t, n), (n.currentValue = e), this._addToAdditions(n), n;
        }
        _reset() {
          if (this.isDirty) {
            let t;
            for (this._previousMapHead = this._mapHead, t = this._previousMapHead; null !== t; t = t._next)
              t._nextPrevious = t._next;
            for (t = this._changesHead; null !== t; t = t._nextChanged) t.previousValue = t.currentValue;
            for (t = this._additionsHead; null != t; t = t._nextAdded) t.previousValue = t.currentValue;
            (this._changesHead = this._changesTail = null),
              (this._additionsHead = this._additionsTail = null),
              (this._removalsHead = null);
          }
        }
        _maybeAddToChanges(t, e) {
          An(e, t.currentValue) || ((t.previousValue = t.currentValue), (t.currentValue = e), this._addToChanges(t));
        }
        _addToAdditions(t) {
          null === this._additionsHead
            ? (this._additionsHead = this._additionsTail = t)
            : ((this._additionsTail._nextAdded = t), (this._additionsTail = t));
        }
        _addToChanges(t) {
          null === this._changesHead
            ? (this._changesHead = this._changesTail = t)
            : ((this._changesTail._nextChanged = t), (this._changesTail = t));
        }
        _forEach(t, e) {
          t instanceof Map ? t.forEach(e) : Object.keys(t).forEach(n => e(t[n], n));
        }
      }
      class vs {
        constructor(t) {
          (this.key = t),
            (this.previousValue = null),
            (this.currentValue = null),
            (this._nextPrevious = null),
            (this._next = null),
            (this._prev = null),
            (this._nextAdded = null),
            (this._nextRemoved = null),
            (this._nextChanged = null);
        }
      }
      let ws = (() => {
          class t {
            constructor(t) {
              this.factories = t;
            }
            static create(e, n) {
              if (null != n) {
                const t = n.factories.slice();
                e = e.concat(t);
              }
              return new t(e);
            }
            static extend(e) {
              return {
                provide: t,
                useFactory: n => {
                  if (!n) throw new Error('Cannot extend IterableDiffers without a parent injector');
                  return t.create(e, n);
                },
                deps: [[t, new p(), new u()]]
              };
            }
            find(t) {
              const e = this.factories.find(e => e.supports(t));
              if (null != e) return e;
              throw new Error(
                `Cannot find a differ supporting object '${t}' of type '${((n = t), n.name || typeof n)}'`
              );
              var n;
            }
          }
          return (t.ngInjectableDef = g({ token: t, providedIn: 'root', factory: () => new t([new us()]) })), t;
        })(),
        Cs = (() => {
          class t {
            constructor(t) {
              this.factories = t;
            }
            static create(e, n) {
              if (n) {
                const t = n.factories.slice();
                e = e.concat(t);
              }
              return new t(e);
            }
            static extend(e) {
              return {
                provide: t,
                useFactory: n => {
                  if (!n) throw new Error('Cannot extend KeyValueDiffers without a parent injector');
                  return t.create(e, n);
                },
                deps: [[t, new p(), new u()]]
              };
            }
            find(t) {
              const e = this.factories.find(e => e.supports(t));
              if (e) return e;
              throw new Error(`Cannot find a differ supporting object '${t}'`);
            }
          }
          return (t.ngInjectableDef = g({ token: t, providedIn: 'root', factory: () => new t([new _s()]) })), t;
        })();
      const xs = [new _s()],
        Es = new ws([new us()]),
        Ss = new Cs(xs);
      let ks = (() => {
        class t {}
        return (t.__NG_ELEMENT_ID__ = () => Ds(t, ns)), t;
      })();
      const Ds = es;
      let As = (() => {
        class t {}
        return (t.__NG_ELEMENT_ID__ = () => Ts(t, ns)), t;
      })();
      const Ts = es;
      function Os(t, e, n, s) {
        let i = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${e}'. Current value: '${n}'.`;
        return (
          s &&
            (i +=
              ' It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook ?'),
          (function(t, e) {
            const n = new Error(t);
            return Is(n, e), n;
          })(i, t)
        );
      }
      function Is(t, e) {
        (t[ie] = e), (t[oe] = e.logError.bind(e));
      }
      function Rs(t) {
        return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${t}`);
      }
      function Ps(t, e, n) {
        const s = t.state,
          i = 1792 & s;
        return i === e ? ((t.state = (-1793 & s) | n), (t.initIndex = -1), !0) : i === n;
      }
      function Ns(t, e, n) {
        return (1792 & t.state) === e && t.initIndex <= n && ((t.initIndex = n + 1), !0);
      }
      function Ms(t, e) {
        return t.nodes[e];
      }
      function Ls(t, e) {
        return t.nodes[e];
      }
      function js(t, e) {
        return t.nodes[e];
      }
      function Fs(t, e) {
        return t.nodes[e];
      }
      function Bs(t, e) {
        return t.nodes[e];
      }
      const Vs = {
          setCurrentNode: void 0,
          createRootView: void 0,
          createEmbeddedView: void 0,
          createComponentView: void 0,
          createNgModuleRef: void 0,
          overrideProvider: void 0,
          overrideComponentView: void 0,
          clearOverrides: void 0,
          checkAndUpdateView: void 0,
          checkNoChangesView: void 0,
          destroyView: void 0,
          resolveDep: void 0,
          createDebugContext: void 0,
          handleEvent: void 0,
          updateDirectives: void 0,
          updateRenderer: void 0,
          dirtyParentQueries: void 0
        },
        Us = () => {},
        Hs = new Map();
      function zs(t) {
        let e = Hs.get(t);
        return e || ((e = y(t) + '_' + Hs.size), Hs.set(t, e)), e;
      }
      function $s(t, e, n, s) {
        if (On.isWrapped(s)) {
          s = On.unwrap(s);
          const i = t.def.nodes[e].bindingIndex + n,
            r = On.unwrap(t.oldValues[i]);
          t.oldValues[i] = new On(r);
        }
        return s;
      }
      const qs = '$$undefined',
        Ws = '$$empty';
      function Ks(t) {
        return { id: qs, styles: t.styles, encapsulation: t.encapsulation, data: t.data };
      }
      let Ys = 0;
      function Qs(t, e, n, s) {
        return !(!(2 & t.state) && An(t.oldValues[e.bindingIndex + n], s));
      }
      function Gs(t, e, n, s) {
        return !!Qs(t, e, n, s) && ((t.oldValues[e.bindingIndex + n] = s), !0);
      }
      function Zs(t, e, n, s) {
        const i = t.oldValues[e.bindingIndex + n];
        if (1 & t.state || !Tn(i, s)) {
          const r = e.bindings[n].name;
          throw Os(Vs.createDebugContext(t, e.nodeIndex), `${r}: ${i}`, `${r}: ${s}`, 0 != (1 & t.state));
        }
      }
      function Xs(t) {
        let e = t;
        for (; e; ) 2 & e.def.flags && (e.state |= 8), (e = e.viewContainerParent || e.parent);
      }
      function Js(t, e) {
        let n = t;
        for (; n && n !== e; ) (n.state |= 64), (n = n.viewContainerParent || n.parent);
      }
      function ti(t, e, n, s) {
        try {
          return Xs(33554432 & t.def.nodes[e].flags ? Ls(t, e).componentView : t), Vs.handleEvent(t, e, n, s);
        } catch (i) {
          t.root.errorHandler.handleError(i);
        }
      }
      function ei(t) {
        return t.parent ? Ls(t.parent, t.parentNodeDef.nodeIndex) : null;
      }
      function ni(t) {
        return t.parent ? t.parentNodeDef.parent : null;
      }
      function si(t, e) {
        switch (201347067 & e.flags) {
          case 1:
            return Ls(t, e.nodeIndex).renderElement;
          case 2:
            return Ms(t, e.nodeIndex).renderText;
        }
      }
      function ii(t) {
        return !!t.parent && !!(32768 & t.parentNodeDef.flags);
      }
      function ri(t) {
        return !(!t.parent || 32768 & t.parentNodeDef.flags);
      }
      function oi(t) {
        return 1 << t % 32;
      }
      function ai(t) {
        const e = {};
        let n = 0;
        const s = {};
        return (
          t &&
            t.forEach(([t, i]) => {
              'number' == typeof t ? ((e[t] = i), (n |= oi(t))) : (s[t] = i);
            }),
          { matchedQueries: e, references: s, matchedQueryIds: n }
        );
      }
      function li(t, e) {
        return t.map(t => {
          let n, s;
          return (
            Array.isArray(t) ? ([s, n] = t) : ((s = 0), (n = t)),
            n &&
              ('function' == typeof n || 'object' == typeof n) &&
              e &&
              Object.defineProperty(n, M, { value: e, configurable: !0 }),
            { flags: s, token: n, tokenKey: zs(n) }
          );
        });
      }
      function ci(t, e, n) {
        let s = n.renderParent;
        return s
          ? 0 == (1 & s.flags) ||
            0 == (33554432 & s.flags) ||
            (s.element.componentRendererType && s.element.componentRendererType.encapsulation === Q.Native)
            ? Ls(t, n.renderParent.nodeIndex).renderElement
            : void 0
          : e;
      }
      const hi = new WeakMap();
      function ui(t) {
        let e = hi.get(t);
        return e || (((e = t(() => Us)).factory = t), hi.set(t, e)), e;
      }
      function di(t, e, n, s, i) {
        3 === e && (n = t.renderer.parentNode(si(t, t.def.lastRenderRootNode))),
          pi(t, e, 0, t.def.nodes.length - 1, n, s, i);
      }
      function pi(t, e, n, s, i, r, o) {
        for (let a = n; a <= s; a++) {
          const n = t.def.nodes[a];
          11 & n.flags && fi(t, n, e, i, r, o), (a += n.childCount);
        }
      }
      function mi(t, e, n, s, i, r) {
        let o = t;
        for (; o && !ii(o); ) o = o.parent;
        const a = o.parent,
          l = ni(o),
          c = l.nodeIndex + l.childCount;
        for (let h = l.nodeIndex + 1; h <= c; h++) {
          const t = a.def.nodes[h];
          t.ngContentIndex === e && fi(a, t, n, s, i, r), (h += t.childCount);
        }
        if (!a.parent) {
          const o = t.root.projectableNodes[e];
          if (o) for (let e = 0; e < o.length; e++) gi(t, o[e], n, s, i, r);
        }
      }
      function fi(t, e, n, s, i, r) {
        if (8 & e.flags) mi(t, e.ngContent.index, n, s, i, r);
        else {
          const o = si(t, e);
          if (
            (3 === n && 33554432 & e.flags && 48 & e.bindingFlags
              ? (16 & e.bindingFlags && gi(t, o, n, s, i, r),
                32 & e.bindingFlags && gi(Ls(t, e.nodeIndex).componentView, o, n, s, i, r))
              : gi(t, o, n, s, i, r),
            16777216 & e.flags)
          ) {
            const o = Ls(t, e.nodeIndex).viewContainer._embeddedViews;
            for (let t = 0; t < o.length; t++) di(o[t], n, s, i, r);
          }
          1 & e.flags && !e.element.name && pi(t, n, e.nodeIndex + 1, e.nodeIndex + e.childCount, s, i, r);
        }
      }
      function gi(t, e, n, s, i, r) {
        const o = t.renderer;
        switch (n) {
          case 1:
            o.appendChild(s, e);
            break;
          case 2:
            o.insertBefore(s, e, i);
            break;
          case 3:
            o.removeChild(s, e);
            break;
          case 0:
            r.push(e);
        }
      }
      const bi = /^:([^:]+):(.+)$/;
      function _i(t) {
        if (':' === t[0]) {
          const e = t.match(bi);
          return [e[1], e[2]];
        }
        return ['', t];
      }
      function yi(t) {
        let e = 0;
        for (let n = 0; n < t.length; n++) e |= t[n].flags;
        return e;
      }
      const vi = new Object(),
        wi = zs(fn),
        Ci = zs(T),
        xi = zs($);
      function Ei(t, e, n, s) {
        return (n = C(n)), { index: -1, deps: li(s, y(e)), flags: t, token: e, value: n };
      }
      function Si(t) {
        const e = {},
          n = [];
        let s = !1;
        for (let i = 0; i < t.length; i++) {
          const r = t[i];
          r.token === pn && !0 === r.value && (s = !0),
            1073741824 & r.flags && n.push(r.token),
            (r.index = i),
            (e[zs(r.token)] = r);
        }
        return { factory: null, providersByKey: e, providers: t, modules: n, isRoot: s };
      }
      function ki(t, e, n = fn.THROW_IF_NOT_FOUND) {
        const s = B(t);
        try {
          if (8 & e.flags) return e.token;
          if ((2 & e.flags && (n = null), 1 & e.flags)) return t._parent.get(e.token, n);
          const o = e.tokenKey;
          switch (o) {
            case wi:
            case Ci:
            case xi:
              return t;
          }
          const a = t._def.providersByKey[o];
          let l;
          if (a) {
            let e = t._providers[a.index];
            return void 0 === e && (e = t._providers[a.index] = Di(t, a)), e === vi ? void 0 : e;
          }
          if (
            (l = b(e.token)) &&
            ((i = t),
            null != (r = l).providedIn &&
              ((function(t, e) {
                return t._def.modules.indexOf(r.providedIn) > -1;
              })(i) ||
                ('root' === r.providedIn && i._def.isRoot)))
          ) {
            const n = t._providers.length;
            return (
              (t._def.providers[n] = t._def.providersByKey[e.tokenKey] = {
                flags: 5120,
                value: l.factory,
                deps: [],
                index: n,
                token: e.token
              }),
              (t._providers[n] = vi),
              (t._providers[n] = Di(t, t._def.providersByKey[e.tokenKey]))
            );
          }
          return 4 & e.flags ? n : t._parent.get(e.token, n);
        } finally {
          B(s);
        }
        var i, r;
      }
      function Di(t, e) {
        let n;
        switch (201347067 & e.flags) {
          case 512:
            n = (function(t, e, n) {
              const s = n.length;
              switch (s) {
                case 0:
                  return new e();
                case 1:
                  return new e(ki(t, n[0]));
                case 2:
                  return new e(ki(t, n[0]), ki(t, n[1]));
                case 3:
                  return new e(ki(t, n[0]), ki(t, n[1]), ki(t, n[2]));
                default:
                  const i = new Array(s);
                  for (let e = 0; e < s; e++) i[e] = ki(t, n[e]);
                  return new e(...i);
              }
            })(t, e.value, e.deps);
            break;
          case 1024:
            n = (function(t, e, n) {
              const s = n.length;
              switch (s) {
                case 0:
                  return e();
                case 1:
                  return e(ki(t, n[0]));
                case 2:
                  return e(ki(t, n[0]), ki(t, n[1]));
                case 3:
                  return e(ki(t, n[0]), ki(t, n[1]), ki(t, n[2]));
                default:
                  const i = Array(s);
                  for (let e = 0; e < s; e++) i[e] = ki(t, n[e]);
                  return e(...i);
              }
            })(t, e.value, e.deps);
            break;
          case 2048:
            n = ki(t, e.deps[0]);
            break;
          case 256:
            n = e.value;
        }
        return (
          n === vi ||
            null === n ||
            'object' != typeof n ||
            131072 & e.flags ||
            'function' != typeof n.ngOnDestroy ||
            (e.flags |= 131072),
          void 0 === n ? vi : n
        );
      }
      function Ai(t, e) {
        const n = t.viewContainer._embeddedViews;
        if (((null == e || e >= n.length) && (e = n.length - 1), e < 0)) return null;
        const s = n[e];
        return (s.viewContainerParent = null), K(n, e), Vs.dirtyParentQueries(s), Oi(s), s;
      }
      function Ti(t, e, n) {
        const s = e ? si(e, e.def.lastRenderRootNode) : t.renderElement,
          i = n.renderer.parentNode(s),
          r = n.renderer.nextSibling(s);
        di(n, 2, i, r, void 0);
      }
      function Oi(t) {
        di(t, 3, null, null, void 0);
      }
      const Ii = new Object();
      function Ri(t, e, n, s, i, r) {
        return new Pi(t, e, n, s, i, r);
      }
      class Pi extends Yn {
        constructor(t, e, n, s, i, r) {
          super(),
            (this.selector = t),
            (this.componentType = e),
            (this._inputs = s),
            (this._outputs = i),
            (this.ngContentSelectors = r),
            (this.viewDefFactory = n);
        }
        get inputs() {
          const t = [],
            e = this._inputs;
          for (let n in e) t.push({ propName: n, templateName: e[n] });
          return t;
        }
        get outputs() {
          const t = [];
          for (let e in this._outputs) t.push({ propName: e, templateName: this._outputs[e] });
          return t;
        }
        create(t, e, n, s) {
          if (!s) throw new Error('ngModule should be provided');
          const i = ui(this.viewDefFactory),
            r = i.nodes[0].element.componentProvider.nodeIndex,
            o = Vs.createRootView(t, e || [], n, i, s, Ii),
            a = js(o, r).instance;
          return n && o.renderer.setAttribute(Ls(o, 0).renderElement, 'ng-version', hs.full), new Ni(o, new Fi(o), a);
        }
      }
      class Ni extends Kn {
        constructor(t, e, n) {
          super(),
            (this._view = t),
            (this._viewRef = e),
            (this._component = n),
            (this._elDef = this._view.def.nodes[0]),
            (this.hostView = e),
            (this.changeDetectorRef = e),
            (this.instance = n);
        }
        get location() {
          return new ns(Ls(this._view, this._elDef.nodeIndex).renderElement);
        }
        get injector() {
          return new Hi(this._view, this._elDef);
        }
        get componentType() {
          return this._component.constructor;
        }
        destroy() {
          this._viewRef.destroy();
        }
        onDestroy(t) {
          this._viewRef.onDestroy(t);
        }
      }
      function Mi(t, e, n) {
        return new Li(t, e, n);
      }
      class Li {
        constructor(t, e, n) {
          (this._view = t), (this._elDef = e), (this._data = n), (this._embeddedViews = []);
        }
        get element() {
          return new ns(this._data.renderElement);
        }
        get injector() {
          return new Hi(this._view, this._elDef);
        }
        get parentInjector() {
          let t = this._view,
            e = this._elDef.parent;
          for (; !e && t; ) (e = ni(t)), (t = t.parent);
          return t ? new Hi(t, e) : new Hi(this._view, null);
        }
        clear() {
          for (let t = this._embeddedViews.length - 1; t >= 0; t--) {
            const e = Ai(this._data, t);
            Vs.destroyView(e);
          }
        }
        get(t) {
          const e = this._embeddedViews[t];
          if (e) {
            const t = new Fi(e);
            return t.attachToViewContainerRef(this), t;
          }
          return null;
        }
        get length() {
          return this._embeddedViews.length;
        }
        createEmbeddedView(t, e, n) {
          const s = t.createEmbeddedView(e || {});
          return this.insert(s, n), s;
        }
        createComponent(t, e, n, s, i) {
          const r = n || this.parentInjector;
          i || t instanceof ts || (i = r.get($));
          const o = t.create(r, s, void 0, i);
          return this.insert(o.hostView, e), o;
        }
        insert(t, e) {
          if (t.destroyed) throw new Error('Cannot insert a destroyed View in a ViewContainer!');
          const n = t;
          return (
            (function(t, e, n, s) {
              let i = e.viewContainer._embeddedViews;
              null == n && (n = i.length),
                (s.viewContainerParent = t),
                W(i, n, s),
                (function(t, e) {
                  const n = ei(e);
                  if (!n || n === t || 16 & e.state) return;
                  e.state |= 16;
                  let s = n.template._projectedViews;
                  s || (s = n.template._projectedViews = []),
                    s.push(e),
                    (function(t, n) {
                      if (4 & n.flags) return;
                      (e.parent.def.nodeFlags |= 4), (n.flags |= 4);
                      let s = n.parent;
                      for (; s; ) (s.childFlags |= 4), (s = s.parent);
                    })(0, e.parentNodeDef);
                })(e, s),
                Vs.dirtyParentQueries(s),
                Ti(e, n > 0 ? i[n - 1] : null, s);
            })(this._view, this._data, e, n._view),
            n.attachToViewContainerRef(this),
            t
          );
        }
        move(t, e) {
          if (t.destroyed) throw new Error('Cannot move a destroyed View in a ViewContainer!');
          const n = this._embeddedViews.indexOf(t._view);
          return (
            (function(t, e, s) {
              const i = t.viewContainer._embeddedViews,
                r = i[n];
              K(i, n),
                null == s && (s = i.length),
                W(i, s, r),
                Vs.dirtyParentQueries(r),
                Oi(r),
                Ti(t, s > 0 ? i[s - 1] : null, r);
            })(this._data, 0, e),
            t
          );
        }
        indexOf(t) {
          return this._embeddedViews.indexOf(t._view);
        }
        remove(t) {
          const e = Ai(this._data, t);
          e && Vs.destroyView(e);
        }
        detach(t) {
          const e = Ai(this._data, t);
          return e ? new Fi(e) : null;
        }
      }
      function ji(t) {
        return new Fi(t);
      }
      class Fi {
        constructor(t) {
          (this._view = t), (this._viewContainerRef = null), (this._appRef = null);
        }
        get rootNodes() {
          return (function(t) {
            const e = [];
            return di(t, 0, void 0, void 0, e), e;
          })(this._view);
        }
        get context() {
          return this._view.context;
        }
        get destroyed() {
          return 0 != (128 & this._view.state);
        }
        markForCheck() {
          Xs(this._view);
        }
        detach() {
          this._view.state &= -5;
        }
        detectChanges() {
          const t = this._view.root.rendererFactory;
          t.begin && t.begin();
          try {
            Vs.checkAndUpdateView(this._view);
          } finally {
            t.end && t.end();
          }
        }
        checkNoChanges() {
          Vs.checkNoChangesView(this._view);
        }
        reattach() {
          this._view.state |= 4;
        }
        onDestroy(t) {
          this._view.disposables || (this._view.disposables = []), this._view.disposables.push(t);
        }
        destroy() {
          this._appRef
            ? this._appRef.detachView(this)
            : this._viewContainerRef && this._viewContainerRef.detach(this._viewContainerRef.indexOf(this)),
            Vs.destroyView(this._view);
        }
        detachFromAppRef() {
          (this._appRef = null), Oi(this._view), Vs.dirtyParentQueries(this._view);
        }
        attachToAppRef(t) {
          if (this._viewContainerRef) throw new Error('This view is already attached to a ViewContainer!');
          this._appRef = t;
        }
        attachToViewContainerRef(t) {
          if (this._appRef) throw new Error('This view is already attached directly to the ApplicationRef!');
          this._viewContainerRef = t;
        }
      }
      function Bi(t, e) {
        return new Vi(t, e);
      }
      class Vi extends ks {
        constructor(t, e) {
          super(), (this._parentView = t), (this._def = e);
        }
        createEmbeddedView(t) {
          return new Fi(Vs.createEmbeddedView(this._parentView, this._def, this._def.element.template, t));
        }
        get elementRef() {
          return new ns(Ls(this._parentView, this._def.nodeIndex).renderElement);
        }
      }
      function Ui(t, e) {
        return new Hi(t, e);
      }
      class Hi {
        constructor(t, e) {
          (this.view = t), (this.elDef = e);
        }
        get(t, e = fn.THROW_IF_NOT_FOUND) {
          return Vs.resolveDep(
            this.view,
            this.elDef,
            !!this.elDef && 0 != (33554432 & this.elDef.flags),
            { flags: 0, token: t, tokenKey: zs(t) },
            e
          );
        }
      }
      function zi(t, e) {
        const n = t.def.nodes[e];
        if (1 & n.flags) {
          const e = Ls(t, n.nodeIndex);
          return n.element.template ? e.template : e.renderElement;
        }
        if (2 & n.flags) return Ms(t, n.nodeIndex).renderText;
        if (20240 & n.flags) return js(t, n.nodeIndex).instance;
        throw new Error(`Illegal state: read nodeValue for node index ${e}`);
      }
      function $i(t) {
        return new qi(t.renderer);
      }
      class qi {
        constructor(t) {
          this.delegate = t;
        }
        selectRootElement(t) {
          return this.delegate.selectRootElement(t);
        }
        createElement(t, e) {
          const [n, s] = _i(e),
            i = this.delegate.createElement(s, n);
          return t && this.delegate.appendChild(t, i), i;
        }
        createViewRoot(t) {
          return t;
        }
        createTemplateAnchor(t) {
          const e = this.delegate.createComment('');
          return t && this.delegate.appendChild(t, e), e;
        }
        createText(t, e) {
          const n = this.delegate.createText(e);
          return t && this.delegate.appendChild(t, n), n;
        }
        projectNodes(t, e) {
          for (let n = 0; n < e.length; n++) this.delegate.appendChild(t, e[n]);
        }
        attachViewAfter(t, e) {
          const n = this.delegate.parentNode(t),
            s = this.delegate.nextSibling(t);
          for (let i = 0; i < e.length; i++) this.delegate.insertBefore(n, e[i], s);
        }
        detachView(t) {
          for (let e = 0; e < t.length; e++) {
            const n = t[e],
              s = this.delegate.parentNode(n);
            this.delegate.removeChild(s, n);
          }
        }
        destroyView(t, e) {
          for (let n = 0; n < e.length; n++) this.delegate.destroyNode(e[n]);
        }
        listen(t, e, n) {
          return this.delegate.listen(t, e, n);
        }
        listenGlobal(t, e, n) {
          return this.delegate.listen(t, e, n);
        }
        setElementProperty(t, e, n) {
          this.delegate.setProperty(t, e, n);
        }
        setElementAttribute(t, e, n) {
          const [s, i] = _i(e);
          null != n ? this.delegate.setAttribute(t, i, n, s) : this.delegate.removeAttribute(t, i, s);
        }
        setBindingDebugInfo(t, e, n) {}
        setElementClass(t, e, n) {
          n ? this.delegate.addClass(t, e) : this.delegate.removeClass(t, e);
        }
        setElementStyle(t, e, n) {
          null != n ? this.delegate.setStyle(t, e, n) : this.delegate.removeStyle(t, e);
        }
        invokeElementMethod(t, e, n) {
          t[e].apply(t, n);
        }
        setText(t, e) {
          this.delegate.setValue(t, e);
        }
        animate() {
          throw new Error('Renderer.animate is no longer supported!');
        }
      }
      function Wi(t, e, n, s) {
        return new Ki(t, e, n, s);
      }
      class Ki {
        constructor(t, e, n, s) {
          (this._moduleType = t),
            (this._parent = e),
            (this._bootstrapComponents = n),
            (this._def = s),
            (this._destroyListeners = []),
            (this._destroyed = !1),
            (this.injector = this),
            (function(t) {
              const e = t._def,
                n = (t._providers = new Array(e.providers.length));
              for (let s = 0; s < e.providers.length; s++) {
                const i = e.providers[s];
                4096 & i.flags || (void 0 === n[s] && (n[s] = Di(t, i)));
              }
            })(this);
        }
        get(t, e = fn.THROW_IF_NOT_FOUND, n = m.Default) {
          let s = 0;
          return (
            n & m.SkipSelf ? (s |= 1) : n & m.Self && (s |= 4), ki(this, { token: t, tokenKey: zs(t), flags: s }, e)
          );
        }
        get instance() {
          return this.get(this._moduleType);
        }
        get componentFactoryResolver() {
          return this.get(Xn);
        }
        destroy() {
          if (this._destroyed)
            throw new Error(`The ng module ${y(this.instance.constructor)} has already been destroyed.`);
          (this._destroyed = !0),
            (function(t, e) {
              const n = t._def,
                s = new Set();
              for (let i = 0; i < n.providers.length; i++)
                if (131072 & n.providers[i].flags) {
                  const e = t._providers[i];
                  if (e && e !== vi) {
                    const t = e.ngOnDestroy;
                    'function' != typeof t || s.has(e) || (t.apply(e), s.add(e));
                  }
                }
            })(this),
            this._destroyListeners.forEach(t => t());
        }
        onDestroy(t) {
          this._destroyListeners.push(t);
        }
      }
      const Yi = zs(is),
        Qi = zs(as),
        Gi = zs(ns),
        Zi = zs(As),
        Xi = zs(ks),
        Ji = zs(un),
        tr = zs(fn),
        er = zs(T);
      function nr(t, e, n, s, i, r, o, a) {
        const l = [];
        if (o)
          for (let h in o) {
            const [t, e] = o[h];
            l[t] = { flags: 8, name: h, nonMinifiedName: e, ns: null, securityContext: null, suffix: null };
          }
        const c = [];
        if (a) for (let h in a) c.push({ type: 1, propName: h, target: null, eventName: a[h] });
        return rr(t, (e |= 16384), n, s, i, i, r, l, c);
      }
      function sr(t, e, n) {
        return rr(-1, (t |= 16), null, 0, e, e, n);
      }
      function ir(t, e, n, s, i) {
        return rr(-1, t, e, 0, n, s, i);
      }
      function rr(t, e, n, s, i, r, o, a, l) {
        const { matchedQueries: c, references: h, matchedQueryIds: u } = ai(n);
        l || (l = []), a || (a = []), (r = C(r));
        const d = li(o, y(i));
        return {
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          checkIndex: t,
          flags: e,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: c,
          matchedQueryIds: u,
          references: h,
          ngContentIndex: -1,
          childCount: s,
          bindings: a,
          bindingFlags: yi(a),
          outputs: l,
          element: null,
          provider: { token: i, value: r, deps: d },
          text: null,
          query: null,
          ngContent: null
        };
      }
      function or(t, e) {
        return hr(t, e);
      }
      function ar(t, e) {
        let n = t;
        for (; n.parent && !ii(n); ) n = n.parent;
        return ur(n.parent, ni(n), !0, e.provider.value, e.provider.deps);
      }
      function lr(t, e) {
        const n = ur(t, e.parent, (32768 & e.flags) > 0, e.provider.value, e.provider.deps);
        if (e.outputs.length)
          for (let s = 0; s < e.outputs.length; s++) {
            const i = e.outputs[s],
              r = n[i.propName];
            if (!qn(r)) throw new Error(`@Output ${i.propName} not initialized in '${n.constructor.name}'.`);
            {
              const n = r.subscribe(cr(t, e.parent.nodeIndex, i.eventName));
              t.disposables[e.outputIndex + s] = n.unsubscribe.bind(n);
            }
          }
        return n;
      }
      function cr(t, e, n) {
        return s => ti(t, e, n, s);
      }
      function hr(t, e) {
        const n = (8192 & e.flags) > 0,
          s = e.provider;
        switch (201347067 & e.flags) {
          case 512:
            return ur(t, e.parent, n, s.value, s.deps);
          case 1024:
            return (function(t, e, n, s, i) {
              const r = i.length;
              switch (r) {
                case 0:
                  return s();
                case 1:
                  return s(pr(t, e, n, i[0]));
                case 2:
                  return s(pr(t, e, n, i[0]), pr(t, e, n, i[1]));
                case 3:
                  return s(pr(t, e, n, i[0]), pr(t, e, n, i[1]), pr(t, e, n, i[2]));
                default:
                  const o = Array(r);
                  for (let s = 0; s < r; s++) o[s] = pr(t, e, n, i[s]);
                  return s(...o);
              }
            })(t, e.parent, n, s.value, s.deps);
          case 2048:
            return pr(t, e.parent, n, s.deps[0]);
          case 256:
            return s.value;
        }
      }
      function ur(t, e, n, s, i) {
        const r = i.length;
        switch (r) {
          case 0:
            return new s();
          case 1:
            return new s(pr(t, e, n, i[0]));
          case 2:
            return new s(pr(t, e, n, i[0]), pr(t, e, n, i[1]));
          case 3:
            return new s(pr(t, e, n, i[0]), pr(t, e, n, i[1]), pr(t, e, n, i[2]));
          default:
            const o = new Array(r);
            for (let s = 0; s < r; s++) o[s] = pr(t, e, n, i[s]);
            return new s(...o);
        }
      }
      const dr = {};
      function pr(t, e, n, s, i = fn.THROW_IF_NOT_FOUND) {
        if (8 & s.flags) return s.token;
        const r = t;
        2 & s.flags && (i = null);
        const o = s.tokenKey;
        o === Ji && (n = !(!e || !e.element.componentView)), e && 1 & s.flags && ((n = !1), (e = e.parent));
        let a = t;
        for (; a; ) {
          if (e)
            switch (o) {
              case Yi:
                return $i(mr(a, e, n));
              case Qi:
                return mr(a, e, n).renderer;
              case Gi:
                return new ns(Ls(a, e.nodeIndex).renderElement);
              case Zi:
                return Ls(a, e.nodeIndex).viewContainer;
              case Xi:
                if (e.element.template) return Ls(a, e.nodeIndex).template;
                break;
              case Ji:
                return ji(mr(a, e, n));
              case tr:
              case er:
                return Ui(a, e);
              default:
                const t = (n ? e.element.allProviders : e.element.publicProviders)[o];
                if (t) {
                  let e = js(a, t.nodeIndex);
                  return e || ((e = { instance: hr(a, t) }), (a.nodes[t.nodeIndex] = e)), e.instance;
                }
            }
          (n = ii(a)), (e = ni(a)), (a = a.parent), 4 & s.flags && (a = null);
        }
        const l = r.root.injector.get(s.token, dr);
        return l !== dr || i === dr ? l : r.root.ngModule.injector.get(s.token, i);
      }
      function mr(t, e, n) {
        let s;
        if (n) s = Ls(t, e.nodeIndex).componentView;
        else for (s = t; s.parent && !ii(s); ) s = s.parent;
        return s;
      }
      function fr(t, e, n, s, i, r) {
        if (32768 & n.flags) {
          const e = Ls(t, n.parent.nodeIndex).componentView;
          2 & e.def.flags && (e.state |= 8);
        }
        if (((e.instance[n.bindings[s].name] = i), 524288 & n.flags)) {
          r = r || {};
          const e = On.unwrap(t.oldValues[n.bindingIndex + s]);
          r[n.bindings[s].nonMinifiedName] = new Wn(e, i, 0 != (2 & t.state));
        }
        return (t.oldValues[n.bindingIndex + s] = i), r;
      }
      function gr(t, e) {
        if (!(t.def.nodeFlags & e)) return;
        const n = t.def.nodes;
        let s = 0;
        for (let i = 0; i < n.length; i++) {
          const r = n[i];
          let o = r.parent;
          for (
            !o && r.flags & e && _r(t, i, r.flags & e, s++), 0 == (r.childFlags & e) && (i += r.childCount);
            o && 1 & o.flags && i === o.nodeIndex + o.childCount;

          )
            o.directChildFlags & e && (s = br(t, o, e, s)), (o = o.parent);
        }
      }
      function br(t, e, n, s) {
        for (let i = e.nodeIndex + 1; i <= e.nodeIndex + e.childCount; i++) {
          const e = t.def.nodes[i];
          e.flags & n && _r(t, i, e.flags & n, s++), (i += e.childCount);
        }
        return s;
      }
      function _r(t, e, n, s) {
        const i = js(t, e);
        if (!i) return;
        const r = i.instance;
        r &&
          (Vs.setCurrentNode(t, e),
          1048576 & n && Ns(t, 512, s) && r.ngAfterContentInit(),
          2097152 & n && r.ngAfterContentChecked(),
          4194304 & n && Ns(t, 768, s) && r.ngAfterViewInit(),
          8388608 & n && r.ngAfterViewChecked(),
          131072 & n && r.ngOnDestroy());
      }
      const yr = new A('SCHEDULER_TOKEN', { providedIn: 'root', factory: () => Ot }),
        vr = {},
        wr = (function() {
          var t = {
            LocaleId: 0,
            DayPeriodsFormat: 1,
            DayPeriodsStandalone: 2,
            DaysFormat: 3,
            DaysStandalone: 4,
            MonthsFormat: 5,
            MonthsStandalone: 6,
            Eras: 7,
            FirstDayOfWeek: 8,
            WeekendRange: 9,
            DateFormat: 10,
            TimeFormat: 11,
            DateTimeFormat: 12,
            NumberSymbols: 13,
            NumberFormats: 14,
            CurrencySymbol: 15,
            CurrencyName: 16,
            Currencies: 17,
            PluralCase: 18,
            ExtraData: 19
          };
          return (
            (t[t.LocaleId] = 'LocaleId'),
            (t[t.DayPeriodsFormat] = 'DayPeriodsFormat'),
            (t[t.DayPeriodsStandalone] = 'DayPeriodsStandalone'),
            (t[t.DaysFormat] = 'DaysFormat'),
            (t[t.DaysStandalone] = 'DaysStandalone'),
            (t[t.MonthsFormat] = 'MonthsFormat'),
            (t[t.MonthsStandalone] = 'MonthsStandalone'),
            (t[t.Eras] = 'Eras'),
            (t[t.FirstDayOfWeek] = 'FirstDayOfWeek'),
            (t[t.WeekendRange] = 'WeekendRange'),
            (t[t.DateFormat] = 'DateFormat'),
            (t[t.TimeFormat] = 'TimeFormat'),
            (t[t.DateTimeFormat] = 'DateTimeFormat'),
            (t[t.NumberSymbols] = 'NumberSymbols'),
            (t[t.NumberFormats] = 'NumberFormats'),
            (t[t.CurrencySymbol] = 'CurrencySymbol'),
            (t[t.CurrencyName] = 'CurrencyName'),
            (t[t.Currencies] = 'Currencies'),
            (t[t.PluralCase] = 'PluralCase'),
            (t[t.ExtraData] = 'ExtraData'),
            t
          );
        })(),
        Cr = void 0;
      var xr = [
        'en',
        [['a', 'p'], ['AM', 'PM'], Cr],
        [['AM', 'PM'], Cr, Cr],
        [
          ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
          ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
          ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
          ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
        ],
        Cr,
        [
          ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
          ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
          [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December'
          ]
        ],
        Cr,
        [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']],
        0,
        [6, 0],
        ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],
        ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'],
        ['{1}, {0}', Cr, "{1} 'at' {0}", Cr],
        ['.', ',', ';', '%', '+', '-', 'E', '\xd7', '\u2030', '\u221e', 'NaN', ':'],
        ['#,##0.###', '#,##0%', '\xa4#,##0.00', '#E0'],
        '$',
        'US Dollar',
        {},
        function(t) {
          let e = Math.floor(Math.abs(t)),
            n = t.toString().replace(/^[^.]*\.?/, '').length;
          return 1 === e && 0 === n ? 1 : 5;
        }
      ];
      function Er(t) {
        return Sr(t)[wr.PluralCase];
      }
      function Sr(t) {
        const e = t.toLowerCase().replace(/_/g, '-');
        let n = vr[e];
        if (n) return n;
        const s = e.split('-')[0];
        if ((n = vr[s])) return n;
        if ('en' === s) return xr;
        throw new Error(`Missing locale data for the locale "${t}".`);
      }
      const kr = 'en-US';
      let Dr = kr;
      function Ar(t) {
        var e;
        (e = 'Expected localeId to be defined'),
          null == t &&
            (function(t) {
              throw new Error(`ASSERTION ERROR: ${t}`);
            })(e),
          'string' == typeof t && (Dr = t.toLowerCase().replace(/_/g, '-'));
      }
      class Tr extends s.a {
        constructor(t = !1) {
          super(), (this.__isAsync = t);
        }
        emit(t) {
          super.next(t);
        }
        subscribe(t, e, n) {
          let s,
            r = t => null,
            o = () => null;
          t && 'object' == typeof t
            ? ((s = this.__isAsync
                ? e => {
                    setTimeout(() => t.next(e));
                  }
                : e => {
                    t.next(e);
                  }),
              t.error &&
                (r = this.__isAsync
                  ? e => {
                      setTimeout(() => t.error(e));
                    }
                  : e => {
                      t.error(e);
                    }),
              t.complete &&
                (o = this.__isAsync
                  ? () => {
                      setTimeout(() => t.complete());
                    }
                  : () => {
                      t.complete();
                    }))
            : ((s = this.__isAsync
                ? e => {
                    setTimeout(() => t(e));
                  }
                : e => {
                    t(e);
                  }),
              e &&
                (r = this.__isAsync
                  ? t => {
                      setTimeout(() => e(t));
                    }
                  : t => {
                      e(t);
                    }),
              n &&
                (o = this.__isAsync
                  ? () => {
                      setTimeout(() => n());
                    }
                  : () => {
                      n();
                    }));
          const a = super.subscribe(s, r, o);
          return t instanceof i.a && t.add(a), a;
        }
      }
      function Or() {
        return this._results[Dn()]();
      }
      class Ir {
        constructor() {
          (this.dirty = !0), (this._results = []), (this.changes = new Tr()), (this.length = 0);
          const t = Dn(),
            e = Ir.prototype;
          e[t] || (e[t] = Or);
        }
        map(t) {
          return this._results.map(t);
        }
        filter(t) {
          return this._results.filter(t);
        }
        find(t) {
          return this._results.find(t);
        }
        reduce(t, e) {
          return this._results.reduce(t, e);
        }
        forEach(t) {
          this._results.forEach(t);
        }
        some(t) {
          return this._results.some(t);
        }
        toArray() {
          return this._results.slice();
        }
        toString() {
          return this._results.toString();
        }
        reset(t) {
          (this._results = (function t(e, n) {
            void 0 === n && (n = e);
            for (let s = 0; s < e.length; s++) {
              let i = e[s];
              Array.isArray(i) ? (n === e && (n = e.slice(0, s)), t(i, n)) : n !== e && n.push(i);
            }
            return n;
          })(t)),
            (this.dirty = !1),
            (this.length = this._results.length),
            (this.last = this._results[this.length - 1]),
            (this.first = this._results[0]);
        }
        notifyOnChanges() {
          this.changes.emit(this);
        }
        setDirty() {
          this.dirty = !0;
        }
        destroy() {
          this.changes.complete(), this.changes.unsubscribe();
        }
      }
      const Rr = new A('Application Initializer');
      let Pr = (() =>
        class {
          constructor(t) {
            (this.appInits = t),
              (this.initialized = !1),
              (this.done = !1),
              (this.donePromise = new Promise((t, e) => {
                (this.resolve = t), (this.reject = e);
              }));
          }
          runInitializers() {
            if (this.initialized) return;
            const t = [],
              e = () => {
                (this.done = !0), this.resolve();
              };
            if (this.appInits)
              for (let n = 0; n < this.appInits.length; n++) {
                const e = this.appInits[n]();
                $n(e) && t.push(e);
              }
            Promise.all(t)
              .then(() => {
                e();
              })
              .catch(t => {
                this.reject(t);
              }),
              0 === t.length && e(),
              (this.initialized = !0);
          }
        })();
      const Nr = new A('AppId');
      function Mr() {
        return `${Lr()}${Lr()}${Lr()}`;
      }
      function Lr() {
        return String.fromCharCode(97 + Math.floor(25 * Math.random()));
      }
      const jr = new A('Platform Initializer'),
        Fr = new A('Platform ID'),
        Br = new A('appBootstrapListener');
      let Vr = (() =>
        class {
          log(t) {
            console.log(t);
          }
          warn(t) {
            console.warn(t);
          }
        })();
      const Ur = new A('LocaleId'),
        Hr = !1;
      function zr() {
        throw new Error('Runtime compiler is not loaded');
      }
      const $r = zr,
        qr = zr,
        Wr = zr,
        Kr = zr;
      let Yr,
        Qr,
        Gr = (() =>
          class {
            constructor() {
              (this.compileModuleSync = $r),
                (this.compileModuleAsync = qr),
                (this.compileModuleAndAllComponentsSync = Wr),
                (this.compileModuleAndAllComponentsAsync = Kr);
            }
            clearCache() {}
            clearCacheFor(t) {}
            getModuleId(t) {}
          })();
      class Zr {}
      function Xr() {
        const t = D.wtf;
        return !(!t || !(Yr = t.trace) || ((Qr = Yr.events), 0));
      }
      const Jr = Xr(),
        to = Jr
          ? function(t, e = null) {
              return Qr.createScope(t, e);
            }
          : (t, e) =>
              function(t, e) {
                return null;
              },
        eo = Jr
          ? function(t, e) {
              return Yr.leaveScope(t, e), e;
            }
          : (t, e) => e,
        no = (() => Promise.resolve(0))();
      function so(t) {
        'undefined' == typeof Zone
          ? no.then(() => {
              t && t.apply(null, null);
            })
          : Zone.current.scheduleMicroTask('scheduleMicrotask', t);
      }
      class io {
        constructor({ enableLongStackTrace: t = !1 }) {
          if (
            ((this.hasPendingMicrotasks = !1),
            (this.hasPendingMacrotasks = !1),
            (this.isStable = !0),
            (this.onUnstable = new Tr(!1)),
            (this.onMicrotaskEmpty = new Tr(!1)),
            (this.onStable = new Tr(!1)),
            (this.onError = new Tr(!1)),
            'undefined' == typeof Zone)
          )
            throw new Error('In this configuration Angular requires Zone.js');
          var e;
          Zone.assertZonePatched(),
            (this._nesting = 0),
            (this._outer = this._inner = Zone.current),
            Zone.wtfZoneSpec && (this._inner = this._inner.fork(Zone.wtfZoneSpec)),
            Zone.TaskTrackingZoneSpec && (this._inner = this._inner.fork(new Zone.TaskTrackingZoneSpec())),
            t && Zone.longStackTraceZoneSpec && (this._inner = this._inner.fork(Zone.longStackTraceZoneSpec)),
            ((e = this)._inner = e._inner.fork({
              name: 'angular',
              properties: { isAngularZone: !0 },
              onInvokeTask: (t, n, s, i, r, o) => {
                try {
                  return lo(e), t.invokeTask(s, i, r, o);
                } finally {
                  co(e);
                }
              },
              onInvoke: (t, n, s, i, r, o, a) => {
                try {
                  return lo(e), t.invoke(s, i, r, o, a);
                } finally {
                  co(e);
                }
              },
              onHasTask: (t, n, s, i) => {
                t.hasTask(s, i),
                  n === s &&
                    ('microTask' == i.change
                      ? ((e.hasPendingMicrotasks = i.microTask), ao(e))
                      : 'macroTask' == i.change && (e.hasPendingMacrotasks = i.macroTask));
              },
              onHandleError: (t, n, s, i) => (t.handleError(s, i), e.runOutsideAngular(() => e.onError.emit(i)), !1)
            }));
        }
        static isInAngularZone() {
          return !0 === Zone.current.get('isAngularZone');
        }
        static assertInAngularZone() {
          if (!io.isInAngularZone()) throw new Error('Expected to be in Angular Zone, but it is not!');
        }
        static assertNotInAngularZone() {
          if (io.isInAngularZone()) throw new Error('Expected to not be in Angular Zone, but it is!');
        }
        run(t, e, n) {
          return this._inner.run(t, e, n);
        }
        runTask(t, e, n, s) {
          const i = this._inner,
            r = i.scheduleEventTask('NgZoneEvent: ' + s, t, oo, ro, ro);
          try {
            return i.runTask(r, e, n);
          } finally {
            i.cancelTask(r);
          }
        }
        runGuarded(t, e, n) {
          return this._inner.runGuarded(t, e, n);
        }
        runOutsideAngular(t) {
          return this._outer.run(t);
        }
      }
      function ro() {}
      const oo = {};
      function ao(t) {
        if (0 == t._nesting && !t.hasPendingMicrotasks && !t.isStable)
          try {
            t._nesting++, t.onMicrotaskEmpty.emit(null);
          } finally {
            if ((t._nesting--, !t.hasPendingMicrotasks))
              try {
                t.runOutsideAngular(() => t.onStable.emit(null));
              } finally {
                t.isStable = !0;
              }
          }
      }
      function lo(t) {
        t._nesting++, t.isStable && ((t.isStable = !1), t.onUnstable.emit(null));
      }
      function co(t) {
        t._nesting--, ao(t);
      }
      class ho {
        constructor() {
          (this.hasPendingMicrotasks = !1),
            (this.hasPendingMacrotasks = !1),
            (this.isStable = !0),
            (this.onUnstable = new Tr()),
            (this.onMicrotaskEmpty = new Tr()),
            (this.onStable = new Tr()),
            (this.onError = new Tr());
        }
        run(t) {
          return t();
        }
        runGuarded(t) {
          return t();
        }
        runOutsideAngular(t) {
          return t();
        }
        runTask(t) {
          return t();
        }
      }
      let uo = (() =>
          class {
            constructor(t) {
              (this._ngZone = t),
                (this._pendingCount = 0),
                (this._isZoneStable = !0),
                (this._didWork = !1),
                (this._callbacks = []),
                (this.taskTrackingZone = null),
                this._watchAngularEvents(),
                t.run(() => {
                  this.taskTrackingZone = 'undefined' == typeof Zone ? null : Zone.current.get('TaskTrackingZone');
                });
            }
            _watchAngularEvents() {
              this._ngZone.onUnstable.subscribe({
                next: () => {
                  (this._didWork = !0), (this._isZoneStable = !1);
                }
              }),
                this._ngZone.runOutsideAngular(() => {
                  this._ngZone.onStable.subscribe({
                    next: () => {
                      io.assertNotInAngularZone(),
                        so(() => {
                          (this._isZoneStable = !0), this._runCallbacksIfReady();
                        });
                    }
                  });
                });
            }
            increasePendingRequestCount() {
              return (this._pendingCount += 1), (this._didWork = !0), this._pendingCount;
            }
            decreasePendingRequestCount() {
              if (((this._pendingCount -= 1), this._pendingCount < 0))
                throw new Error('pending async requests below zero');
              return this._runCallbacksIfReady(), this._pendingCount;
            }
            isStable() {
              return this._isZoneStable && 0 === this._pendingCount && !this._ngZone.hasPendingMacrotasks;
            }
            _runCallbacksIfReady() {
              if (this.isStable())
                so(() => {
                  for (; 0 !== this._callbacks.length; ) {
                    let t = this._callbacks.pop();
                    clearTimeout(t.timeoutId), t.doneCb(this._didWork);
                  }
                  this._didWork = !1;
                });
              else {
                let t = this.getPendingTasks();
                (this._callbacks = this._callbacks.filter(
                  e => !e.updateCb || !e.updateCb(t) || (clearTimeout(e.timeoutId), !1)
                )),
                  (this._didWork = !0);
              }
            }
            getPendingTasks() {
              return this.taskTrackingZone
                ? this.taskTrackingZone.macroTasks.map(t => ({
                    source: t.source,
                    creationLocation: t.creationLocation,
                    data: t.data
                  }))
                : [];
            }
            addCallback(t, e, n) {
              let s = -1;
              e &&
                e > 0 &&
                (s = setTimeout(() => {
                  (this._callbacks = this._callbacks.filter(t => t.timeoutId !== s)),
                    t(this._didWork, this.getPendingTasks());
                }, e)),
                this._callbacks.push({ doneCb: t, timeoutId: s, updateCb: n });
            }
            whenStable(t, e, n) {
              if (n && !this.taskTrackingZone)
                throw new Error(
                  'Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/dist/task-tracking.js" loaded?'
                );
              this.addCallback(t, e, n), this._runCallbacksIfReady();
            }
            getPendingRequestCount() {
              return this._pendingCount;
            }
            findProviders(t, e, n) {
              return [];
            }
          })(),
        po = (() => {
          class t {
            constructor() {
              (this._applications = new Map()), bo.addToWindow(this);
            }
            registerApplication(t, e) {
              this._applications.set(t, e);
            }
            unregisterApplication(t) {
              this._applications.delete(t);
            }
            unregisterAllApplications() {
              this._applications.clear();
            }
            getTestability(t) {
              return this._applications.get(t) || null;
            }
            getAllTestabilities() {
              return Array.from(this._applications.values());
            }
            getAllRootElements() {
              return Array.from(this._applications.keys());
            }
            findTestabilityInTree(t, e = !0) {
              return bo.findTestabilityInTree(this, t, e);
            }
          }
          return (t.ctorParameters = () => []), t;
        })();
      class mo {
        addToWindow(t) {}
        findTestabilityInTree(t, e, n) {
          return null;
        }
      }
      function fo(t) {
        bo = t;
      }
      let go,
        bo = new mo(),
        _o = function(t) {
          return t instanceof ts;
        };
      const yo = new A('AllowMultipleToken');
      class vo {
        constructor(t, e) {
          (this.name = t), (this.token = e);
        }
      }
      function wo(t, e, n = []) {
        const s = `Platform: ${e}`,
          i = new A(s);
        return (e = []) => {
          let r = Co();
          if (!r || r.injector.get(yo, !1))
            if (t) t(n.concat(e).concat({ provide: i, useValue: !0 }));
            else {
              const t = n.concat(e).concat({ provide: i, useValue: !0 });
              !(function(t) {
                if (go && !go.destroyed && !go.injector.get(yo, !1))
                  throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
                go = t.get(xo);
                const e = t.get(jr, null);
                e && e.forEach(t => t());
              })(fn.create({ providers: t, name: s }));
            }
          return (function(t) {
            const e = Co();
            if (!e) throw new Error('No platform exists!');
            if (!e.injector.get(t, null))
              throw new Error('A platform with a different configuration has been created. Please destroy it first.');
            return e;
          })(i);
        };
      }
      function Co() {
        return go && !go.destroyed ? go : null;
      }
      let xo = (() =>
        class {
          constructor(t) {
            (this._injector = t), (this._modules = []), (this._destroyListeners = []), (this._destroyed = !1);
          }
          bootstrapModuleFactory(t, e) {
            const n =
                'noop' === (i = e ? e.ngZone : void 0)
                  ? new ho()
                  : ('zone.js' === i ? void 0 : i) || new io({ enableLongStackTrace: pe() }),
              s = [{ provide: io, useValue: n }];
            var i;
            return n.run(() => {
              const e = fn.create({ providers: s, parent: this.injector, name: t.moduleType.name }),
                i = t.create(e),
                r = i.injector.get(he, null);
              if (!r) throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
              return (
                Hr && Ar(i.injector.get(Ur, kr) || kr),
                i.onDestroy(() => ko(this._modules, i)),
                n.runOutsideAngular(() =>
                  n.onError.subscribe({
                    next: t => {
                      r.handleError(t);
                    }
                  })
                ),
                (function(t, e, n) {
                  try {
                    const i = n();
                    return $n(i)
                      ? i.catch(n => {
                          throw (e.runOutsideAngular(() => t.handleError(n)), n);
                        })
                      : i;
                  } catch (s) {
                    throw (e.runOutsideAngular(() => t.handleError(s)), s);
                  }
                })(r, n, () => {
                  const t = i.injector.get(Pr);
                  return t.runInitializers(), t.donePromise.then(() => (this._moduleDoBootstrap(i), i));
                })
              );
            });
          }
          bootstrapModule(t, e = []) {
            const n = Eo({}, e);
            return (function(t, e, n) {
              return t
                .get(Zr)
                .createCompiler([e])
                .compileModuleAsync(n);
            })(this.injector, n, t).then(t => this.bootstrapModuleFactory(t, n));
          }
          _moduleDoBootstrap(t) {
            const e = t.injector.get(So);
            if (t._bootstrapComponents.length > 0) t._bootstrapComponents.forEach(t => e.bootstrap(t));
            else {
              if (!t.instance.ngDoBootstrap)
                throw new Error(
                  `The module ${y(
                    t.instance.constructor
                  )} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. ` +
                    'Please define one of these.'
                );
              t.instance.ngDoBootstrap(e);
            }
            this._modules.push(t);
          }
          onDestroy(t) {
            this._destroyListeners.push(t);
          }
          get injector() {
            return this._injector;
          }
          destroy() {
            if (this._destroyed) throw new Error('The platform has already been destroyed!');
            this._modules.slice().forEach(t => t.destroy()),
              this._destroyListeners.forEach(t => t()),
              (this._destroyed = !0);
          }
          get destroyed() {
            return this._destroyed;
          }
        })();
      function Eo(t, e) {
        return Array.isArray(e) ? e.reduce(Eo, t) : Object.assign({}, t, e);
      }
      let So = (() => {
        class t {
          constructor(t, e, n, s, i, l) {
            (this._zone = t),
              (this._console = e),
              (this._injector = n),
              (this._exceptionHandler = s),
              (this._componentFactoryResolver = i),
              (this._initStatus = l),
              (this._bootstrapListeners = []),
              (this._views = []),
              (this._runningTick = !1),
              (this._enforceNoNewChanges = !1),
              (this._stable = !0),
              (this.componentTypes = []),
              (this.components = []),
              (this._enforceNoNewChanges = pe()),
              this._zone.onMicrotaskEmpty.subscribe({
                next: () => {
                  this._zone.run(() => {
                    this.tick();
                  });
                }
              });
            const c = new r.a(t => {
                (this._stable =
                  this._zone.isStable && !this._zone.hasPendingMacrotasks && !this._zone.hasPendingMicrotasks),
                  this._zone.runOutsideAngular(() => {
                    t.next(this._stable), t.complete();
                  });
              }),
              h = new r.a(t => {
                let e;
                this._zone.runOutsideAngular(() => {
                  e = this._zone.onStable.subscribe(() => {
                    io.assertNotInAngularZone(),
                      so(() => {
                        this._stable ||
                          this._zone.hasPendingMacrotasks ||
                          this._zone.hasPendingMicrotasks ||
                          ((this._stable = !0), t.next(!0));
                      });
                  });
                });
                const n = this._zone.onUnstable.subscribe(() => {
                  io.assertInAngularZone(),
                    this._stable &&
                      ((this._stable = !1),
                      this._zone.runOutsideAngular(() => {
                        t.next(!1);
                      }));
                });
                return () => {
                  e.unsubscribe(), n.unsubscribe();
                };
              });
            this.isStable = Object(o.a)(c, h.pipe(Object(a.a)()));
          }
          bootstrap(t, e) {
            if (!this._initStatus.done)
              throw new Error(
                'Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.'
              );
            let n;
            (n = t instanceof Yn ? t : this._componentFactoryResolver.resolveComponentFactory(t)),
              this.componentTypes.push(n.componentType);
            const s = _o(n) ? null : this._injector.get($),
              i = n.create(fn.NULL, [], e || n.selector, s);
            i.onDestroy(() => {
              this._unloadComponent(i);
            });
            const r = i.injector.get(uo, null);
            return (
              r && i.injector.get(po).registerApplication(i.location.nativeElement, r),
              this._loadComponent(i),
              pe() &&
                this._console.log(
                  'Angular is running in the development mode. Call enableProdMode() to enable the production mode.'
                ),
              i
            );
          }
          tick() {
            if (this._runningTick) throw new Error('ApplicationRef.tick is called recursively');
            const e = t._tickScope();
            try {
              this._runningTick = !0;
              for (let t of this._views) t.detectChanges();
              if (this._enforceNoNewChanges) for (let t of this._views) t.checkNoChanges();
            } catch (n) {
              this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(n));
            } finally {
              (this._runningTick = !1), eo(e);
            }
          }
          attachView(t) {
            const e = t;
            this._views.push(e), e.attachToAppRef(this);
          }
          detachView(t) {
            const e = t;
            ko(this._views, e), e.detachFromAppRef();
          }
          _loadComponent(t) {
            this.attachView(t.hostView),
              this.tick(),
              this.components.push(t),
              this._injector
                .get(Br, [])
                .concat(this._bootstrapListeners)
                .forEach(e => e(t));
          }
          _unloadComponent(t) {
            this.detachView(t.hostView), ko(this.components, t);
          }
          ngOnDestroy() {
            this._views.slice().forEach(t => t.destroy());
          }
          get viewCount() {
            return this._views.length;
          }
        }
        return (t._tickScope = to('ApplicationRef#tick()')), t;
      })();
      function ko(t, e) {
        const n = t.indexOf(e);
        n > -1 && t.splice(n, 1);
      }
      class Do {}
      class Ao {}
      const To = { factoryPathPrefix: '', factoryPathSuffix: '.ngfactory' };
      let Oo = (() =>
        class {
          constructor(t, e) {
            (this._compiler = t), (this._config = e || To);
          }
          load(t) {
            return !Hr && this._compiler instanceof Gr ? this.loadFactory(t) : this.loadAndCompile(t);
          }
          loadAndCompile(t) {
            let [e, s] = t.split('#');
            return (
              void 0 === s && (s = 'default'),
              n('zn8P')(e)
                .then(t => t[s])
                .then(t => Io(t, e, s))
                .then(t => this._compiler.compileModuleAsync(t))
            );
          }
          loadFactory(t) {
            let [e, s] = t.split('#'),
              i = 'NgFactory';
            return (
              void 0 === s && ((s = 'default'), (i = '')),
              n('zn8P')(this._config.factoryPathPrefix + e + this._config.factoryPathSuffix)
                .then(t => t[s + i])
                .then(t => Io(t, e, s))
            );
          }
        })();
      function Io(t, e, n) {
        if (!t) throw new Error(`Cannot find '${n}' in '${e}'`);
        return t;
      }
      class Ro {
        constructor(t, e) {
          (this.name = t), (this.callback = e);
        }
      }
      class Po {
        constructor(t, e, n) {
          (this.listeners = []),
            (this.parent = null),
            (this._debugContext = n),
            (this.nativeNode = t),
            e && e instanceof No && e.addChild(this);
        }
        get injector() {
          return this._debugContext.injector;
        }
        get componentInstance() {
          return this._debugContext.component;
        }
        get context() {
          return this._debugContext.context;
        }
        get references() {
          return this._debugContext.references;
        }
        get providerTokens() {
          return this._debugContext.providerTokens;
        }
      }
      class No extends Po {
        constructor(t, e, n) {
          super(t, e, n),
            (this.properties = {}),
            (this.attributes = {}),
            (this.classes = {}),
            (this.styles = {}),
            (this.childNodes = []),
            (this.nativeElement = t);
        }
        addChild(t) {
          t && (this.childNodes.push(t), (t.parent = this));
        }
        removeChild(t) {
          const e = this.childNodes.indexOf(t);
          -1 !== e && ((t.parent = null), this.childNodes.splice(e, 1));
        }
        insertChildrenAfter(t, e) {
          const n = this.childNodes.indexOf(t);
          -1 !== n &&
            (this.childNodes.splice(n + 1, 0, ...e),
            e.forEach(e => {
              e.parent && e.parent.removeChild(e), (t.parent = this);
            }));
        }
        insertBefore(t, e) {
          const n = this.childNodes.indexOf(t);
          -1 === n
            ? this.addChild(e)
            : (e.parent && e.parent.removeChild(e), (e.parent = this), this.childNodes.splice(n, 0, e));
        }
        query(t) {
          return this.queryAll(t)[0] || null;
        }
        queryAll(t) {
          const e = [];
          return (
            (function t(e, n, s) {
              e.childNodes.forEach(e => {
                e instanceof No && (n(e) && s.push(e), t(e, n, s));
              });
            })(this, t, e),
            e
          );
        }
        queryAllNodes(t) {
          const e = [];
          return (
            (function t(e, n, s) {
              e instanceof No &&
                e.childNodes.forEach(e => {
                  n(e) && s.push(e), e instanceof No && t(e, n, s);
                });
            })(this, t, e),
            e
          );
        }
        get children() {
          return this.childNodes.filter(t => t instanceof No);
        }
        triggerEventHandler(t, e) {
          this.listeners.forEach(n => {
            n.name == t && n.callback(e);
          });
        }
      }
      const Mo = new Map(),
        Lo = function(t) {
          return Mo.get(t) || null;
        };
      function jo(t) {
        Mo.set(t.nativeNode, t);
      }
      const Fo = wo(null, 'core', [
        { provide: Fr, useValue: 'unknown' },
        { provide: xo, deps: [fn] },
        { provide: po, deps: [] },
        { provide: Vr, deps: [] }
      ]);
      function Bo() {
        return Es;
      }
      function Vo() {
        return Ss;
      }
      function Uo(t) {
        return t ? (Hr && Ar(t), t) : kr;
      }
      function Ho(t) {
        let e = [];
        return (
          t.onStable.subscribe(() => {
            for (; e.length; ) e.pop()();
          }),
          function(t) {
            e.push(t);
          }
        );
      }
      let zo = (() =>
        class {
          constructor(t) {}
        })();
      function $o(t, e, n, s, i, r) {
        t |= 1;
        const { matchedQueries: o, references: a, matchedQueryIds: l } = ai(e);
        return {
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          flags: t,
          checkIndex: -1,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: o,
          matchedQueryIds: l,
          references: a,
          ngContentIndex: n,
          childCount: s,
          bindings: [],
          bindingFlags: 0,
          outputs: [],
          element: {
            ns: null,
            name: null,
            attrs: null,
            template: r ? ui(r) : null,
            componentProvider: null,
            componentView: null,
            componentRendererType: null,
            publicProviders: null,
            allProviders: null,
            handleEvent: i || Us
          },
          provider: null,
          text: null,
          query: null,
          ngContent: null
        };
      }
      function qo(t, e, n, s, i, r, o = [], a, l, c, h, u) {
        c || (c = Us);
        const { matchedQueries: d, references: p, matchedQueryIds: m } = ai(n);
        let f = null,
          g = null;
        r && ([f, g] = _i(r)), (a = a || []);
        const b = new Array(a.length);
        for (let v = 0; v < a.length; v++) {
          const [t, e, n] = a[v],
            [s, i] = _i(e);
          let r = void 0,
            o = void 0;
          switch (15 & t) {
            case 4:
              o = n;
              break;
            case 1:
            case 8:
              r = n;
          }
          b[v] = { flags: t, ns: s, name: i, nonMinifiedName: i, securityContext: r, suffix: o };
        }
        l = l || [];
        const _ = new Array(l.length);
        for (let v = 0; v < l.length; v++) {
          const [t, e] = l[v];
          _[v] = { type: 0, target: t, eventName: e, propName: null };
        }
        const y = (o = o || []).map(([t, e]) => {
          const [n, s] = _i(t);
          return [n, s, e];
        });
        return (
          (u = (function(t) {
            if (t && t.id === qs) {
              const e =
                (null != t.encapsulation && t.encapsulation !== Q.None) ||
                t.styles.length ||
                Object.keys(t.data).length;
              t.id = e ? `c${Ys++}` : Ws;
            }
            return t && t.id === Ws && (t = null), t || null;
          })(u)),
          h && (e |= 33554432),
          {
            nodeIndex: -1,
            parent: null,
            renderParent: null,
            bindingIndex: -1,
            outputIndex: -1,
            checkIndex: t,
            flags: (e |= 1),
            childFlags: 0,
            directChildFlags: 0,
            childMatchedQueries: 0,
            matchedQueries: d,
            matchedQueryIds: m,
            references: p,
            ngContentIndex: s,
            childCount: i,
            bindings: b,
            bindingFlags: yi(b),
            outputs: _,
            element: {
              ns: f,
              name: g,
              attrs: y,
              template: null,
              componentProvider: null,
              componentView: h || null,
              componentRendererType: u,
              publicProviders: null,
              allProviders: null,
              handleEvent: c || Us
            },
            provider: null,
            text: null,
            query: null,
            ngContent: null
          }
        );
      }
      function Wo(t, e, n) {
        const s = n.element,
          i = t.root.selectorOrNode,
          r = t.renderer;
        let o;
        if (t.parent || !i) {
          o = s.name ? r.createElement(s.name, s.ns) : r.createComment('');
          const i = ci(t, e, n);
          i && r.appendChild(i, o);
        } else
          o = r.selectRootElement(
            i,
            !!s.componentRendererType && s.componentRendererType.encapsulation === Q.ShadowDom
          );
        if (s.attrs)
          for (let a = 0; a < s.attrs.length; a++) {
            const [t, e, n] = s.attrs[a];
            r.setAttribute(o, e, n, t);
          }
        return o;
      }
      function Ko(t, e, n, s) {
        for (let o = 0; o < n.outputs.length; o++) {
          const a = n.outputs[o],
            l = Yo(t, n.nodeIndex, ((r = a.eventName), (i = a.target) ? `${i}:${r}` : r));
          let c = a.target,
            h = t;
          'component' === a.target && ((c = null), (h = e));
          const u = h.renderer.listen(c || s, a.eventName, l);
          t.disposables[n.outputIndex + o] = u;
        }
        var i, r;
      }
      function Yo(t, e, n) {
        return s => ti(t, e, n, s);
      }
      function Qo(t, e, n, s) {
        if (!Gs(t, e, n, s)) return !1;
        const i = e.bindings[n],
          r = Ls(t, e.nodeIndex),
          o = r.renderElement,
          a = i.name;
        switch (15 & i.flags) {
          case 1:
            !(function(t, e, n, s, i, r) {
              const o = e.securityContext;
              let a = o ? t.root.sanitizer.sanitize(o, r) : r;
              a = null != a ? a.toString() : null;
              const l = t.renderer;
              null != r ? l.setAttribute(n, i, a, s) : l.removeAttribute(n, i, s);
            })(t, i, o, i.ns, a, s);
            break;
          case 2:
            !(function(t, e, n, s) {
              const i = t.renderer;
              s ? i.addClass(e, n) : i.removeClass(e, n);
            })(t, o, a, s);
            break;
          case 4:
            !(function(t, e, n, s, i) {
              let r = t.root.sanitizer.sanitize(je.STYLE, i);
              if (null != r) {
                r = r.toString();
                const t = e.suffix;
                null != t && (r += t);
              } else r = null;
              const o = t.renderer;
              null != r ? o.setStyle(n, s, r) : o.removeStyle(n, s);
            })(t, i, o, a, s);
            break;
          case 8:
            !(function(t, e, n, s, i) {
              const r = e.securityContext;
              let o = r ? t.root.sanitizer.sanitize(r, i) : i;
              t.renderer.setProperty(n, s, o);
            })(33554432 & e.flags && 32 & i.flags ? r.componentView : t, i, o, a, s);
        }
        return !0;
      }
      function Go(t, e, n) {
        let s = [];
        for (let i in n) s.push({ propName: i, bindingType: n[i] });
        return {
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          checkIndex: -1,
          flags: t,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          ngContentIndex: -1,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          childCount: 0,
          bindings: [],
          bindingFlags: 0,
          outputs: [],
          element: null,
          provider: null,
          text: null,
          query: { id: e, filterId: oi(e), bindings: s },
          ngContent: null
        };
      }
      function Zo(t) {
        const e = t.def.nodeMatchedQueries;
        for (; t.parent && ri(t); ) {
          let n = t.parentNodeDef;
          t = t.parent;
          const s = n.nodeIndex + n.childCount;
          for (let i = 0; i <= s; i++) {
            const s = t.def.nodes[i];
            67108864 & s.flags &&
              536870912 & s.flags &&
              (s.query.filterId & e) === s.query.filterId &&
              Bs(t, i).setDirty(),
              (!(1 & s.flags && i + s.childCount < n.nodeIndex) &&
                67108864 & s.childFlags &&
                536870912 & s.childFlags) ||
                (i += s.childCount);
          }
        }
        if (134217728 & t.def.nodeFlags)
          for (let n = 0; n < t.def.nodes.length; n++) {
            const e = t.def.nodes[n];
            134217728 & e.flags && 536870912 & e.flags && Bs(t, n).setDirty(), (n += e.childCount);
          }
      }
      function Xo(t, e) {
        const n = Bs(t, e.nodeIndex);
        if (!n.dirty) return;
        let s,
          i = void 0;
        if (67108864 & e.flags) {
          const n = e.parent.parent;
          (i = Jo(t, n.nodeIndex, n.nodeIndex + n.childCount, e.query, [])), (s = js(t, e.parent.nodeIndex).instance);
        } else 134217728 & e.flags && ((i = Jo(t, 0, t.def.nodes.length - 1, e.query, [])), (s = t.component));
        n.reset(i);
        const r = e.query.bindings;
        let o = !1;
        for (let a = 0; a < r.length; a++) {
          const t = r[a];
          let e;
          switch (t.bindingType) {
            case 0:
              e = n.first;
              break;
            case 1:
              (e = n), (o = !0);
          }
          s[t.propName] = e;
        }
        o && n.notifyOnChanges();
      }
      function Jo(t, e, n, s, i) {
        for (let r = e; r <= n; r++) {
          const e = t.def.nodes[r],
            n = e.matchedQueries[s.id];
          if (
            (null != n && i.push(ta(t, e, n)),
            1 & e.flags && e.element.template && (e.element.template.nodeMatchedQueries & s.filterId) === s.filterId)
          ) {
            const n = Ls(t, r);
            if (
              ((e.childMatchedQueries & s.filterId) === s.filterId &&
                (Jo(t, r + 1, r + e.childCount, s, i), (r += e.childCount)),
              16777216 & e.flags)
            ) {
              const t = n.viewContainer._embeddedViews;
              for (let e = 0; e < t.length; e++) {
                const r = t[e],
                  o = ei(r);
                o && o === n && Jo(r, 0, r.def.nodes.length - 1, s, i);
              }
            }
            const o = n.template._projectedViews;
            if (o)
              for (let t = 0; t < o.length; t++) {
                const e = o[t];
                Jo(e, 0, e.def.nodes.length - 1, s, i);
              }
          }
          (e.childMatchedQueries & s.filterId) !== s.filterId && (r += e.childCount);
        }
        return i;
      }
      function ta(t, e, n) {
        if (null != n)
          switch (n) {
            case 1:
              return Ls(t, e.nodeIndex).renderElement;
            case 0:
              return new ns(Ls(t, e.nodeIndex).renderElement);
            case 2:
              return Ls(t, e.nodeIndex).template;
            case 3:
              return Ls(t, e.nodeIndex).viewContainer;
            case 4:
              return js(t, e.nodeIndex).instance;
          }
      }
      function ea(t, e) {
        return {
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          checkIndex: -1,
          flags: 8,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          ngContentIndex: t,
          childCount: 0,
          bindings: [],
          bindingFlags: 0,
          outputs: [],
          element: null,
          provider: null,
          text: null,
          query: null,
          ngContent: { index: e }
        };
      }
      function na(t, e, n) {
        const s = ci(t, e, n);
        s && mi(t, n.ngContent.index, 1, s, null, void 0);
      }
      function sa(t, e, n) {
        const s = new Array(n.length - 1);
        for (let i = 1; i < n.length; i++)
          s[i - 1] = { flags: 8, name: null, ns: null, nonMinifiedName: null, securityContext: null, suffix: n[i] };
        return {
          nodeIndex: -1,
          parent: null,
          renderParent: null,
          bindingIndex: -1,
          outputIndex: -1,
          checkIndex: t,
          flags: 2,
          childFlags: 0,
          directChildFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          ngContentIndex: e,
          childCount: 0,
          bindings: s,
          bindingFlags: 8,
          outputs: [],
          element: null,
          provider: null,
          text: { prefix: n[0] },
          query: null,
          ngContent: null
        };
      }
      function ia(t, e, n) {
        let s;
        const i = t.renderer;
        s = i.createText(n.text.prefix);
        const r = ci(t, e, n);
        return r && i.appendChild(r, s), { renderText: s };
      }
      function ra(t, e) {
        return (null != t ? t.toString() : '') + e.suffix;
      }
      function oa(t, e, n, s) {
        let i = 0,
          r = 0,
          o = 0,
          a = 0,
          l = 0,
          c = null,
          h = null,
          u = !1,
          d = !1,
          p = null;
        for (let m = 0; m < e.length; m++) {
          const t = e[m];
          if (
            ((t.nodeIndex = m),
            (t.parent = c),
            (t.bindingIndex = i),
            (t.outputIndex = r),
            (t.renderParent = h),
            (o |= t.flags),
            (l |= t.matchedQueryIds),
            t.element)
          ) {
            const e = t.element;
            (e.publicProviders = c ? c.element.publicProviders : Object.create(null)),
              (e.allProviders = e.publicProviders),
              (u = !1),
              (d = !1),
              t.element.template && (l |= t.element.template.nodeMatchedQueries);
          }
          if (
            (la(c, t, e.length),
            (i += t.bindings.length),
            (r += t.outputs.length),
            !h && 3 & t.flags && (p = t),
            20224 & t.flags)
          ) {
            u ||
              ((u = !0),
              (c.element.publicProviders = Object.create(c.element.publicProviders)),
              (c.element.allProviders = c.element.publicProviders));
            const e = 0 != (32768 & t.flags);
            0 == (8192 & t.flags) || e
              ? (c.element.publicProviders[zs(t.provider.token)] = t)
              : (d || ((d = !0), (c.element.allProviders = Object.create(c.element.publicProviders))),
                (c.element.allProviders[zs(t.provider.token)] = t)),
              e && (c.element.componentProvider = t);
          }
          if (
            (c
              ? ((c.childFlags |= t.flags),
                (c.directChildFlags |= t.flags),
                (c.childMatchedQueries |= t.matchedQueryIds),
                t.element && t.element.template && (c.childMatchedQueries |= t.element.template.nodeMatchedQueries))
              : (a |= t.flags),
            t.childCount > 0)
          )
            (c = t), aa(t) || (h = t);
          else
            for (; c && m === c.nodeIndex + c.childCount; ) {
              const t = c.parent;
              t && ((t.childFlags |= c.childFlags), (t.childMatchedQueries |= c.childMatchedQueries)),
                (h = (c = t) && aa(c) ? c.renderParent : c);
            }
        }
        return {
          factory: null,
          nodeFlags: o,
          rootNodeFlags: a,
          nodeMatchedQueries: l,
          flags: t,
          nodes: e,
          updateDirectives: n || Us,
          updateRenderer: s || Us,
          handleEvent: (t, n, s, i) => e[n].element.handleEvent(t, s, i),
          bindingCount: i,
          outputCount: r,
          lastRenderRootNode: p
        };
      }
      function aa(t) {
        return 0 != (1 & t.flags) && null === t.element.name;
      }
      function la(t, e, n) {
        const s = e.element && e.element.template;
        if (s) {
          if (!s.lastRenderRootNode)
            throw new Error('Illegal State: Embedded templates without nodes are not allowed!');
          if (s.lastRenderRootNode && 16777216 & s.lastRenderRootNode.flags)
            throw new Error(
              `Illegal State: Last root node of a template can't have embedded views, at index ${e.nodeIndex}!`
            );
        }
        if (20224 & e.flags && 0 == (1 & (t ? t.flags : 0)))
          throw new Error(
            `Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ${e.nodeIndex}!`
          );
        if (e.query) {
          if (67108864 & e.flags && (!t || 0 == (16384 & t.flags)))
            throw new Error(
              `Illegal State: Content Query nodes need to be children of directives, at index ${e.nodeIndex}!`
            );
          if (134217728 & e.flags && t)
            throw new Error(`Illegal State: View Query nodes have to be top level nodes, at index ${e.nodeIndex}!`);
        }
        if (e.childCount) {
          const s = t ? t.nodeIndex + t.childCount : n - 1;
          if (e.nodeIndex <= s && e.nodeIndex + e.childCount > s)
            throw new Error(`Illegal State: childCount of node leads outside of parent, at index ${e.nodeIndex}!`);
        }
      }
      function ca(t, e, n, s) {
        const i = da(t.root, t.renderer, t, e, n);
        return pa(i, t.component, s), ma(i), i;
      }
      function ha(t, e, n) {
        const s = da(t, t.renderer, null, null, e);
        return pa(s, n, n), ma(s), s;
      }
      function ua(t, e, n, s) {
        const i = e.element.componentRendererType;
        let r;
        return (
          (r = i ? t.root.rendererFactory.createRenderer(s, i) : t.root.renderer),
          da(t.root, r, t, e.element.componentProvider, n)
        );
      }
      function da(t, e, n, s, i) {
        const r = new Array(i.nodes.length),
          o = i.outputCount ? new Array(i.outputCount) : null;
        return {
          def: i,
          parent: n,
          viewContainerParent: null,
          parentNodeDef: s,
          context: null,
          component: null,
          nodes: r,
          state: 13,
          root: t,
          renderer: e,
          oldValues: new Array(i.bindingCount),
          disposables: o,
          initIndex: -1
        };
      }
      function pa(t, e, n) {
        (t.component = e), (t.context = n);
      }
      function ma(t) {
        let e;
        ii(t) && (e = Ls(t.parent, t.parentNodeDef.parent.nodeIndex).renderElement);
        const n = t.def,
          s = t.nodes;
        for (let i = 0; i < n.nodes.length; i++) {
          const r = n.nodes[i];
          let o;
          switch ((Vs.setCurrentNode(t, i), 201347067 & r.flags)) {
            case 1:
              const n = Wo(t, e, r);
              let a = void 0;
              if (33554432 & r.flags) {
                const e = ui(r.element.componentView);
                a = Vs.createComponentView(t, r, e, n);
              }
              Ko(t, a, r, n),
                (o = {
                  renderElement: n,
                  componentView: a,
                  viewContainer: null,
                  template: r.element.template ? Bi(t, r) : void 0
                }),
                16777216 & r.flags && (o.viewContainer = Mi(t, r, o));
              break;
            case 2:
              o = ia(t, e, r);
              break;
            case 512:
            case 1024:
            case 2048:
            case 256:
              (o = s[i]) || 4096 & r.flags || (o = { instance: or(t, r) });
              break;
            case 16:
              o = { instance: ar(t, r) };
              break;
            case 16384:
              (o = s[i]) || (o = { instance: lr(t, r) }),
                32768 & r.flags && pa(Ls(t, r.parent.nodeIndex).componentView, o.instance, o.instance);
              break;
            case 32:
            case 64:
            case 128:
              o = { value: void 0 };
              break;
            case 67108864:
            case 134217728:
              o = new Ir();
              break;
            case 8:
              na(t, e, r), (o = void 0);
          }
          s[i] = o;
        }
        xa(t, Ca.CreateViewNodes), Da(t, 201326592, 268435456, 0);
      }
      function fa(t) {
        _a(t),
          Vs.updateDirectives(t, 1),
          Ea(t, Ca.CheckNoChanges),
          Vs.updateRenderer(t, 1),
          xa(t, Ca.CheckNoChanges),
          (t.state &= -97);
      }
      function ga(t) {
        1 & t.state ? ((t.state &= -2), (t.state |= 2)) : (t.state &= -3),
          Ps(t, 0, 256),
          _a(t),
          Vs.updateDirectives(t, 0),
          Ea(t, Ca.CheckAndUpdate),
          Da(t, 67108864, 536870912, 0);
        let e = Ps(t, 256, 512);
        gr(t, 2097152 | (e ? 1048576 : 0)),
          Vs.updateRenderer(t, 0),
          xa(t, Ca.CheckAndUpdate),
          Da(t, 134217728, 536870912, 0),
          gr(t, 8388608 | ((e = Ps(t, 512, 768)) ? 4194304 : 0)),
          2 & t.def.flags && (t.state &= -9),
          (t.state &= -97),
          Ps(t, 768, 1024);
      }
      function ba(t, e, n, s, i, r, o, a, l, c, h, u, d) {
        return 0 === n
          ? (function(t, e, n, s, i, r, o, a, l, c, h, u) {
              switch (201347067 & e.flags) {
                case 1:
                  return (function(t, e, n, s, i, r, o, a, l, c, h, u) {
                    const d = e.bindings.length;
                    let p = !1;
                    return (
                      d > 0 && Qo(t, e, 0, n) && (p = !0),
                      d > 1 && Qo(t, e, 1, s) && (p = !0),
                      d > 2 && Qo(t, e, 2, i) && (p = !0),
                      d > 3 && Qo(t, e, 3, r) && (p = !0),
                      d > 4 && Qo(t, e, 4, o) && (p = !0),
                      d > 5 && Qo(t, e, 5, a) && (p = !0),
                      d > 6 && Qo(t, e, 6, l) && (p = !0),
                      d > 7 && Qo(t, e, 7, c) && (p = !0),
                      d > 8 && Qo(t, e, 8, h) && (p = !0),
                      d > 9 && Qo(t, e, 9, u) && (p = !0),
                      p
                    );
                  })(t, e, n, s, i, r, o, a, l, c, h, u);
                case 2:
                  return (function(t, e, n, s, i, r, o, a, l, c, h, u) {
                    let d = !1;
                    const p = e.bindings,
                      m = p.length;
                    if (
                      (m > 0 && Gs(t, e, 0, n) && (d = !0),
                      m > 1 && Gs(t, e, 1, s) && (d = !0),
                      m > 2 && Gs(t, e, 2, i) && (d = !0),
                      m > 3 && Gs(t, e, 3, r) && (d = !0),
                      m > 4 && Gs(t, e, 4, o) && (d = !0),
                      m > 5 && Gs(t, e, 5, a) && (d = !0),
                      m > 6 && Gs(t, e, 6, l) && (d = !0),
                      m > 7 && Gs(t, e, 7, c) && (d = !0),
                      m > 8 && Gs(t, e, 8, h) && (d = !0),
                      m > 9 && Gs(t, e, 9, u) && (d = !0),
                      d)
                    ) {
                      let d = e.text.prefix;
                      m > 0 && (d += ra(n, p[0])),
                        m > 1 && (d += ra(s, p[1])),
                        m > 2 && (d += ra(i, p[2])),
                        m > 3 && (d += ra(r, p[3])),
                        m > 4 && (d += ra(o, p[4])),
                        m > 5 && (d += ra(a, p[5])),
                        m > 6 && (d += ra(l, p[6])),
                        m > 7 && (d += ra(c, p[7])),
                        m > 8 && (d += ra(h, p[8])),
                        m > 9 && (d += ra(u, p[9]));
                      const f = Ms(t, e.nodeIndex).renderText;
                      t.renderer.setValue(f, d);
                    }
                    return d;
                  })(t, e, n, s, i, r, o, a, l, c, h, u);
                case 16384:
                  return (function(t, e, n, s, i, r, o, a, l, c, h, u) {
                    const d = js(t, e.nodeIndex),
                      p = d.instance;
                    let m = !1,
                      f = void 0;
                    const g = e.bindings.length;
                    return (
                      g > 0 && Qs(t, e, 0, n) && ((m = !0), (f = fr(t, d, e, 0, n, f))),
                      g > 1 && Qs(t, e, 1, s) && ((m = !0), (f = fr(t, d, e, 1, s, f))),
                      g > 2 && Qs(t, e, 2, i) && ((m = !0), (f = fr(t, d, e, 2, i, f))),
                      g > 3 && Qs(t, e, 3, r) && ((m = !0), (f = fr(t, d, e, 3, r, f))),
                      g > 4 && Qs(t, e, 4, o) && ((m = !0), (f = fr(t, d, e, 4, o, f))),
                      g > 5 && Qs(t, e, 5, a) && ((m = !0), (f = fr(t, d, e, 5, a, f))),
                      g > 6 && Qs(t, e, 6, l) && ((m = !0), (f = fr(t, d, e, 6, l, f))),
                      g > 7 && Qs(t, e, 7, c) && ((m = !0), (f = fr(t, d, e, 7, c, f))),
                      g > 8 && Qs(t, e, 8, h) && ((m = !0), (f = fr(t, d, e, 8, h, f))),
                      g > 9 && Qs(t, e, 9, u) && ((m = !0), (f = fr(t, d, e, 9, u, f))),
                      f && p.ngOnChanges(f),
                      65536 & e.flags && Ns(t, 256, e.nodeIndex) && p.ngOnInit(),
                      262144 & e.flags && p.ngDoCheck(),
                      m
                    );
                  })(t, e, n, s, i, r, o, a, l, c, h, u);
                case 32:
                case 64:
                case 128:
                  return (function(t, e, n, s, i, r, o, a, l, c, h, u) {
                    const d = e.bindings;
                    let p = !1;
                    const m = d.length;
                    if (
                      (m > 0 && Gs(t, e, 0, n) && (p = !0),
                      m > 1 && Gs(t, e, 1, s) && (p = !0),
                      m > 2 && Gs(t, e, 2, i) && (p = !0),
                      m > 3 && Gs(t, e, 3, r) && (p = !0),
                      m > 4 && Gs(t, e, 4, o) && (p = !0),
                      m > 5 && Gs(t, e, 5, a) && (p = !0),
                      m > 6 && Gs(t, e, 6, l) && (p = !0),
                      m > 7 && Gs(t, e, 7, c) && (p = !0),
                      m > 8 && Gs(t, e, 8, h) && (p = !0),
                      m > 9 && Gs(t, e, 9, u) && (p = !0),
                      p)
                    ) {
                      const p = Fs(t, e.nodeIndex);
                      let f;
                      switch (201347067 & e.flags) {
                        case 32:
                          (f = new Array(d.length)),
                            m > 0 && (f[0] = n),
                            m > 1 && (f[1] = s),
                            m > 2 && (f[2] = i),
                            m > 3 && (f[3] = r),
                            m > 4 && (f[4] = o),
                            m > 5 && (f[5] = a),
                            m > 6 && (f[6] = l),
                            m > 7 && (f[7] = c),
                            m > 8 && (f[8] = h),
                            m > 9 && (f[9] = u);
                          break;
                        case 64:
                          (f = {}),
                            m > 0 && (f[d[0].name] = n),
                            m > 1 && (f[d[1].name] = s),
                            m > 2 && (f[d[2].name] = i),
                            m > 3 && (f[d[3].name] = r),
                            m > 4 && (f[d[4].name] = o),
                            m > 5 && (f[d[5].name] = a),
                            m > 6 && (f[d[6].name] = l),
                            m > 7 && (f[d[7].name] = c),
                            m > 8 && (f[d[8].name] = h),
                            m > 9 && (f[d[9].name] = u);
                          break;
                        case 128:
                          const t = n;
                          switch (m) {
                            case 1:
                              f = t.transform(n);
                              break;
                            case 2:
                              f = t.transform(s);
                              break;
                            case 3:
                              f = t.transform(s, i);
                              break;
                            case 4:
                              f = t.transform(s, i, r);
                              break;
                            case 5:
                              f = t.transform(s, i, r, o);
                              break;
                            case 6:
                              f = t.transform(s, i, r, o, a);
                              break;
                            case 7:
                              f = t.transform(s, i, r, o, a, l);
                              break;
                            case 8:
                              f = t.transform(s, i, r, o, a, l, c);
                              break;
                            case 9:
                              f = t.transform(s, i, r, o, a, l, c, h);
                              break;
                            case 10:
                              f = t.transform(s, i, r, o, a, l, c, h, u);
                          }
                      }
                      p.value = f;
                    }
                    return p;
                  })(t, e, n, s, i, r, o, a, l, c, h, u);
                default:
                  throw 'unreachable';
              }
            })(t, e, s, i, r, o, a, l, c, h, u, d)
          : (function(t, e, n) {
              switch (201347067 & e.flags) {
                case 1:
                  return (function(t, e, n) {
                    let s = !1;
                    for (let i = 0; i < n.length; i++) Qo(t, e, i, n[i]) && (s = !0);
                    return s;
                  })(t, e, n);
                case 2:
                  return (function(t, e, n) {
                    const s = e.bindings;
                    let i = !1;
                    for (let r = 0; r < n.length; r++) Gs(t, e, r, n[r]) && (i = !0);
                    if (i) {
                      let i = '';
                      for (let t = 0; t < n.length; t++) i += ra(n[t], s[t]);
                      i = e.text.prefix + i;
                      const r = Ms(t, e.nodeIndex).renderText;
                      t.renderer.setValue(r, i);
                    }
                    return i;
                  })(t, e, n);
                case 16384:
                  return (function(t, e, n) {
                    const s = js(t, e.nodeIndex),
                      i = s.instance;
                    let r = !1,
                      o = void 0;
                    for (let a = 0; a < n.length; a++) Qs(t, e, a, n[a]) && ((r = !0), (o = fr(t, s, e, a, n[a], o)));
                    return (
                      o && i.ngOnChanges(o),
                      65536 & e.flags && Ns(t, 256, e.nodeIndex) && i.ngOnInit(),
                      262144 & e.flags && i.ngDoCheck(),
                      r
                    );
                  })(t, e, n);
                case 32:
                case 64:
                case 128:
                  return (function(t, e, n) {
                    const s = e.bindings;
                    let i = !1;
                    for (let r = 0; r < n.length; r++) Gs(t, e, r, n[r]) && (i = !0);
                    if (i) {
                      const i = Fs(t, e.nodeIndex);
                      let r;
                      switch (201347067 & e.flags) {
                        case 32:
                          r = n;
                          break;
                        case 64:
                          r = {};
                          for (let e = 0; e < n.length; e++) r[s[e].name] = n[e];
                          break;
                        case 128:
                          const t = n[0],
                            i = n.slice(1);
                          r = t.transform(...i);
                      }
                      i.value = r;
                    }
                    return i;
                  })(t, e, n);
                default:
                  throw 'unreachable';
              }
            })(t, e, s);
      }
      function _a(t) {
        const e = t.def;
        if (4 & e.nodeFlags)
          for (let n = 0; n < e.nodes.length; n++) {
            const s = e.nodes[n];
            if (4 & s.flags) {
              const e = Ls(t, n).template._projectedViews;
              if (e)
                for (let n = 0; n < e.length; n++) {
                  const s = e[n];
                  (s.state |= 32), Js(s, t);
                }
            } else 0 == (4 & s.childFlags) && (n += s.childCount);
          }
      }
      function ya(t, e, n, s, i, r, o, a, l, c, h, u, d) {
        return (
          0 === n
            ? (function(t, e, n, s, i, r, o, a, l, c, h, u) {
                const d = e.bindings.length;
                d > 0 && Zs(t, e, 0, n),
                  d > 1 && Zs(t, e, 1, s),
                  d > 2 && Zs(t, e, 2, i),
                  d > 3 && Zs(t, e, 3, r),
                  d > 4 && Zs(t, e, 4, o),
                  d > 5 && Zs(t, e, 5, a),
                  d > 6 && Zs(t, e, 6, l),
                  d > 7 && Zs(t, e, 7, c),
                  d > 8 && Zs(t, e, 8, h),
                  d > 9 && Zs(t, e, 9, u);
              })(t, e, s, i, r, o, a, l, c, h, u, d)
            : (function(t, e, n) {
                for (let s = 0; s < n.length; s++) Zs(t, e, s, n[s]);
              })(t, e, s),
          !1
        );
      }
      function va(t, e) {
        if (Bs(t, e.nodeIndex).dirty)
          throw Os(
            Vs.createDebugContext(t, e.nodeIndex),
            `Query ${e.query.id} not dirty`,
            `Query ${e.query.id} dirty`,
            0 != (1 & t.state)
          );
      }
      function wa(t) {
        if (!(128 & t.state)) {
          if ((Ea(t, Ca.Destroy), xa(t, Ca.Destroy), gr(t, 131072), t.disposables))
            for (let e = 0; e < t.disposables.length; e++) t.disposables[e]();
          !(function(t) {
            if (!(16 & t.state)) return;
            const e = ei(t);
            if (e) {
              const n = e.template._projectedViews;
              n && (K(n, n.indexOf(t)), Vs.dirtyParentQueries(t));
            }
          })(t),
            t.renderer.destroyNode &&
              (function(t) {
                const e = t.def.nodes.length;
                for (let n = 0; n < e; n++) {
                  const e = t.def.nodes[n];
                  1 & e.flags
                    ? t.renderer.destroyNode(Ls(t, n).renderElement)
                    : 2 & e.flags
                    ? t.renderer.destroyNode(Ms(t, n).renderText)
                    : (67108864 & e.flags || 134217728 & e.flags) && Bs(t, n).destroy();
                }
              })(t),
            ii(t) && t.renderer.destroy(),
            (t.state |= 128);
        }
      }
      const Ca = (function() {
        var t = {
          CreateViewNodes: 0,
          CheckNoChanges: 1,
          CheckNoChangesProjectedViews: 2,
          CheckAndUpdate: 3,
          CheckAndUpdateProjectedViews: 4,
          Destroy: 5
        };
        return (
          (t[t.CreateViewNodes] = 'CreateViewNodes'),
          (t[t.CheckNoChanges] = 'CheckNoChanges'),
          (t[t.CheckNoChangesProjectedViews] = 'CheckNoChangesProjectedViews'),
          (t[t.CheckAndUpdate] = 'CheckAndUpdate'),
          (t[t.CheckAndUpdateProjectedViews] = 'CheckAndUpdateProjectedViews'),
          (t[t.Destroy] = 'Destroy'),
          t
        );
      })();
      function xa(t, e) {
        const n = t.def;
        if (33554432 & n.nodeFlags)
          for (let s = 0; s < n.nodes.length; s++) {
            const i = n.nodes[s];
            33554432 & i.flags ? Sa(Ls(t, s).componentView, e) : 0 == (33554432 & i.childFlags) && (s += i.childCount);
          }
      }
      function Ea(t, e) {
        const n = t.def;
        if (16777216 & n.nodeFlags)
          for (let s = 0; s < n.nodes.length; s++) {
            const i = n.nodes[s];
            if (16777216 & i.flags) {
              const n = Ls(t, s).viewContainer._embeddedViews;
              for (let t = 0; t < n.length; t++) Sa(n[t], e);
            } else 0 == (16777216 & i.childFlags) && (s += i.childCount);
          }
      }
      function Sa(t, e) {
        const n = t.state;
        switch (e) {
          case Ca.CheckNoChanges:
            0 == (128 & n) && (12 == (12 & n) ? fa(t) : 64 & n && ka(t, Ca.CheckNoChangesProjectedViews));
            break;
          case Ca.CheckNoChangesProjectedViews:
            0 == (128 & n) && (32 & n ? fa(t) : 64 & n && ka(t, e));
            break;
          case Ca.CheckAndUpdate:
            0 == (128 & n) && (12 == (12 & n) ? ga(t) : 64 & n && ka(t, Ca.CheckAndUpdateProjectedViews));
            break;
          case Ca.CheckAndUpdateProjectedViews:
            0 == (128 & n) && (32 & n ? ga(t) : 64 & n && ka(t, e));
            break;
          case Ca.Destroy:
            wa(t);
            break;
          case Ca.CreateViewNodes:
            ma(t);
        }
      }
      function ka(t, e) {
        Ea(t, e), xa(t, e);
      }
      function Da(t, e, n, s) {
        if (!(t.def.nodeFlags & e && t.def.nodeFlags & n)) return;
        const i = t.def.nodes.length;
        for (let r = 0; r < i; r++) {
          const i = t.def.nodes[r];
          if (i.flags & e && i.flags & n)
            switch ((Vs.setCurrentNode(t, i.nodeIndex), s)) {
              case 0:
                Xo(t, i);
                break;
              case 1:
                va(t, i);
            }
          (i.childFlags & e && i.childFlags & n) || (r += i.childCount);
        }
      }
      let Aa = !1;
      function Ta(t, e, n, s, i, r) {
        const o = i.injector.get(rs);
        return ha(Ia(t, i, o, e, n), s, r);
      }
      function Oa(t, e, n, s, i, r) {
        const o = i.injector.get(rs),
          a = Ia(t, i, new cl(o), e, n),
          l = Ua(s);
        return al(Ka.create, ha, null, [a, l, r]);
      }
      function Ia(t, e, n, s, i) {
        const r = e.injector.get(Fe),
          o = e.injector.get(he),
          a = n.createRenderer(null, null);
        return {
          ngModule: e,
          injector: t,
          projectableNodes: s,
          selectorOrNode: i,
          sanitizer: r,
          rendererFactory: n,
          renderer: a,
          errorHandler: o
        };
      }
      function Ra(t, e, n, s) {
        const i = Ua(n);
        return al(Ka.create, ca, null, [t, e, i, s]);
      }
      function Pa(t, e, n, s) {
        return (n = ja.get(e.element.componentProvider.provider.token) || Ua(n)), al(Ka.create, ua, null, [t, e, n, s]);
      }
      function Na(t, e, n, s) {
        return Wi(
          t,
          e,
          n,
          (function(t) {
            const { hasOverrides: e, hasDeprecatedOverrides: n } = (function(t) {
              let e = !1,
                n = !1;
              return 0 === Ma.size
                ? { hasOverrides: e, hasDeprecatedOverrides: n }
                : (t.providers.forEach(t => {
                    const s = Ma.get(t.token);
                    3840 & t.flags && s && ((e = !0), (n = n || s.deprecatedBehavior));
                  }),
                  t.modules.forEach(t => {
                    La.forEach((s, i) => {
                      b(i).providedIn === t && ((e = !0), (n = n || s.deprecatedBehavior));
                    });
                  }),
                  { hasOverrides: e, hasDeprecatedOverrides: n });
            })(t);
            return e
              ? ((function(t) {
                  for (let e = 0; e < t.providers.length; e++) {
                    const s = t.providers[e];
                    n && (s.flags |= 4096);
                    const i = Ma.get(s.token);
                    i && ((s.flags = (-3841 & s.flags) | i.flags), (s.deps = li(i.deps)), (s.value = i.value));
                  }
                  if (La.size > 0) {
                    let e = new Set(t.modules);
                    La.forEach((s, i) => {
                      if (e.has(b(i).providedIn)) {
                        let e = {
                          token: i,
                          flags: s.flags | (n ? 4096 : 0),
                          deps: li(s.deps),
                          value: s.value,
                          index: t.providers.length
                        };
                        t.providers.push(e), (t.providersByKey[zs(i)] = e);
                      }
                    });
                  }
                })((t = t.factory(() => Us))),
                t)
              : t;
          })(s)
        );
      }
      const Ma = new Map(),
        La = new Map(),
        ja = new Map();
      function Fa(t) {
        let e;
        Ma.set(t.token, t),
          'function' == typeof t.token && (e = b(t.token)) && 'function' == typeof e.providedIn && La.set(t.token, t);
      }
      function Ba(t, e) {
        const n = ui(e.viewDefFactory),
          s = ui(n.nodes[0].element.componentView);
        ja.set(t, s);
      }
      function Va() {
        Ma.clear(), La.clear(), ja.clear();
      }
      function Ua(t) {
        if (0 === Ma.size) return t;
        const e = (function(t) {
          const e = [];
          let n = null;
          for (let s = 0; s < t.nodes.length; s++) {
            const i = t.nodes[s];
            1 & i.flags && (n = i),
              n && 3840 & i.flags && Ma.has(i.provider.token) && (e.push(n.nodeIndex), (n = null));
          }
          return e;
        })(t);
        if (0 === e.length) return t;
        t = t.factory(() => Us);
        for (let s = 0; s < e.length; s++) n(t, e[s]);
        return t;
        function n(t, e) {
          for (let n = e + 1; n < t.nodes.length; n++) {
            const e = t.nodes[n];
            if (1 & e.flags) return;
            if (3840 & e.flags) {
              const t = e.provider,
                n = Ma.get(t.token);
              n && ((e.flags = (-3841 & e.flags) | n.flags), (t.deps = li(n.deps)), (t.value = n.value));
            }
          }
        }
      }
      function Ha(t, e, n, s, i, r, o, a, l, c, h, u, d) {
        const p = t.def.nodes[e];
        return ba(t, p, n, s, i, r, o, a, l, c, h, u, d), 224 & p.flags ? Fs(t, e).value : void 0;
      }
      function za(t, e, n, s, i, r, o, a, l, c, h, u, d) {
        const p = t.def.nodes[e];
        return ya(t, p, n, s, i, r, o, a, l, c, h, u, d), 224 & p.flags ? Fs(t, e).value : void 0;
      }
      function $a(t) {
        return al(Ka.detectChanges, ga, null, [t]);
      }
      function qa(t) {
        return al(Ka.checkNoChanges, fa, null, [t]);
      }
      function Wa(t) {
        return al(Ka.destroy, wa, null, [t]);
      }
      const Ka = (function() {
        var t = { create: 0, detectChanges: 1, checkNoChanges: 2, destroy: 3, handleEvent: 4 };
        return (
          (t[t.create] = 'create'),
          (t[t.detectChanges] = 'detectChanges'),
          (t[t.checkNoChanges] = 'checkNoChanges'),
          (t[t.destroy] = 'destroy'),
          (t[t.handleEvent] = 'handleEvent'),
          t
        );
      })();
      let Ya, Qa, Ga;
      function Za(t, e) {
        (Qa = t), (Ga = e);
      }
      function Xa(t, e, n, s) {
        return Za(t, e), al(Ka.handleEvent, t.def.handleEvent, null, [t, e, n, s]);
      }
      function Ja(t, e) {
        if (128 & t.state) throw Rs(Ka[Ya]);
        return (
          Za(t, sl(t, 0)),
          t.def.updateDirectives(function(t, n, s, ...i) {
            const r = t.def.nodes[n];
            return (
              0 === e ? el(t, r, s, i) : nl(t, r, s, i),
              16384 & r.flags && Za(t, sl(t, n)),
              224 & r.flags ? Fs(t, r.nodeIndex).value : void 0
            );
          }, t)
        );
      }
      function tl(t, e) {
        if (128 & t.state) throw Rs(Ka[Ya]);
        return (
          Za(t, il(t, 0)),
          t.def.updateRenderer(function(t, n, s, ...i) {
            const r = t.def.nodes[n];
            return (
              0 === e ? el(t, r, s, i) : nl(t, r, s, i),
              3 & r.flags && Za(t, il(t, n)),
              224 & r.flags ? Fs(t, r.nodeIndex).value : void 0
            );
          }, t)
        );
      }
      function el(t, e, n, s) {
        if (ba(t, e, n, ...s)) {
          const o = 1 === n ? s[0] : s;
          if (16384 & e.flags) {
            const n = {};
            for (let t = 0; t < e.bindings.length; t++) {
              const s = e.bindings[t],
                a = o[t];
              8 & s.flags &&
                (n[
                  ((i = s.nonMinifiedName),
                  (r = void 0),
                  (r = i.replace(/[$@]/g, '_')),
                  `ng-reflect-${(i = r.replace(He, (...t) => '-' + t[1].toLowerCase()))}`)
                ] = ze(a));
            }
            const s = e.parent,
              a = Ls(t, s.nodeIndex).renderElement;
            if (s.element.name)
              for (let e in n) {
                const s = n[e];
                null != s ? t.renderer.setAttribute(a, e, s) : t.renderer.removeAttribute(a, e);
              }
            else t.renderer.setValue(a, `bindings=${JSON.stringify(n, null, 2)}`);
          }
        }
        var i, r;
      }
      function nl(t, e, n, s) {
        ya(t, e, n, ...s);
      }
      function sl(t, e) {
        for (let n = e; n < t.def.nodes.length; n++) {
          const e = t.def.nodes[n];
          if (16384 & e.flags && e.bindings && e.bindings.length) return n;
        }
        return null;
      }
      function il(t, e) {
        for (let n = e; n < t.def.nodes.length; n++) {
          const e = t.def.nodes[n];
          if (3 & e.flags && e.bindings && e.bindings.length) return n;
        }
        return null;
      }
      class rl {
        constructor(t, e) {
          (this.view = t), (this.nodeIndex = e), null == e && (this.nodeIndex = e = 0), (this.nodeDef = t.def.nodes[e]);
          let n = this.nodeDef,
            s = t;
          for (; n && 0 == (1 & n.flags); ) n = n.parent;
          if (!n) for (; !n && s; ) (n = ni(s)), (s = s.parent);
          (this.elDef = n), (this.elView = s);
        }
        get elOrCompView() {
          return Ls(this.elView, this.elDef.nodeIndex).componentView || this.view;
        }
        get injector() {
          return Ui(this.elView, this.elDef);
        }
        get component() {
          return this.elOrCompView.component;
        }
        get context() {
          return this.elOrCompView.context;
        }
        get providerTokens() {
          const t = [];
          if (this.elDef)
            for (let e = this.elDef.nodeIndex + 1; e <= this.elDef.nodeIndex + this.elDef.childCount; e++) {
              const n = this.elView.def.nodes[e];
              20224 & n.flags && t.push(n.provider.token), (e += n.childCount);
            }
          return t;
        }
        get references() {
          const t = {};
          if (this.elDef) {
            ol(this.elView, this.elDef, t);
            for (let e = this.elDef.nodeIndex + 1; e <= this.elDef.nodeIndex + this.elDef.childCount; e++) {
              const n = this.elView.def.nodes[e];
              20224 & n.flags && ol(this.elView, n, t), (e += n.childCount);
            }
          }
          return t;
        }
        get componentRenderElement() {
          const t = (function(t) {
            for (; t && !ii(t); ) t = t.parent;
            return t.parent ? Ls(t.parent, ni(t).nodeIndex) : null;
          })(this.elOrCompView);
          return t ? t.renderElement : void 0;
        }
        get renderNode() {
          return 2 & this.nodeDef.flags ? si(this.view, this.nodeDef) : si(this.elView, this.elDef);
        }
        logError(t, ...e) {
          let n, s;
          2 & this.nodeDef.flags
            ? ((n = this.view.def), (s = this.nodeDef.nodeIndex))
            : ((n = this.elView.def), (s = this.elDef.nodeIndex));
          const i = (function(t, e) {
            let n = -1;
            for (let s = 0; s <= e; s++) 3 & t.nodes[s].flags && n++;
            return n;
          })(n, s);
          let r = -1;
          n.factory(() => (++r === i ? t.error.bind(t, ...e) : Us)),
            r < i && (t.error('Illegal state: the ViewDefinitionFactory did not call the logger!'), t.error(...e));
        }
      }
      function ol(t, e, n) {
        for (let s in e.references) n[s] = ta(t, e, e.references[s]);
      }
      function al(t, e, n, s) {
        const i = Ya,
          r = Qa,
          o = Ga;
        try {
          Ya = t;
          const l = e.apply(n, s);
          return (Qa = r), (Ga = o), (Ya = i), l;
        } catch (a) {
          if (ae(a) || !Qa) throw a;
          throw (function(t, e) {
            return t instanceof Error || (t = new Error(t.toString())), Is(t, e), t;
          })(a, ll());
        }
      }
      function ll() {
        return Qa ? new rl(Qa, Ga) : null;
      }
      class cl {
        constructor(t) {
          this.delegate = t;
        }
        createRenderer(t, e) {
          return new hl(this.delegate.createRenderer(t, e));
        }
        begin() {
          this.delegate.begin && this.delegate.begin();
        }
        end() {
          this.delegate.end && this.delegate.end();
        }
        whenRenderingDone() {
          return this.delegate.whenRenderingDone ? this.delegate.whenRenderingDone() : Promise.resolve(null);
        }
      }
      class hl {
        constructor(t) {
          (this.delegate = t), (this.debugContextFactory = ll), (this.data = this.delegate.data);
        }
        createDebugContext(t) {
          return this.debugContextFactory(t);
        }
        destroyNode(t) {
          const e = Lo(t);
          Mo.delete(e.nativeNode),
            e instanceof Po && (e.listeners.length = 0),
            this.delegate.destroyNode && this.delegate.destroyNode(t);
        }
        destroy() {
          this.delegate.destroy();
        }
        createElement(t, e) {
          const n = this.delegate.createElement(t, e),
            s = this.createDebugContext(n);
          if (s) {
            const e = new No(n, null, s);
            (e.name = t), jo(e);
          }
          return n;
        }
        createComment(t) {
          const e = this.delegate.createComment(t),
            n = this.createDebugContext(e);
          return n && jo(new Po(e, null, n)), e;
        }
        createText(t) {
          const e = this.delegate.createText(t),
            n = this.createDebugContext(e);
          return n && jo(new Po(e, null, n)), e;
        }
        appendChild(t, e) {
          const n = Lo(t),
            s = Lo(e);
          n && s && n instanceof No && n.addChild(s), this.delegate.appendChild(t, e);
        }
        insertBefore(t, e, n) {
          const s = Lo(t),
            i = Lo(e),
            r = Lo(n);
          s && i && s instanceof No && s.insertBefore(r, i), this.delegate.insertBefore(t, e, n);
        }
        removeChild(t, e) {
          const n = Lo(t),
            s = Lo(e);
          n && s && n instanceof No && n.removeChild(s), this.delegate.removeChild(t, e);
        }
        selectRootElement(t, e) {
          const n = this.delegate.selectRootElement(t, e),
            s = ll();
          return s && jo(new No(n, null, s)), n;
        }
        setAttribute(t, e, n, s) {
          const i = Lo(t);
          i && i instanceof No && (i.attributes[s ? s + ':' + e : e] = n), this.delegate.setAttribute(t, e, n, s);
        }
        removeAttribute(t, e, n) {
          const s = Lo(t);
          s && s instanceof No && (s.attributes[n ? n + ':' + e : e] = null), this.delegate.removeAttribute(t, e, n);
        }
        addClass(t, e) {
          const n = Lo(t);
          n && n instanceof No && (n.classes[e] = !0), this.delegate.addClass(t, e);
        }
        removeClass(t, e) {
          const n = Lo(t);
          n && n instanceof No && (n.classes[e] = !1), this.delegate.removeClass(t, e);
        }
        setStyle(t, e, n, s) {
          const i = Lo(t);
          i && i instanceof No && (i.styles[e] = n), this.delegate.setStyle(t, e, n, s);
        }
        removeStyle(t, e, n) {
          const s = Lo(t);
          s && s instanceof No && (s.styles[e] = null), this.delegate.removeStyle(t, e, n);
        }
        setProperty(t, e, n) {
          const s = Lo(t);
          s && s instanceof No && (s.properties[e] = n), this.delegate.setProperty(t, e, n);
        }
        listen(t, e, n) {
          if ('string' != typeof t) {
            const s = Lo(t);
            s && s.listeners.push(new Ro(e, n));
          }
          return this.delegate.listen(t, e, n);
        }
        parentNode(t) {
          return this.delegate.parentNode(t);
        }
        nextSibling(t) {
          return this.delegate.nextSibling(t);
        }
        setValue(t, e) {
          return this.delegate.setValue(t, e);
        }
      }
      function ul(t, e, n) {
        return new dl(t, e, n);
      }
      class dl extends q {
        constructor(t, e, n) {
          super(), (this.moduleType = t), (this._bootstrapComponents = e), (this._ngModuleDefFactory = n);
        }
        create(t) {
          !(function() {
            if (Aa) return;
            Aa = !0;
            const t = pe()
              ? {
                  setCurrentNode: Za,
                  createRootView: Oa,
                  createEmbeddedView: Ra,
                  createComponentView: Pa,
                  createNgModuleRef: Na,
                  overrideProvider: Fa,
                  overrideComponentView: Ba,
                  clearOverrides: Va,
                  checkAndUpdateView: $a,
                  checkNoChangesView: qa,
                  destroyView: Wa,
                  createDebugContext: (t, e) => new rl(t, e),
                  handleEvent: Xa,
                  updateDirectives: Ja,
                  updateRenderer: tl
                }
              : {
                  setCurrentNode: () => {},
                  createRootView: Ta,
                  createEmbeddedView: ca,
                  createComponentView: ua,
                  createNgModuleRef: Wi,
                  overrideProvider: Us,
                  overrideComponentView: Us,
                  clearOverrides: Us,
                  checkAndUpdateView: ga,
                  checkNoChangesView: fa,
                  destroyView: wa,
                  createDebugContext: (t, e) => new rl(t, e),
                  handleEvent: (t, e, n, s) => t.def.handleEvent(t, e, n, s),
                  updateDirectives: (t, e) => t.def.updateDirectives(0 === e ? Ha : za, t),
                  updateRenderer: (t, e) => t.def.updateRenderer(0 === e ? Ha : za, t)
                };
            (Vs.setCurrentNode = t.setCurrentNode),
              (Vs.createRootView = t.createRootView),
              (Vs.createEmbeddedView = t.createEmbeddedView),
              (Vs.createComponentView = t.createComponentView),
              (Vs.createNgModuleRef = t.createNgModuleRef),
              (Vs.overrideProvider = t.overrideProvider),
              (Vs.overrideComponentView = t.overrideComponentView),
              (Vs.clearOverrides = t.clearOverrides),
              (Vs.checkAndUpdateView = t.checkAndUpdateView),
              (Vs.checkNoChangesView = t.checkNoChangesView),
              (Vs.destroyView = t.destroyView),
              (Vs.resolveDep = pr),
              (Vs.createDebugContext = t.createDebugContext),
              (Vs.handleEvent = t.handleEvent),
              (Vs.updateDirectives = t.updateDirectives),
              (Vs.updateRenderer = t.updateRenderer),
              (Vs.dirtyParentQueries = Zo);
          })();
          const e = (function(t) {
            const e = Array.from(t.providers),
              n = Array.from(t.modules),
              s = {};
            for (const i in t.providersByKey) s[i] = t.providersByKey[i];
            return { factory: t.factory, isRoot: t.isRoot, providers: e, modules: n, providersByKey: s };
          })(ui(this._ngModuleDefFactory));
          return Vs.createNgModuleRef(this.moduleType, t || fn.NULL, this._bootstrapComponents, e);
        }
      }
    },
    '9ppp': function(t, e, n) {
      'use strict';
      function s() {
        return Error.call(this), (this.message = 'object unsubscribed'), (this.name = 'ObjectUnsubscribedError'), this;
      }
      n.d(e, 'a', function() {
        return i;
      }),
        (s.prototype = Object.create(Error.prototype));
      const i = s;
    },
    'A/Ql': function(t) {
      t.exports = {
        APP_NAME: 'The Incredible',
        About: 'About',
        'Hello world !': 'Hello world !',
        Home: 'Home',
        Version: 'Version'
      };
    },
    AytR: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return s;
      });
      const s = {
        production: !0,
        hmr: !1,
        version: '1.0.0',
        serverUrl: 'https://api.chucknorris.io',
        defaultLanguage: 'en-US',
        supportedLanguages: ['en-US', 'fr-FR']
      };
    },
    Cfvw: function(t, e, n) {
      'use strict';
      var s = n('HDdC'),
        i = n('SeVD'),
        r = n('quSY'),
        o = n('kJWO'),
        a = n('jZKg'),
        l = n('Lhse'),
        c = n('c2HN'),
        h = n('I55L');
      function u(t, e) {
        return e
          ? (function(t, e) {
              if (null != t) {
                if (
                  (function(t) {
                    return t && 'function' == typeof t[o.a];
                  })(t)
                )
                  return (function(t, e) {
                    return new s.a(n => {
                      const s = new r.a();
                      return (
                        s.add(
                          e.schedule(() => {
                            const i = t[o.a]();
                            s.add(
                              i.subscribe({
                                next(t) {
                                  s.add(e.schedule(() => n.next(t)));
                                },
                                error(t) {
                                  s.add(e.schedule(() => n.error(t)));
                                },
                                complete() {
                                  s.add(e.schedule(() => n.complete()));
                                }
                              })
                            );
                          })
                        ),
                        s
                      );
                    });
                  })(t, e);
                if (Object(c.a)(t))
                  return (function(t, e) {
                    return new s.a(n => {
                      const s = new r.a();
                      return (
                        s.add(
                          e.schedule(() =>
                            t.then(
                              t => {
                                s.add(
                                  e.schedule(() => {
                                    n.next(t), s.add(e.schedule(() => n.complete()));
                                  })
                                );
                              },
                              t => {
                                s.add(e.schedule(() => n.error(t)));
                              }
                            )
                          )
                        ),
                        s
                      );
                    });
                  })(t, e);
                if (Object(h.a)(t)) return Object(a.a)(t, e);
                if (
                  (function(t) {
                    return t && 'function' == typeof t[l.a];
                  })(t) ||
                  'string' == typeof t
                )
                  return (function(t, e) {
                    if (!t) throw new Error('Iterable cannot be null');
                    return new s.a(n => {
                      const s = new r.a();
                      let i;
                      return (
                        s.add(() => {
                          i && 'function' == typeof i.return && i.return();
                        }),
                        s.add(
                          e.schedule(() => {
                            (i = t[l.a]()),
                              s.add(
                                e.schedule(function() {
                                  if (n.closed) return;
                                  let t, e;
                                  try {
                                    const r = i.next();
                                    (t = r.value), (e = r.done);
                                  } catch (s) {
                                    return void n.error(s);
                                  }
                                  e ? n.complete() : (n.next(t), this.schedule());
                                })
                              );
                          })
                        ),
                        s
                      );
                    });
                  })(t, e);
              }
              throw new TypeError(((null !== t && typeof t) || t) + ' is not observable');
            })(t, e)
          : t instanceof s.a
          ? t
          : new s.a(Object(i.a)(t));
      }
      n.d(e, 'a', function() {
        return u;
      });
    },
    DH7j: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return s;
      });
      const s = Array.isArray || (t => t && 'number' == typeof t.length);
    },
    HDdC: function(t, e, n) {
      'use strict';
      var s = n('7o/Q'),
        i = n('2QA8'),
        r = n('gRHU'),
        o = n('kJWO'),
        a = n('mCNh'),
        l = n('2fFW');
      n.d(e, 'a', function() {
        return c;
      });
      let c = (() => {
        class t {
          constructor(t) {
            (this._isScalar = !1), t && (this._subscribe = t);
          }
          lift(e) {
            const n = new t();
            return (n.source = this), (n.operator = e), n;
          }
          subscribe(t, e, n) {
            const { operator: o } = this,
              a = (function(t, e, n) {
                if (t) {
                  if (t instanceof s.a) return t;
                  if (t[i.a]) return t[i.a]();
                }
                return t || e || n ? new s.a(t, e, n) : new s.a(r.a);
              })(t, e, n);
            if (
              (a.add(
                o
                  ? o.call(a, this.source)
                  : this.source || (l.a.useDeprecatedSynchronousErrorHandling && !a.syncErrorThrowable)
                  ? this._subscribe(a)
                  : this._trySubscribe(a)
              ),
              l.a.useDeprecatedSynchronousErrorHandling &&
                a.syncErrorThrowable &&
                ((a.syncErrorThrowable = !1), a.syncErrorThrown))
            )
              throw a.syncErrorValue;
            return a;
          }
          _trySubscribe(t) {
            try {
              return this._subscribe(t);
            } catch (e) {
              l.a.useDeprecatedSynchronousErrorHandling && ((t.syncErrorThrown = !0), (t.syncErrorValue = e)),
                (function(t) {
                  for (; t; ) {
                    const { closed: e, destination: n, isStopped: i } = t;
                    if (e || i) return !1;
                    t = n && n instanceof s.a ? n : null;
                  }
                  return !0;
                })(t)
                  ? t.error(e)
                  : console.warn(e);
            }
          }
          forEach(t, e) {
            return new (e = h(e))((e, n) => {
              let s;
              s = this.subscribe(
                e => {
                  try {
                    t(e);
                  } catch (i) {
                    n(i), s && s.unsubscribe();
                  }
                },
                n,
                e
              );
            });
          }
          _subscribe(t) {
            const { source: e } = this;
            return e && e.subscribe(t);
          }
          [o.a]() {
            return this;
          }
          pipe(...t) {
            return 0 === t.length ? this : Object(a.b)(t)(this);
          }
          toPromise(t) {
            return new (t = h(t))((t, e) => {
              let n;
              this.subscribe(t => (n = t), t => e(t), () => t(n));
            });
          }
        }
        return (t.create = e => new t(e)), t;
      })();
      function h(t) {
        if ((t || (t = l.a.Promise || Promise), !t)) throw new Error('no Promise impl found');
        return t;
      }
    },
    I55L: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return s;
      });
      const s = t => t && 'number' == typeof t.length && 'function' != typeof t;
    },
    KqfI: function(t, e, n) {
      'use strict';
      function s() {}
      n.d(e, 'a', function() {
        return s;
      });
    },
    LbVS: function(t, e, n) {
      'use strict';
      function s(t) {
        return t;
      }
      function i() {
        var t = document.querySelectorAll('input');
        return Array.prototype.slice.call(t).map(function(t) {
          return t.value;
        });
      }
      function r(t) {
        var e = document.querySelectorAll('input');
        t &&
          e.length === t.length &&
          (t.forEach(function(t, n) {
            var s = e[n];
            (s.value = t), s.dispatchEvent(new CustomEvent('input', { detail: s.value }));
          }),
          (t.length = 0));
      }
      Object.defineProperty(e, '__esModule', { value: !0 }),
        (e.bootloader = function(t, e, n) {
          'object' == typeof t && ((e = t.before), (n = t.after), (t = t.main)), (e = e || s), (n = n || s);
          var i = document.readyState;
          switch (i) {
            case 'loading':
              document.addEventListener('DOMContentLoaded', function s() {
                document.removeEventListener('DOMContentLoaded', s), n(t(e(i)));
              });
              break;
            case 'interactive':
            case 'complete':
            default:
              n(t(e(i)));
          }
        }),
        (e.createNewHosts = function(t) {
          var e = Array.prototype.map.call(t, function(t) {
            var e = document.createElement(t.tagName),
              n = t.parentNode,
              s = e.style.display;
            return (
              (e.style.display = 'none'),
              n.insertBefore(e, t),
              function() {
                e.style.display = s;
                try {
                  n.removeChild(t);
                } catch (i) {}
              }
            );
          });
          return function() {
            e.forEach(function(t) {
              return t();
            });
          };
        }),
        (e.removeNgStyles = function() {
          var t = document.head,
            e = t.querySelectorAll('style');
          Array.prototype.slice
            .call(e)
            .filter(function(t) {
              return -1 !== t.innerText.indexOf('_ng');
            })
            .map(function(e) {
              return t.removeChild(e);
            });
        }),
        (e.getInputValues = i),
        (e.setInputValues = r),
        (e.createInputTransfer = function() {
          var t = i();
          return function() {
            return r(t);
          };
        });
    },
    Lhse: function(t, e, n) {
      'use strict';
      function s() {
        return 'function' == typeof Symbol && Symbol.iterator ? Symbol.iterator : '@@iterator';
      }
      n.d(e, 'a', function() {
        return i;
      });
      const i = s();
    },
    NJ4a: function(t, e, n) {
      'use strict';
      function s(t) {
        setTimeout(() => {
          throw t;
        }, 0);
      }
      n.d(e, 'a', function() {
        return s;
      });
    },
    PsNa: function(t, e, n) {
      'use strict';
      Object.defineProperty(e, '__esModule', { value: !0 }),
        (e.MODULE_CONFIG = {
          OnInit: 'hmrOnInit',
          OnStatus: 'hmrOnStatus',
          OnCheck: 'hmrOnCheck',
          OnDecline: 'hmrOnDecline',
          OnDestroy: 'hmrOnDestroy',
          AfterDestroy: 'hmrAfterDestroy'
        }),
        (e.hmrModule = function(t, n, s) {
          return (
            void 0 === s && (s = e.MODULE_CONFIG),
            n.hot &&
              (n.hot.accept(),
              t.instance[e.MODULE_CONFIG.OnInit] && n.hot.data && t.instance[e.MODULE_CONFIG.OnInit](n.hot.data),
              t.instance[e.MODULE_CONFIG.OnStatus] &&
                n.hot.apply(function(n) {
                  t.instance[e.MODULE_CONFIG.OnStatus](n);
                }),
              t.instance[e.MODULE_CONFIG.OnCheck] &&
                n.hot.check(function(n, s) {
                  t.instance[e.MODULE_CONFIG.OnCheck](n, s);
                }),
              t.instance[e.MODULE_CONFIG.OnDecline] &&
                n.hot.decline(function(n) {
                  t.instance[e.MODULE_CONFIG.OnDecline](n);
                }),
              n.hot.dispose(function(n) {
                t.instance[e.MODULE_CONFIG.OnDestroy] && t.instance[e.MODULE_CONFIG.OnDestroy](n),
                  t.destroy(),
                  t.instance[e.MODULE_CONFIG.AfterDestroy] && t.instance[e.MODULE_CONFIG.AfterDestroy](n);
              })),
            t
          );
        });
    },
    SVse: function(t, e, n) {
      'use strict';
      n.d(e, 'A', function() {
        return m;
      }),
        n.d(e, 'l', function() {
          return g;
        }),
        n.d(e, 'm', function() {
          return f;
        }),
        n.d(e, 'B', function() {
          return b;
        }),
        n.d(e, 'c', function() {
          return V;
        }),
        n.d(e, 'i', function() {
          return w;
        }),
        n.d(e, 'j', function() {
          return x;
        }),
        n.d(e, 'k', function() {
          return S;
        }),
        n.d(e, 'n', function() {
          return N;
        }),
        n.d(e, 'o', function() {
          return T;
        }),
        n.d(e, 'p', function() {
          return O;
        }),
        n.d(e, 'd', function() {
          return U;
        }),
        n.d(e, 'b', function() {
          return B;
        }),
        n.d(e, 'z', function() {
          return H;
        }),
        n.d(e, 't', function() {
          return $;
        }),
        n.d(e, 'u', function() {
          return q;
        }),
        n.d(e, 's', function() {
          return W;
        }),
        n.d(e, 'w', function() {
          return y;
        }),
        n.d(e, 'v', function() {
          return _;
        }),
        n.d(e, 'y', function() {
          return R;
        }),
        n.d(e, 'x', function() {
          return I;
        }),
        n.d(e, 'r', function() {
          return i;
        }),
        n.d(e, 'f', function() {
          return r;
        }),
        n.d(e, 'h', function() {
          return o;
        }),
        n.d(e, 'a', function() {
          return a;
        }),
        n.d(e, 'e', function() {
          return h;
        }),
        n.d(e, 'q', function() {
          return u;
        }),
        n.d(e, 'g', function() {
          return l;
        });
      var s = n('8Y7J');
      class i {}
      const r = new s.p('Location Initialized');
      class o {}
      const a = new s.p('appBaseHref');
      let l = (() => {
        class t {
          constructor(e, n) {
            (this._subject = new s.m()), (this._urlChangeListeners = []), (this._platformStrategy = e);
            const i = this._platformStrategy.getBaseHref();
            (this._platformLocation = n),
              (this._baseHref = t.stripTrailingSlash(c(i))),
              this._platformStrategy.onPopState(t => {
                this._subject.emit({ url: this.path(!0), pop: !0, state: t.state, type: t.type });
              });
          }
          path(t = !1) {
            return this.normalize(this._platformStrategy.path(t));
          }
          getState() {
            return this._platformLocation.getState();
          }
          isCurrentPathEqualTo(e, n = '') {
            return this.path() == this.normalize(e + t.normalizeQueryParams(n));
          }
          normalize(e) {
            return t.stripTrailingSlash(
              (function(t, e) {
                return t && e.startsWith(t) ? e.substring(t.length) : e;
              })(this._baseHref, c(e))
            );
          }
          prepareExternalUrl(t) {
            return t && '/' !== t[0] && (t = '/' + t), this._platformStrategy.prepareExternalUrl(t);
          }
          go(e, n = '', s = null) {
            this._platformStrategy.pushState(s, '', e, n),
              this._notifyUrlChangeListeners(this.prepareExternalUrl(e + t.normalizeQueryParams(n)), s);
          }
          replaceState(e, n = '', s = null) {
            this._platformStrategy.replaceState(s, '', e, n),
              this._notifyUrlChangeListeners(this.prepareExternalUrl(e + t.normalizeQueryParams(n)), s);
          }
          forward() {
            this._platformStrategy.forward();
          }
          back() {
            this._platformStrategy.back();
          }
          onUrlChange(t) {
            this._urlChangeListeners.push(t),
              this.subscribe(t => {
                this._notifyUrlChangeListeners(t.url, t.state);
              });
          }
          _notifyUrlChangeListeners(t = '', e) {
            this._urlChangeListeners.forEach(n => n(t, e));
          }
          subscribe(t, e, n) {
            return this._subject.subscribe({ next: t, error: e, complete: n });
          }
          static normalizeQueryParams(t) {
            return t && '?' !== t[0] ? '?' + t : t;
          }
          static joinWithSlash(t, e) {
            if (0 == t.length) return e;
            if (0 == e.length) return t;
            let n = 0;
            return (
              t.endsWith('/') && n++,
              e.startsWith('/') && n++,
              2 == n ? t + e.substring(1) : 1 == n ? t + e : t + '/' + e
            );
          }
          static stripTrailingSlash(t) {
            const e = t.match(/#|\?|$/),
              n = (e && e.index) || t.length;
            return t.slice(0, n - ('/' === t[n - 1] ? 1 : 0)) + t.slice(n);
          }
        }
        return t;
      })();
      function c(t) {
        return t.replace(/\/index.html$/, '');
      }
      let h = (() =>
          class extends o {
            constructor(t, e) {
              super(), (this._platformLocation = t), (this._baseHref = ''), null != e && (this._baseHref = e);
            }
            onPopState(t) {
              this._platformLocation.onPopState(t), this._platformLocation.onHashChange(t);
            }
            getBaseHref() {
              return this._baseHref;
            }
            path(t = !1) {
              let e = this._platformLocation.hash;
              return null == e && (e = '#'), e.length > 0 ? e.substring(1) : e;
            }
            prepareExternalUrl(t) {
              const e = l.joinWithSlash(this._baseHref, t);
              return e.length > 0 ? '#' + e : e;
            }
            pushState(t, e, n, s) {
              let i = this.prepareExternalUrl(n + l.normalizeQueryParams(s));
              0 == i.length && (i = this._platformLocation.pathname), this._platformLocation.pushState(t, e, i);
            }
            replaceState(t, e, n, s) {
              let i = this.prepareExternalUrl(n + l.normalizeQueryParams(s));
              0 == i.length && (i = this._platformLocation.pathname), this._platformLocation.replaceState(t, e, i);
            }
            forward() {
              this._platformLocation.forward();
            }
            back() {
              this._platformLocation.back();
            }
          })(),
        u = (() =>
          class extends o {
            constructor(t, e) {
              if (
                (super(),
                (this._platformLocation = t),
                null == e && (e = this._platformLocation.getBaseHrefFromDOM()),
                null == e)
              )
                throw new Error(
                  'No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.'
                );
              this._baseHref = e;
            }
            onPopState(t) {
              this._platformLocation.onPopState(t), this._platformLocation.onHashChange(t);
            }
            getBaseHref() {
              return this._baseHref;
            }
            prepareExternalUrl(t) {
              return l.joinWithSlash(this._baseHref, t);
            }
            path(t = !1) {
              const e = this._platformLocation.pathname + l.normalizeQueryParams(this._platformLocation.search),
                n = this._platformLocation.hash;
              return n && t ? `${e}${n}` : e;
            }
            pushState(t, e, n, s) {
              const i = this.prepareExternalUrl(n + l.normalizeQueryParams(s));
              this._platformLocation.pushState(t, e, i);
            }
            replaceState(t, e, n, s) {
              const i = this.prepareExternalUrl(n + l.normalizeQueryParams(s));
              this._platformLocation.replaceState(t, e, i);
            }
            forward() {
              this._platformLocation.forward();
            }
            back() {
              this._platformLocation.back();
            }
          })();
      const d = (function() {
          var t = { Zero: 0, One: 1, Two: 2, Few: 3, Many: 4, Other: 5 };
          return (
            (t[t.Zero] = 'Zero'),
            (t[t.One] = 'One'),
            (t[t.Two] = 'Two'),
            (t[t.Few] = 'Few'),
            (t[t.Many] = 'Many'),
            (t[t.Other] = 'Other'),
            t
          );
        })(),
        p = s.ub,
        m = new s.p('UseV4Plurals');
      class f {}
      let g = (() =>
        class extends f {
          constructor(t, e) {
            super(), (this.locale = t), (this.deprecatedPluralFn = e);
          }
          getPluralCategory(t, e) {
            switch (this.deprecatedPluralFn ? this.deprecatedPluralFn(e || this.locale, t) : p(e || this.locale)(t)) {
              case d.Zero:
                return 'zero';
              case d.One:
                return 'one';
              case d.Two:
                return 'two';
              case d.Few:
                return 'few';
              case d.Many:
                return 'many';
              default:
                return 'other';
            }
          }
        })();
      function b(t, e) {
        e = encodeURIComponent(e);
        for (const n of t.split(';')) {
          const t = n.indexOf('='),
            [s, i] = -1 == t ? [n, ''] : [n.slice(0, t), n.slice(t + 1)];
          if (s.trim() === e) return decodeURIComponent(i);
        }
        return null;
      }
      class _ {}
      let y = (() =>
          class {
            constructor(t, e, n, s) {
              (this._iterableDiffers = t),
                (this._keyValueDiffers = e),
                (this._ngEl = n),
                (this._renderer = s),
                (this._initialClasses = []);
            }
            getValue() {
              return null;
            }
            setClass(t) {
              this._removeClasses(this._initialClasses),
                (this._initialClasses = 'string' == typeof t ? t.split(/\s+/) : []),
                this._applyClasses(this._initialClasses),
                this._applyClasses(this._rawClass);
            }
            setNgClass(t) {
              this._removeClasses(this._rawClass),
                this._applyClasses(this._initialClasses),
                (this._iterableDiffer = null),
                (this._keyValueDiffer = null),
                (this._rawClass = 'string' == typeof t ? t.split(/\s+/) : t),
                this._rawClass &&
                  (Object(s.wb)(this._rawClass)
                    ? (this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create())
                    : (this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create()));
            }
            applyChanges() {
              if (this._iterableDiffer) {
                const t = this._iterableDiffer.diff(this._rawClass);
                t && this._applyIterableChanges(t);
              } else if (this._keyValueDiffer) {
                const t = this._keyValueDiffer.diff(this._rawClass);
                t && this._applyKeyValueChanges(t);
              }
            }
            _applyKeyValueChanges(t) {
              t.forEachAddedItem(t => this._toggleClass(t.key, t.currentValue)),
                t.forEachChangedItem(t => this._toggleClass(t.key, t.currentValue)),
                t.forEachRemovedItem(t => {
                  t.previousValue && this._toggleClass(t.key, !1);
                });
            }
            _applyIterableChanges(t) {
              t.forEachAddedItem(t => {
                if ('string' != typeof t.item)
                  throw new Error(
                    `NgClass can only toggle CSS classes expressed as strings, got ${Object(s.Hb)(t.item)}`
                  );
                this._toggleClass(t.item, !0);
              }),
                t.forEachRemovedItem(t => this._toggleClass(t.item, !1));
            }
            _applyClasses(t) {
              t &&
                (Array.isArray(t) || t instanceof Set
                  ? t.forEach(t => this._toggleClass(t, !0))
                  : Object.keys(t).forEach(e => this._toggleClass(e, !!t[e])));
            }
            _removeClasses(t) {
              t &&
                (Array.isArray(t) || t instanceof Set
                  ? t.forEach(t => this._toggleClass(t, !1))
                  : Object.keys(t).forEach(t => this._toggleClass(t, !1)));
            }
            _toggleClass(t, e) {
              (t = t.trim()) &&
                t.split(/\s+/g).forEach(t => {
                  e
                    ? this._renderer.addClass(this._ngEl.nativeElement, t)
                    : this._renderer.removeClass(this._ngEl.nativeElement, t);
                });
            }
          })(),
        v = (() => {
          class t {
            constructor(t) {
              this._delegate = t;
            }
            getValue() {
              return this._delegate.getValue();
            }
          }
          return (t.ngDirectiveDef = void 0), t;
        })(),
        w = (() =>
          class extends v {
            constructor(t) {
              super(t);
            }
            set klass(t) {
              this._delegate.setClass(t);
            }
            set ngClass(t) {
              this._delegate.setNgClass(t);
            }
            ngDoCheck() {
              this._delegate.applyChanges();
            }
          })();
      class C {
        constructor(t, e, n, s) {
          (this.$implicit = t), (this.ngForOf = e), (this.index = n), (this.count = s);
        }
        get first() {
          return 0 === this.index;
        }
        get last() {
          return this.index === this.count - 1;
        }
        get even() {
          return this.index % 2 == 0;
        }
        get odd() {
          return !this.even;
        }
      }
      let x = (() =>
        class {
          constructor(t, e, n) {
            (this._viewContainer = t),
              (this._template = e),
              (this._differs = n),
              (this._ngForOfDirty = !0),
              (this._differ = null);
          }
          set ngForOf(t) {
            (this._ngForOf = t), (this._ngForOfDirty = !0);
          }
          set ngForTrackBy(t) {
            Object(s.W)() &&
              null != t &&
              'function' != typeof t &&
              console &&
              console.warn &&
              console.warn(
                `trackBy must be a function, but received ${JSON.stringify(t)}. ` +
                  'See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.'
              ),
              (this._trackByFn = t);
          }
          get ngForTrackBy() {
            return this._trackByFn;
          }
          set ngForTemplate(t) {
            t && (this._template = t);
          }
          ngDoCheck() {
            if (this._ngForOfDirty) {
              this._ngForOfDirty = !1;
              const n = this._ngForOf;
              if (!this._differ && n)
                try {
                  this._differ = this._differs.find(n).create(this.ngForTrackBy);
                } catch (e) {
                  throw new Error(
                    `Cannot find a differ supporting object '${n}' of type '${((t = n),
                    t.name || typeof t)}'. NgFor only supports binding to Iterables such as Arrays.`
                  );
                }
            }
            var t;
            if (this._differ) {
              const t = this._differ.diff(this._ngForOf);
              t && this._applyChanges(t);
            }
          }
          _applyChanges(t) {
            const e = [];
            t.forEachOperation((t, n, s) => {
              if (null == t.previousIndex) {
                const n = this._viewContainer.createEmbeddedView(
                    this._template,
                    new C(null, this._ngForOf, -1, -1),
                    null === s ? void 0 : s
                  ),
                  i = new E(t, n);
                e.push(i);
              } else if (null == s) this._viewContainer.remove(null === n ? void 0 : n);
              else if (null !== n) {
                const i = this._viewContainer.get(n);
                this._viewContainer.move(i, s);
                const r = new E(t, i);
                e.push(r);
              }
            });
            for (let n = 0; n < e.length; n++) this._perViewChange(e[n].view, e[n].record);
            for (let n = 0, s = this._viewContainer.length; n < s; n++) {
              const t = this._viewContainer.get(n);
              (t.context.index = n), (t.context.count = s), (t.context.ngForOf = this._ngForOf);
            }
            t.forEachIdentityChange(t => {
              this._viewContainer.get(t.currentIndex).context.$implicit = t.item;
            });
          }
          _perViewChange(t, e) {
            t.context.$implicit = e.item;
          }
          static ngTemplateContextGuard(t, e) {
            return !0;
          }
        })();
      class E {
        constructor(t, e) {
          (this.record = t), (this.view = e);
        }
      }
      let S = (() =>
        class {
          constructor(t, e) {
            (this._viewContainer = t),
              (this._context = new k()),
              (this._thenTemplateRef = null),
              (this._elseTemplateRef = null),
              (this._thenViewRef = null),
              (this._elseViewRef = null),
              (this._thenTemplateRef = e);
          }
          set ngIf(t) {
            (this._context.$implicit = this._context.ngIf = t), this._updateView();
          }
          set ngIfThen(t) {
            D('ngIfThen', t), (this._thenTemplateRef = t), (this._thenViewRef = null), this._updateView();
          }
          set ngIfElse(t) {
            D('ngIfElse', t), (this._elseTemplateRef = t), (this._elseViewRef = null), this._updateView();
          }
          _updateView() {
            this._context.$implicit
              ? this._thenViewRef ||
                (this._viewContainer.clear(),
                (this._elseViewRef = null),
                this._thenTemplateRef &&
                  (this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context)))
              : this._elseViewRef ||
                (this._viewContainer.clear(),
                (this._thenViewRef = null),
                this._elseTemplateRef &&
                  (this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context)));
          }
        })();
      class k {
        constructor() {
          (this.$implicit = null), (this.ngIf = null);
        }
      }
      function D(t, e) {
        if (e && !e.createEmbeddedView)
          throw new Error(`${t} must be a TemplateRef, but received '${Object(s.Hb)(e)}'.`);
      }
      class A {
        constructor(t, e) {
          (this._viewContainerRef = t), (this._templateRef = e), (this._created = !1);
        }
        create() {
          (this._created = !0), this._viewContainerRef.createEmbeddedView(this._templateRef);
        }
        destroy() {
          (this._created = !1), this._viewContainerRef.clear();
        }
        enforceState(t) {
          t && !this._created ? this.create() : !t && this._created && this.destroy();
        }
      }
      let T = (() =>
          class {
            constructor() {
              (this._defaultUsed = !1),
                (this._caseCount = 0),
                (this._lastCaseCheckIndex = 0),
                (this._lastCasesMatched = !1);
            }
            set ngSwitch(t) {
              (this._ngSwitch = t), 0 === this._caseCount && this._updateDefaultCases(!0);
            }
            _addCase() {
              return this._caseCount++;
            }
            _addDefault(t) {
              this._defaultViews || (this._defaultViews = []), this._defaultViews.push(t);
            }
            _matchCase(t) {
              const e = t == this._ngSwitch;
              return (
                (this._lastCasesMatched = this._lastCasesMatched || e),
                this._lastCaseCheckIndex++,
                this._lastCaseCheckIndex === this._caseCount &&
                  (this._updateDefaultCases(!this._lastCasesMatched),
                  (this._lastCaseCheckIndex = 0),
                  (this._lastCasesMatched = !1)),
                e
              );
            }
            _updateDefaultCases(t) {
              if (this._defaultViews && t !== this._defaultUsed) {
                this._defaultUsed = t;
                for (let e = 0; e < this._defaultViews.length; e++) this._defaultViews[e].enforceState(t);
              }
            }
          })(),
        O = (() =>
          class {
            constructor(t, e, n) {
              (this.ngSwitch = n), n._addCase(), (this._view = new A(t, e));
            }
            ngDoCheck() {
              this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
            }
          })();
      class I {}
      let R = (() =>
          class {
            constructor(t, e, n) {
              (this._ngEl = t), (this._differs = e), (this._renderer = n);
            }
            getValue() {
              return null;
            }
            setNgStyle(t) {
              (this._ngStyle = t), !this._differ && t && (this._differ = this._differs.find(t).create());
            }
            applyChanges() {
              if (this._differ) {
                const t = this._differ.diff(this._ngStyle);
                t && this._applyChanges(t);
              }
            }
            _applyChanges(t) {
              t.forEachRemovedItem(t => this._setStyle(t.key, null)),
                t.forEachAddedItem(t => this._setStyle(t.key, t.currentValue)),
                t.forEachChangedItem(t => this._setStyle(t.key, t.currentValue));
            }
            _setStyle(t, e) {
              const [n, s] = t.split('.');
              null != (e = null != e && s ? `${e}${s}` : e)
                ? this._renderer.setStyle(this._ngEl.nativeElement, n, e)
                : this._renderer.removeStyle(this._ngEl.nativeElement, n);
            }
          })(),
        P = (() => {
          class t {
            constructor(t) {
              this._delegate = t;
            }
            getValue() {
              return this._delegate.getValue();
            }
          }
          return (t.ngDirectiveDef = void 0), t;
        })(),
        N = (() =>
          class extends P {
            constructor(t) {
              super(t);
            }
            set ngStyle(t) {
              this._delegate.setNgStyle(t);
            }
            ngDoCheck() {
              this._delegate.applyChanges();
            }
          })();
      class M {
        createSubscription(t, e) {
          return t.subscribe({
            next: e,
            error: t => {
              throw t;
            }
          });
        }
        dispose(t) {
          t.unsubscribe();
        }
        onDestroy(t) {
          t.unsubscribe();
        }
      }
      class L {
        createSubscription(t, e) {
          return t.then(e, t => {
            throw t;
          });
        }
        dispose(t) {}
        onDestroy(t) {}
      }
      const j = new L(),
        F = new M();
      let B = (() => {
          class t {
            constructor(t) {
              (this._ref = t),
                (this._latestValue = null),
                (this._latestReturnedValue = null),
                (this._subscription = null),
                (this._obj = null),
                (this._strategy = null);
            }
            ngOnDestroy() {
              this._subscription && this._dispose();
            }
            transform(t) {
              return this._obj
                ? t !== this._obj
                  ? (this._dispose(), this.transform(t))
                  : Object(s.zb)(this._latestValue, this._latestReturnedValue)
                  ? this._latestReturnedValue
                  : ((this._latestReturnedValue = this._latestValue), s.Q.wrap(this._latestValue))
                : (t && this._subscribe(t), (this._latestReturnedValue = this._latestValue), this._latestValue);
            }
            _subscribe(t) {
              (this._obj = t),
                (this._strategy = this._selectStrategy(t)),
                (this._subscription = this._strategy.createSubscription(t, e => this._updateLatestValue(t, e)));
            }
            _selectStrategy(e) {
              if (Object(s.yb)(e)) return j;
              if (Object(s.xb)(e)) return F;
              throw ((n = t), Error(`InvalidPipeArgument: '${e}' for pipe '${Object(s.Hb)(n)}'`));
              var n;
            }
            _dispose() {
              this._strategy.dispose(this._subscription),
                (this._latestValue = null),
                (this._latestReturnedValue = null),
                (this._subscription = null),
                (this._obj = null);
            }
            _updateLatestValue(t, e) {
              t === this._obj && ((this._latestValue = e), this._ref.markForCheck());
            }
          }
          return t;
        })(),
        V = (() => class {})();
      const U = new s.p('DocumentToken'),
        H = 'browser',
        z = 'server';
      function $(t) {
        return t === H;
      }
      function q(t) {
        return t === z;
      }
      let W = (() => {
        class t {}
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            token: t,
            providedIn: 'root',
            factory: () => new K(Object(s.Pb)(U), window, Object(s.Pb)(s.l))
          })),
          t
        );
      })();
      class K {
        constructor(t, e, n) {
          (this.document = t), (this.window = e), (this.errorHandler = n), (this.offset = () => [0, 0]);
        }
        setOffset(t) {
          this.offset = Array.isArray(t) ? () => t : t;
        }
        getScrollPosition() {
          return this.supportScrollRestoration() ? [this.window.scrollX, this.window.scrollY] : [0, 0];
        }
        scrollToPosition(t) {
          this.supportScrollRestoration() && this.window.scrollTo(t[0], t[1]);
        }
        scrollToAnchor(t) {
          if (this.supportScrollRestoration()) {
            t =
              this.window.CSS && this.window.CSS.escape
                ? this.window.CSS.escape(t)
                : t.replace(/(\"|\'\ |:|\.|\[|\]|,|=)/g, '\\$1');
            try {
              const n = this.document.querySelector(`#${t}`);
              if (n) return void this.scrollToElement(n);
              const s = this.document.querySelector(`[name='${t}']`);
              if (s) return void this.scrollToElement(s);
            } catch (e) {
              this.errorHandler.handleError(e);
            }
          }
        }
        setHistoryScrollRestoration(t) {
          if (this.supportScrollRestoration()) {
            const e = this.window.history;
            e && e.scrollRestoration && (e.scrollRestoration = t);
          }
        }
        scrollToElement(t) {
          const e = t.getBoundingClientRect(),
            n = e.left + this.window.pageXOffset,
            s = e.top + this.window.pageYOffset,
            i = this.offset();
          this.window.scrollTo(n - i[0], s - i[1]);
        }
        supportScrollRestoration() {
          try {
            return !!this.window && !!this.window.scrollTo;
          } catch (t) {
            return !1;
          }
        }
      }
    },
    SeVD: function(t, e, n) {
      'use strict';
      var s = n('ngJS'),
        i = n('NJ4a'),
        r = n('Lhse'),
        o = n('kJWO'),
        a = n('I55L'),
        l = n('c2HN'),
        c = n('XoHu');
      n.d(e, 'a', function() {
        return h;
      });
      const h = t => {
        if (t && 'function' == typeof t[o.a])
          return (t => e => {
            const n = t[o.a]();
            if ('function' != typeof n.subscribe)
              throw new TypeError('Provided object does not correctly implement Symbol.observable');
            return n.subscribe(e);
          })(t);
        if (Object(a.a)(t)) return Object(s.a)(t);
        if (Object(l.a)(t))
          return (t => e => (
            t
              .then(
                t => {
                  e.closed || (e.next(t), e.complete());
                },
                t => e.error(t)
              )
              .then(null, i.a),
            e
          ))(t);
        if (t && 'function' == typeof t[r.a])
          return (t => e => {
            const n = t[r.a]();
            for (;;) {
              const t = n.next();
              if (t.done) {
                e.complete();
                break;
              }
              if ((e.next(t.value), e.closed)) break;
            }
            return (
              'function' == typeof n.return &&
                e.add(() => {
                  n.return && n.return();
                }),
              e
            );
          })(t);
        {
          const e = Object(c.a)(t) ? 'an invalid object' : `'${t}'`;
          throw new TypeError(
            `You provided ${e} where a stream was expected.` +
              ' You can provide an Observable, Promise, Array, or Iterable.'
          );
        }
      };
    },
    SpAZ: function(t, e, n) {
      'use strict';
      function s(t) {
        return t;
      }
      n.d(e, 'a', function() {
        return s;
      });
    },
    Ss9G: function(t, e, n) {
      'use strict';
      var s = n('8Y7J');
      class i {}
      var r = n('SVse'),
        o = n('z+Ro'),
        a = n('yCtX'),
        l = n('jZKg');
      function c(...t) {
        let e = t[t.length - 1];
        return Object(o.a)(e) ? (t.pop(), Object(l.a)(t, e)) : Object(a.a)(t);
      }
      var h = n('Cfvw'),
        u = n('XNiG'),
        d = n('9ppp');
      class p extends u.a {
        constructor(t) {
          super(), (this._value = t);
        }
        get value() {
          return this.getValue();
        }
        _subscribe(t) {
          const e = super._subscribe(t);
          return e && !e.closed && t.next(this._value), e;
        }
        getValue() {
          if (this.hasError) throw this.thrownError;
          if (this.closed) throw new d.a();
          return this._value;
        }
        next(t) {
          super.next((this._value = t));
        }
      }
      var m = n('HDdC');
      function f() {
        return Error.call(this), (this.message = 'no elements in sequence'), (this.name = 'EmptyError'), this;
      }
      f.prototype = Object.create(Error.prototype);
      const g = f;
      var b = n('DH7j'),
        _ = n('l7GE'),
        y = n('ZUHj');
      const v = {};
      function w(...t) {
        let e = null,
          n = null;
        return (
          Object(o.a)(t[t.length - 1]) && (n = t.pop()),
          'function' == typeof t[t.length - 1] && (e = t.pop()),
          1 === t.length && Object(b.a)(t[0]) && (t = t[0]),
          Object(a.a)(t, n).lift(new C(e))
        );
      }
      class C {
        constructor(t) {
          this.resultSelector = t;
        }
        call(t, e) {
          return e.subscribe(new x(t, this.resultSelector));
        }
      }
      class x extends _.a {
        constructor(t, e) {
          super(t), (this.resultSelector = e), (this.active = 0), (this.values = []), (this.observables = []);
        }
        _next(t) {
          this.values.push(v), this.observables.push(t);
        }
        _complete() {
          const t = this.observables,
            e = t.length;
          if (0 === e) this.destination.complete();
          else {
            (this.active = e), (this.toRespond = e);
            for (let n = 0; n < e; n++) {
              const e = t[n];
              this.add(Object(y.a)(this, e, e, n));
            }
          }
        }
        notifyComplete(t) {
          0 == (this.active -= 1) && this.destination.complete();
        }
        notifyNext(t, e, n, s, i) {
          const r = this.values,
            o = this.toRespond ? (r[n] === v ? --this.toRespond : this.toRespond) : 0;
          (r[n] = e), 0 === o && (this.resultSelector ? this._tryResultSelector(r) : this.destination.next(r.slice()));
        }
        _tryResultSelector(t) {
          let e;
          try {
            e = this.resultSelector.apply(this, t);
          } catch (n) {
            return void this.destination.error(n);
          }
          this.destination.next(e);
        }
      }
      const E = new m.a(t => t.complete());
      function S(t) {
        return t
          ? (function(t) {
              return new m.a(e => t.schedule(() => e.complete()));
            })(t)
          : E;
      }
      function k(t) {
        return new m.a(e => {
          let n;
          try {
            n = t();
          } catch (s) {
            return void e.error(s);
          }
          return (n ? Object(h.a)(n) : S()).subscribe(e);
        });
      }
      var D = n('lJxs'),
        A = n('bHdf');
      function T() {
        return Object(A.a)(1);
      }
      var O = n('7o/Q');
      function I(t, e) {
        return function(n) {
          return n.lift(new R(t, e));
        };
      }
      class R {
        constructor(t, e) {
          (this.predicate = t), (this.thisArg = e);
        }
        call(t, e) {
          return e.subscribe(new P(t, this.predicate, this.thisArg));
        }
      }
      class P extends O.a {
        constructor(t, e, n) {
          super(t), (this.predicate = e), (this.thisArg = n), (this.count = 0);
        }
        _next(t) {
          let e;
          try {
            e = this.predicate.call(this.thisArg, t, this.count++);
          } catch (n) {
            return void this.destination.error(n);
          }
          e && this.destination.next(t);
        }
      }
      function N() {
        return (
          Error.call(this), (this.message = 'argument out of range'), (this.name = 'ArgumentOutOfRangeError'), this
        );
      }
      N.prototype = Object.create(Error.prototype);
      const M = N;
      function L(t) {
        return function(e) {
          return 0 === t ? S() : e.lift(new j(t));
        };
      }
      class j {
        constructor(t) {
          if (((this.total = t), this.total < 0)) throw new M();
        }
        call(t, e) {
          return e.subscribe(new F(t, this.total));
        }
      }
      class F extends O.a {
        constructor(t, e) {
          super(t), (this.total = e), (this.ring = new Array()), (this.count = 0);
        }
        _next(t) {
          const e = this.ring,
            n = this.total,
            s = this.count++;
          e.length < n ? e.push(t) : (e[s % n] = t);
        }
        _complete() {
          const t = this.destination;
          let e = this.count;
          if (e > 0) {
            const n = this.count >= this.total ? this.total : this.count,
              s = this.ring;
            for (let i = 0; i < n; i++) {
              const i = e++ % n;
              t.next(s[i]);
            }
          }
          t.complete();
        }
      }
      function B(
        t = function() {
          return new g();
        }
      ) {
        return e => e.lift(new V(t));
      }
      class V {
        constructor(t) {
          this.errorFactory = t;
        }
        call(t, e) {
          return e.subscribe(new U(t, this.errorFactory));
        }
      }
      class U extends O.a {
        constructor(t, e) {
          super(t), (this.errorFactory = e), (this.hasValue = !1);
        }
        _next(t) {
          (this.hasValue = !0), this.destination.next(t);
        }
        _complete() {
          if (this.hasValue) return this.destination.complete();
          {
            let e;
            try {
              e = this.errorFactory();
            } catch (t) {
              e = t;
            }
            this.destination.error(e);
          }
        }
      }
      function H(t = null) {
        return e => e.lift(new z(t));
      }
      class z {
        constructor(t) {
          this.defaultValue = t;
        }
        call(t, e) {
          return e.subscribe(new $(t, this.defaultValue));
        }
      }
      class $ extends O.a {
        constructor(t, e) {
          super(t), (this.defaultValue = e), (this.isEmpty = !0);
        }
        _next(t) {
          (this.isEmpty = !1), this.destination.next(t);
        }
        _complete() {
          this.isEmpty && this.destination.next(this.defaultValue), this.destination.complete();
        }
      }
      var q = n('SpAZ');
      function W(t, e) {
        const n = arguments.length >= 2;
        return s =>
          s.pipe(
            t ? I((e, n) => t(e, n, s)) : q.a,
            L(1),
            n ? H(e) : B(() => new g())
          );
      }
      var K = n('51Dv');
      function Y(t) {
        return function(e) {
          const n = new Q(t),
            s = e.lift(n);
          return (n.caught = s);
        };
      }
      class Q {
        constructor(t) {
          this.selector = t;
        }
        call(t, e) {
          return e.subscribe(new G(t, this.selector, this.caught));
        }
      }
      class G extends _.a {
        constructor(t, e, n) {
          super(t), (this.selector = e), (this.caught = n);
        }
        error(t) {
          if (!this.isStopped) {
            let n;
            try {
              n = this.selector(t, this.caught);
            } catch (e) {
              return void super.error(e);
            }
            this._unsubscribeAndRecycle();
            const s = new K.a(this, void 0, void 0);
            this.add(s), Object(y.a)(this, n, void 0, void 0, s);
          }
        }
      }
      function Z(t) {
        return e => (0 === t ? S() : e.lift(new X(t)));
      }
      class X {
        constructor(t) {
          if (((this.total = t), this.total < 0)) throw new M();
        }
        call(t, e) {
          return e.subscribe(new J(t, this.total));
        }
      }
      class J extends O.a {
        constructor(t, e) {
          super(t), (this.total = e), (this.count = 0);
        }
        _next(t) {
          const e = this.total,
            n = ++this.count;
          n <= e && (this.destination.next(t), n === e && (this.destination.complete(), this.unsubscribe()));
        }
      }
      function tt(t, e) {
        const n = arguments.length >= 2;
        return s =>
          s.pipe(
            t ? I((e, n) => t(e, n, s)) : q.a,
            Z(1),
            n ? H(e) : B(() => new g())
          );
      }
      var et = n('5+tZ');
      class nt {
        constructor(t, e, n) {
          (this.predicate = t), (this.thisArg = e), (this.source = n);
        }
        call(t, e) {
          return e.subscribe(new st(t, this.predicate, this.thisArg, this.source));
        }
      }
      class st extends O.a {
        constructor(t, e, n, s) {
          super(t),
            (this.predicate = e),
            (this.thisArg = n),
            (this.source = s),
            (this.index = 0),
            (this.thisArg = n || this);
        }
        notifyComplete(t) {
          this.destination.next(t), this.destination.complete();
        }
        _next(t) {
          let e = !1;
          try {
            e = this.predicate.call(this.thisArg, t, this.index++, this.source);
          } catch (n) {
            return void this.destination.error(n);
          }
          e || this.notifyComplete(!1);
        }
        _complete() {
          this.notifyComplete(!0);
        }
      }
      function it(t, e) {
        return 'function' == typeof e
          ? n => n.pipe(it((n, s) => Object(h.a)(t(n, s)).pipe(Object(D.a)((t, i) => e(n, t, s, i)))))
          : e => e.lift(new rt(t));
      }
      class rt {
        constructor(t) {
          this.project = t;
        }
        call(t, e) {
          return e.subscribe(new ot(t, this.project));
        }
      }
      class ot extends _.a {
        constructor(t, e) {
          super(t), (this.project = e), (this.index = 0);
        }
        _next(t) {
          let e;
          const n = this.index++;
          try {
            e = this.project(t, n);
          } catch (s) {
            return void this.destination.error(s);
          }
          this._innerSub(e, t, n);
        }
        _innerSub(t, e, n) {
          const s = this.innerSubscription;
          s && s.unsubscribe();
          const i = new K.a(this, void 0, void 0);
          this.destination.add(i), (this.innerSubscription = Object(y.a)(this, t, e, n, i));
        }
        _complete() {
          const { innerSubscription: t } = this;
          (t && !t.closed) || super._complete(), this.unsubscribe();
        }
        _unsubscribe() {
          this.innerSubscription = null;
        }
        notifyComplete(t) {
          this.destination.remove(t), (this.innerSubscription = null), this.isStopped && super._complete();
        }
        notifyNext(t, e, n, s, i) {
          this.destination.next(e);
        }
      }
      function at(...t) {
        return T()(c(...t));
      }
      function lt(...t) {
        const e = t[t.length - 1];
        return Object(o.a)(e) ? (t.pop(), n => at(t, n, e)) : e => at(t, e);
      }
      function ct(t, e) {
        let n = !1;
        return (
          arguments.length >= 2 && (n = !0),
          function(s) {
            return s.lift(new ht(t, e, n));
          }
        );
      }
      class ht {
        constructor(t, e, n = !1) {
          (this.accumulator = t), (this.seed = e), (this.hasSeed = n);
        }
        call(t, e) {
          return e.subscribe(new ut(t, this.accumulator, this.seed, this.hasSeed));
        }
      }
      class ut extends O.a {
        constructor(t, e, n, s) {
          super(t), (this.accumulator = e), (this._seed = n), (this.hasSeed = s), (this.index = 0);
        }
        get seed() {
          return this._seed;
        }
        set seed(t) {
          (this.hasSeed = !0), (this._seed = t);
        }
        _next(t) {
          if (this.hasSeed) return this._tryNext(t);
          (this.seed = t), this.destination.next(t);
        }
        _tryNext(t) {
          const e = this.index++;
          let n;
          try {
            n = this.accumulator(this.seed, t, e);
          } catch (s) {
            this.destination.error(s);
          }
          (this.seed = n), this.destination.next(n);
        }
      }
      function dt(t, e) {
        return Object(et.a)(t, e, 1);
      }
      var pt = n('mCNh');
      function mt(t, e) {
        return arguments.length >= 2
          ? function(n) {
              return Object(pt.a)(ct(t, e), L(1), H(e))(n);
            }
          : function(e) {
              return Object(pt.a)(ct((e, n, s) => t(e, n, s + 1)), L(1))(e);
            };
      }
      var ft = n('KqfI'),
        gt = n('n6bG');
      function bt(t, e, n) {
        return function(s) {
          return s.lift(new _t(t, e, n));
        };
      }
      class _t {
        constructor(t, e, n) {
          (this.nextOrObserver = t), (this.error = e), (this.complete = n);
        }
        call(t, e) {
          return e.subscribe(new yt(t, this.nextOrObserver, this.error, this.complete));
        }
      }
      class yt extends O.a {
        constructor(t, e, n, s) {
          super(t),
            (this._tapNext = ft.a),
            (this._tapError = ft.a),
            (this._tapComplete = ft.a),
            (this._tapError = n || ft.a),
            (this._tapComplete = s || ft.a),
            Object(gt.a)(e)
              ? ((this._context = this), (this._tapNext = e))
              : e &&
                ((this._context = e),
                (this._tapNext = e.next || ft.a),
                (this._tapError = e.error || ft.a),
                (this._tapComplete = e.complete || ft.a));
        }
        _next(t) {
          try {
            this._tapNext.call(this._context, t);
          } catch (e) {
            return void this.destination.error(e);
          }
          this.destination.next(t);
        }
        _error(t) {
          try {
            this._tapError.call(this._context, t);
          } catch (t) {
            return void this.destination.error(t);
          }
          this.destination.error(t);
        }
        _complete() {
          try {
            this._tapComplete.call(this._context);
          } catch (t) {
            return void this.destination.error(t);
          }
          return this.destination.complete();
        }
      }
      var vt = n('quSY');
      function wt(t) {
        return e => e.lift(new Ct(t));
      }
      class Ct {
        constructor(t) {
          this.callback = t;
        }
        call(t, e) {
          return e.subscribe(new xt(t, this.callback));
        }
      }
      class xt extends O.a {
        constructor(t, e) {
          super(t), this.add(new vt.a(e));
        }
      }
      var Et = n('cUpR');
      class St {
        constructor(t, e) {
          (this.id = t), (this.url = e);
        }
      }
      class kt extends St {
        constructor(t, e, n = 'imperative', s = null) {
          super(t, e), (this.navigationTrigger = n), (this.restoredState = s);
        }
        toString() {
          return `NavigationStart(id: ${this.id}, url: '${this.url}')`;
        }
      }
      class Dt extends St {
        constructor(t, e, n) {
          super(t, e), (this.urlAfterRedirects = n);
        }
        toString() {
          return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;
        }
      }
      class At extends St {
        constructor(t, e, n) {
          super(t, e), (this.reason = n);
        }
        toString() {
          return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;
        }
      }
      class Tt extends St {
        constructor(t, e, n) {
          super(t, e), (this.error = n);
        }
        toString() {
          return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;
        }
      }
      class Ot extends St {
        constructor(t, e, n, s) {
          super(t, e), (this.urlAfterRedirects = n), (this.state = s);
        }
        toString() {
          return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
        }
      }
      class It extends St {
        constructor(t, e, n, s) {
          super(t, e), (this.urlAfterRedirects = n), (this.state = s);
        }
        toString() {
          return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
        }
      }
      class Rt extends St {
        constructor(t, e, n, s, i) {
          super(t, e), (this.urlAfterRedirects = n), (this.state = s), (this.shouldActivate = i);
        }
        toString() {
          return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;
        }
      }
      class Pt extends St {
        constructor(t, e, n, s) {
          super(t, e), (this.urlAfterRedirects = n), (this.state = s);
        }
        toString() {
          return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
        }
      }
      class Nt extends St {
        constructor(t, e, n, s) {
          super(t, e), (this.urlAfterRedirects = n), (this.state = s);
        }
        toString() {
          return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
        }
      }
      class Mt {
        constructor(t) {
          this.route = t;
        }
        toString() {
          return `RouteConfigLoadStart(path: ${this.route.path})`;
        }
      }
      class Lt {
        constructor(t) {
          this.route = t;
        }
        toString() {
          return `RouteConfigLoadEnd(path: ${this.route.path})`;
        }
      }
      class jt {
        constructor(t) {
          this.snapshot = t;
        }
        toString() {
          return `ChildActivationStart(path: '${(this.snapshot.routeConfig && this.snapshot.routeConfig.path) || ''}')`;
        }
      }
      class Ft {
        constructor(t) {
          this.snapshot = t;
        }
        toString() {
          return `ChildActivationEnd(path: '${(this.snapshot.routeConfig && this.snapshot.routeConfig.path) || ''}')`;
        }
      }
      class Bt {
        constructor(t) {
          this.snapshot = t;
        }
        toString() {
          return `ActivationStart(path: '${(this.snapshot.routeConfig && this.snapshot.routeConfig.path) || ''}')`;
        }
      }
      class Vt {
        constructor(t) {
          this.snapshot = t;
        }
        toString() {
          return `ActivationEnd(path: '${(this.snapshot.routeConfig && this.snapshot.routeConfig.path) || ''}')`;
        }
      }
      class Ut {
        constructor(t, e, n) {
          (this.routerEvent = t), (this.position = e), (this.anchor = n);
        }
        toString() {
          return `Scroll(anchor: '${this.anchor}', position: '${
            this.position ? `${this.position[0]}, ${this.position[1]}` : null
          }')`;
        }
      }
      let Ht = (() => class {})();
      const zt = 'primary';
      class $t {
        constructor(t) {
          this.params = t || {};
        }
        has(t) {
          return this.params.hasOwnProperty(t);
        }
        get(t) {
          if (this.has(t)) {
            const e = this.params[t];
            return Array.isArray(e) ? e[0] : e;
          }
          return null;
        }
        getAll(t) {
          if (this.has(t)) {
            const e = this.params[t];
            return Array.isArray(e) ? e : [e];
          }
          return [];
        }
        get keys() {
          return Object.keys(this.params);
        }
      }
      function qt(t) {
        return new $t(t);
      }
      const Wt = 'ngNavigationCancelingError';
      function Kt(t) {
        const e = Error('NavigationCancelingError: ' + t);
        return (e[Wt] = !0), e;
      }
      function Yt(t, e, n) {
        const s = n.path.split('/');
        if (s.length > t.length) return null;
        if ('full' === n.pathMatch && (e.hasChildren() || s.length < t.length)) return null;
        const i = {};
        for (let r = 0; r < s.length; r++) {
          const e = s[r],
            n = t[r];
          if (e.startsWith(':')) i[e.substring(1)] = n;
          else if (e !== n.path) return null;
        }
        return { consumed: t.slice(0, s.length), posParams: i };
      }
      class Qt {
        constructor(t, e) {
          (this.routes = t), (this.module = e);
        }
      }
      function Gt(t, e = '') {
        for (let n = 0; n < t.length; n++) {
          const s = t[n];
          Zt(s, Xt(e, s));
        }
      }
      function Zt(t, e) {
        if (!t)
          throw new Error(
            `\n      Invalid configuration of route '${e}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `
          );
        if (Array.isArray(t)) throw new Error(`Invalid configuration of route '${e}': Array cannot be specified`);
        if (!t.component && !t.children && !t.loadChildren && t.outlet && t.outlet !== zt)
          throw new Error(
            `Invalid configuration of route '${e}': a componentless route without children or loadChildren cannot have a named outlet set`
          );
        if (t.redirectTo && t.children)
          throw new Error(`Invalid configuration of route '${e}': redirectTo and children cannot be used together`);
        if (t.redirectTo && t.loadChildren)
          throw new Error(`Invalid configuration of route '${e}': redirectTo and loadChildren cannot be used together`);
        if (t.children && t.loadChildren)
          throw new Error(`Invalid configuration of route '${e}': children and loadChildren cannot be used together`);
        if (t.redirectTo && t.component)
          throw new Error(`Invalid configuration of route '${e}': redirectTo and component cannot be used together`);
        if (t.path && t.matcher)
          throw new Error(`Invalid configuration of route '${e}': path and matcher cannot be used together`);
        if (void 0 === t.redirectTo && !t.component && !t.children && !t.loadChildren)
          throw new Error(
            `Invalid configuration of route '${e}'. One of the following must be provided: component, redirectTo, children or loadChildren`
          );
        if (void 0 === t.path && void 0 === t.matcher)
          throw new Error(
            `Invalid configuration of route '${e}': routes must have either a path or a matcher specified`
          );
        if ('string' == typeof t.path && '/' === t.path.charAt(0))
          throw new Error(`Invalid configuration of route '${e}': path cannot start with a slash`);
        if ('' === t.path && void 0 !== t.redirectTo && void 0 === t.pathMatch)
          throw new Error(
            `Invalid configuration of route '{path: "${e}", redirectTo: "${t.redirectTo}"}': please provide 'pathMatch'. The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`
          );
        if (void 0 !== t.pathMatch && 'full' !== t.pathMatch && 'prefix' !== t.pathMatch)
          throw new Error(`Invalid configuration of route '${e}': pathMatch can only be set to 'prefix' or 'full'`);
        t.children && Gt(t.children, e);
      }
      function Xt(t, e) {
        return e ? (t || e.path ? (t && !e.path ? `${t}/` : !t && e.path ? e.path : `${t}/${e.path}`) : '') : t;
      }
      function Jt(t) {
        const e = t.children && t.children.map(Jt),
          n = e ? Object.assign({}, t, { children: e }) : Object.assign({}, t);
        return !n.component && (e || n.loadChildren) && n.outlet && n.outlet !== zt && (n.component = Ht), n;
      }
      function te(t, e) {
        const n = Object.keys(t),
          s = Object.keys(e);
        if (!n || !s || n.length != s.length) return !1;
        let i;
        for (let r = 0; r < n.length; r++) if (t[(i = n[r])] !== e[i]) return !1;
        return !0;
      }
      function ee(t) {
        return Array.prototype.concat.apply([], t);
      }
      function ne(t) {
        return t.length > 0 ? t[t.length - 1] : null;
      }
      function se(t, e) {
        for (const n in t) t.hasOwnProperty(n) && e(t[n], n);
      }
      function ie(t) {
        return Object(s.xb)(t) ? t : Object(s.yb)(t) ? Object(h.a)(Promise.resolve(t)) : c(t);
      }
      function re(t, e, n) {
        return n
          ? (function(t, e) {
              return te(t, e);
            })(t.queryParams, e.queryParams) &&
              (function t(e, n) {
                if (!ce(e.segments, n.segments)) return !1;
                if (e.numberOfChildren !== n.numberOfChildren) return !1;
                for (const s in n.children) {
                  if (!e.children[s]) return !1;
                  if (!t(e.children[s], n.children[s])) return !1;
                }
                return !0;
              })(t.root, e.root)
          : (function(t, e) {
              return Object.keys(e).length <= Object.keys(t).length && Object.keys(e).every(n => e[n] === t[n]);
            })(t.queryParams, e.queryParams) &&
              (function t(e, n) {
                return (function e(n, s, i) {
                  if (n.segments.length > i.length) {
                    return !!ce(n.segments.slice(0, i.length), i) && !s.hasChildren();
                  }
                  if (n.segments.length === i.length) {
                    if (!ce(n.segments, i)) return !1;
                    for (const e in s.children) {
                      if (!n.children[e]) return !1;
                      if (!t(n.children[e], s.children[e])) return !1;
                    }
                    return !0;
                  }
                  {
                    const t = i.slice(0, n.segments.length),
                      r = i.slice(n.segments.length);
                    return !!ce(n.segments, t) && !!n.children[zt] && e(n.children[zt], s, r);
                  }
                })(e, n, n.segments);
              })(t.root, e.root);
      }
      class oe {
        constructor(t, e, n) {
          (this.root = t), (this.queryParams = e), (this.fragment = n);
        }
        get queryParamMap() {
          return this._queryParamMap || (this._queryParamMap = qt(this.queryParams)), this._queryParamMap;
        }
        toString() {
          return pe.serialize(this);
        }
      }
      class ae {
        constructor(t, e) {
          (this.segments = t), (this.children = e), (this.parent = null), se(e, (t, e) => (t.parent = this));
        }
        hasChildren() {
          return this.numberOfChildren > 0;
        }
        get numberOfChildren() {
          return Object.keys(this.children).length;
        }
        toString() {
          return me(this);
        }
      }
      class le {
        constructor(t, e) {
          (this.path = t), (this.parameters = e);
        }
        get parameterMap() {
          return this._parameterMap || (this._parameterMap = qt(this.parameters)), this._parameterMap;
        }
        toString() {
          return ve(this);
        }
      }
      function ce(t, e) {
        return t.length === e.length && t.every((t, n) => t.path === e[n].path);
      }
      function he(t, e) {
        let n = [];
        return (
          se(t.children, (t, s) => {
            s === zt && (n = n.concat(e(t, s)));
          }),
          se(t.children, (t, s) => {
            s !== zt && (n = n.concat(e(t, s)));
          }),
          n
        );
      }
      class ue {}
      class de {
        parse(t) {
          const e = new Se(t);
          return new oe(e.parseRootSegment(), e.parseQueryParams(), e.parseFragment());
        }
        serialize(t) {
          var e;
          return `${`/${(function t(e, n) {
            if (!e.hasChildren()) return me(e);
            if (n) {
              const n = e.children[zt] ? t(e.children[zt], !1) : '',
                s = [];
              return (
                se(e.children, (e, n) => {
                  n !== zt && s.push(`${n}:${t(e, !1)}`);
                }),
                s.length > 0 ? `${n}(${s.join('//')})` : n
              );
            }
            {
              const n = he(e, (n, s) => (s === zt ? [t(e.children[zt], !1)] : [`${s}:${t(n, !1)}`]));
              return `${me(e)}/(${n.join('//')})`;
            }
          })(t.root, !0)}`}${(function(t) {
            const e = Object.keys(t).map(e => {
              const n = t[e];
              return Array.isArray(n) ? n.map(t => `${ge(e)}=${ge(t)}`).join('&') : `${ge(e)}=${ge(n)}`;
            });
            return e.length ? `?${e.join('&')}` : '';
          })(t.queryParams)}${'string' == typeof t.fragment ? `#${((e = t.fragment), encodeURI(e))}` : ''}`;
        }
      }
      const pe = new de();
      function me(t) {
        return t.segments.map(t => ve(t)).join('/');
      }
      function fe(t) {
        return encodeURIComponent(t)
          .replace(/%40/g, '@')
          .replace(/%3A/gi, ':')
          .replace(/%24/g, '$')
          .replace(/%2C/gi, ',');
      }
      function ge(t) {
        return fe(t).replace(/%3B/gi, ';');
      }
      function be(t) {
        return fe(t)
          .replace(/\(/g, '%28')
          .replace(/\)/g, '%29')
          .replace(/%26/gi, '&');
      }
      function _e(t) {
        return decodeURIComponent(t);
      }
      function ye(t) {
        return _e(t.replace(/\+/g, '%20'));
      }
      function ve(t) {
        return `${be(t.path)}${((e = t.parameters),
        Object.keys(e)
          .map(t => `;${be(t)}=${be(e[t])}`)
          .join(''))}`;
        var e;
      }
      const we = /^[^\/()?;=#]+/;
      function Ce(t) {
        const e = t.match(we);
        return e ? e[0] : '';
      }
      const xe = /^[^=?&#]+/,
        Ee = /^[^?&#]+/;
      class Se {
        constructor(t) {
          (this.url = t), (this.remaining = t);
        }
        parseRootSegment() {
          return (
            this.consumeOptional('/'),
            '' === this.remaining || this.peekStartsWith('?') || this.peekStartsWith('#')
              ? new ae([], {})
              : new ae([], this.parseChildren())
          );
        }
        parseQueryParams() {
          const t = {};
          if (this.consumeOptional('?'))
            do {
              this.parseQueryParam(t);
            } while (this.consumeOptional('&'));
          return t;
        }
        parseFragment() {
          return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;
        }
        parseChildren() {
          if ('' === this.remaining) return {};
          this.consumeOptional('/');
          const t = [];
          for (
            this.peekStartsWith('(') || t.push(this.parseSegment());
            this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(');

          )
            this.capture('/'), t.push(this.parseSegment());
          let e = {};
          this.peekStartsWith('/(') && (this.capture('/'), (e = this.parseParens(!0)));
          let n = {};
          return (
            this.peekStartsWith('(') && (n = this.parseParens(!1)),
            (t.length > 0 || Object.keys(e).length > 0) && (n[zt] = new ae(t, e)),
            n
          );
        }
        parseSegment() {
          const t = Ce(this.remaining);
          if ('' === t && this.peekStartsWith(';'))
            throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);
          return this.capture(t), new le(_e(t), this.parseMatrixParams());
        }
        parseMatrixParams() {
          const t = {};
          for (; this.consumeOptional(';'); ) this.parseParam(t);
          return t;
        }
        parseParam(t) {
          const e = Ce(this.remaining);
          if (!e) return;
          this.capture(e);
          let n = '';
          if (this.consumeOptional('=')) {
            const t = Ce(this.remaining);
            t && this.capture((n = t));
          }
          t[_e(e)] = _e(n);
        }
        parseQueryParam(t) {
          const e = (function(t) {
            const e = t.match(xe);
            return e ? e[0] : '';
          })(this.remaining);
          if (!e) return;
          this.capture(e);
          let n = '';
          if (this.consumeOptional('=')) {
            const t = (function(t) {
              const e = t.match(Ee);
              return e ? e[0] : '';
            })(this.remaining);
            t && this.capture((n = t));
          }
          const s = ye(e),
            i = ye(n);
          if (t.hasOwnProperty(s)) {
            let e = t[s];
            Array.isArray(e) || (t[s] = e = [e]), e.push(i);
          } else t[s] = i;
        }
        parseParens(t) {
          const e = {};
          for (this.capture('('); !this.consumeOptional(')') && this.remaining.length > 0; ) {
            const n = Ce(this.remaining),
              s = this.remaining[n.length];
            if ('/' !== s && ')' !== s && ';' !== s) throw new Error(`Cannot parse url '${this.url}'`);
            let i = void 0;
            n.indexOf(':') > -1
              ? ((i = n.substr(0, n.indexOf(':'))), this.capture(i), this.capture(':'))
              : t && (i = zt);
            const r = this.parseChildren();
            (e[i] = 1 === Object.keys(r).length ? r[zt] : new ae([], r)), this.consumeOptional('//');
          }
          return e;
        }
        peekStartsWith(t) {
          return this.remaining.startsWith(t);
        }
        consumeOptional(t) {
          return !!this.peekStartsWith(t) && ((this.remaining = this.remaining.substring(t.length)), !0);
        }
        capture(t) {
          if (!this.consumeOptional(t)) throw new Error(`Expected "${t}".`);
        }
      }
      class ke {
        constructor(t) {
          this._root = t;
        }
        get root() {
          return this._root.value;
        }
        parent(t) {
          const e = this.pathFromRoot(t);
          return e.length > 1 ? e[e.length - 2] : null;
        }
        children(t) {
          const e = De(t, this._root);
          return e ? e.children.map(t => t.value) : [];
        }
        firstChild(t) {
          const e = De(t, this._root);
          return e && e.children.length > 0 ? e.children[0].value : null;
        }
        siblings(t) {
          const e = Ae(t, this._root);
          return e.length < 2 ? [] : e[e.length - 2].children.map(t => t.value).filter(e => e !== t);
        }
        pathFromRoot(t) {
          return Ae(t, this._root).map(t => t.value);
        }
      }
      function De(t, e) {
        if (t === e.value) return e;
        for (const n of e.children) {
          const e = De(t, n);
          if (e) return e;
        }
        return null;
      }
      function Ae(t, e) {
        if (t === e.value) return [e];
        for (const n of e.children) {
          const s = Ae(t, n);
          if (s.length) return s.unshift(e), s;
        }
        return [];
      }
      class Te {
        constructor(t, e) {
          (this.value = t), (this.children = e);
        }
        toString() {
          return `TreeNode(${this.value})`;
        }
      }
      function Oe(t) {
        const e = {};
        return t && t.children.forEach(t => (e[t.value.outlet] = t)), e;
      }
      class Ie extends ke {
        constructor(t, e) {
          super(t), (this.snapshot = e), je(this, t);
        }
        toString() {
          return this.snapshot.toString();
        }
      }
      function Re(t, e) {
        const n = (function(t, e) {
            const n = new Me([], {}, {}, '', {}, zt, e, null, t.root, -1, {});
            return new Le('', new Te(n, []));
          })(t, e),
          s = new p([new le('', {})]),
          i = new p({}),
          r = new p({}),
          o = new p({}),
          a = new p(''),
          l = new Pe(s, i, o, a, r, zt, e, n.root);
        return (l.snapshot = n.root), new Ie(new Te(l, []), n);
      }
      class Pe {
        constructor(t, e, n, s, i, r, o, a) {
          (this.url = t),
            (this.params = e),
            (this.queryParams = n),
            (this.fragment = s),
            (this.data = i),
            (this.outlet = r),
            (this.component = o),
            (this._futureSnapshot = a);
        }
        get routeConfig() {
          return this._futureSnapshot.routeConfig;
        }
        get root() {
          return this._routerState.root;
        }
        get parent() {
          return this._routerState.parent(this);
        }
        get firstChild() {
          return this._routerState.firstChild(this);
        }
        get children() {
          return this._routerState.children(this);
        }
        get pathFromRoot() {
          return this._routerState.pathFromRoot(this);
        }
        get paramMap() {
          return this._paramMap || (this._paramMap = this.params.pipe(Object(D.a)(t => qt(t)))), this._paramMap;
        }
        get queryParamMap() {
          return (
            this._queryParamMap || (this._queryParamMap = this.queryParams.pipe(Object(D.a)(t => qt(t)))),
            this._queryParamMap
          );
        }
        toString() {
          return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;
        }
      }
      function Ne(t, e = 'emptyOnly') {
        const n = t.pathFromRoot;
        let s = 0;
        if ('always' !== e)
          for (s = n.length - 1; s >= 1; ) {
            const t = n[s],
              e = n[s - 1];
            if (t.routeConfig && '' === t.routeConfig.path) s--;
            else {
              if (e.component) break;
              s--;
            }
          }
        return (function(t) {
          return t.reduce(
            (t, e) => ({
              params: Object.assign({}, t.params, e.params),
              data: Object.assign({}, t.data, e.data),
              resolve: Object.assign({}, t.resolve, e._resolvedData)
            }),
            { params: {}, data: {}, resolve: {} }
          );
        })(n.slice(s));
      }
      class Me {
        constructor(t, e, n, s, i, r, o, a, l, c, h) {
          (this.url = t),
            (this.params = e),
            (this.queryParams = n),
            (this.fragment = s),
            (this.data = i),
            (this.outlet = r),
            (this.component = o),
            (this.routeConfig = a),
            (this._urlSegment = l),
            (this._lastPathIndex = c),
            (this._resolve = h);
        }
        get root() {
          return this._routerState.root;
        }
        get parent() {
          return this._routerState.parent(this);
        }
        get firstChild() {
          return this._routerState.firstChild(this);
        }
        get children() {
          return this._routerState.children(this);
        }
        get pathFromRoot() {
          return this._routerState.pathFromRoot(this);
        }
        get paramMap() {
          return this._paramMap || (this._paramMap = qt(this.params)), this._paramMap;
        }
        get queryParamMap() {
          return this._queryParamMap || (this._queryParamMap = qt(this.queryParams)), this._queryParamMap;
        }
        toString() {
          return `Route(url:'${this.url.map(t => t.toString()).join('/')}', path:'${
            this.routeConfig ? this.routeConfig.path : ''
          }')`;
        }
      }
      class Le extends ke {
        constructor(t, e) {
          super(e), (this.url = t), je(this, e);
        }
        toString() {
          return Fe(this._root);
        }
      }
      function je(t, e) {
        (e.value._routerState = t), e.children.forEach(e => je(t, e));
      }
      function Fe(t) {
        const e = t.children.length > 0 ? ` { ${t.children.map(Fe).join(', ')} } ` : '';
        return `${t.value}${e}`;
      }
      function Be(t) {
        if (t.snapshot) {
          const e = t.snapshot,
            n = t._futureSnapshot;
          (t.snapshot = n),
            te(e.queryParams, n.queryParams) || t.queryParams.next(n.queryParams),
            e.fragment !== n.fragment && t.fragment.next(n.fragment),
            te(e.params, n.params) || t.params.next(n.params),
            (function(t, e) {
              if (t.length !== e.length) return !1;
              for (let n = 0; n < t.length; ++n) if (!te(t[n], e[n])) return !1;
              return !0;
            })(e.url, n.url) || t.url.next(n.url),
            te(e.data, n.data) || t.data.next(n.data);
        } else (t.snapshot = t._futureSnapshot), t.data.next(t._futureSnapshot.data);
      }
      function Ve(t, e) {
        var n, s;
        return (
          te(t.params, e.params) &&
          ce((n = t.url), (s = e.url)) &&
          n.every((t, e) => te(t.parameters, s[e].parameters)) &&
          !(!t.parent != !e.parent) &&
          (!t.parent || Ve(t.parent, e.parent))
        );
      }
      function Ue(t) {
        return 'object' == typeof t && null != t && !t.outlets && !t.segmentPath;
      }
      function He(t, e, n, s, i) {
        let r = {};
        return (
          s &&
            se(s, (t, e) => {
              r[e] = Array.isArray(t) ? t.map(t => `${t}`) : `${t}`;
            }),
          new oe(
            n.root === t
              ? e
              : (function t(e, n, s) {
                  const i = {};
                  return (
                    se(e.children, (e, r) => {
                      i[r] = e === n ? s : t(e, n, s);
                    }),
                    new ae(e.segments, i)
                  );
                })(n.root, t, e),
            r,
            i
          )
        );
      }
      class ze {
        constructor(t, e, n) {
          if (
            ((this.isAbsolute = t), (this.numberOfDoubleDots = e), (this.commands = n), t && n.length > 0 && Ue(n[0]))
          )
            throw new Error('Root segment cannot have matrix parameters');
          const s = n.find(t => 'object' == typeof t && null != t && t.outlets);
          if (s && s !== ne(n)) throw new Error('{outlets:{}} has to be the last command');
        }
        toRoot() {
          return this.isAbsolute && 1 === this.commands.length && '/' == this.commands[0];
        }
      }
      class $e {
        constructor(t, e, n) {
          (this.segmentGroup = t), (this.processChildren = e), (this.index = n);
        }
      }
      function qe(t) {
        return 'object' == typeof t && null != t && t.outlets ? t.outlets[zt] : `${t}`;
      }
      function We(t, e, n) {
        if ((t || (t = new ae([], {})), 0 === t.segments.length && t.hasChildren())) return Ke(t, e, n);
        const s = (function(t, e, n) {
            let s = 0,
              i = e;
            const r = { match: !1, pathIndex: 0, commandIndex: 0 };
            for (; i < t.segments.length; ) {
              if (s >= n.length) return r;
              const e = t.segments[i],
                o = qe(n[s]),
                a = s < n.length - 1 ? n[s + 1] : null;
              if (i > 0 && void 0 === o) break;
              if (o && a && 'object' == typeof a && void 0 === a.outlets) {
                if (!Ze(o, a, e)) return r;
                s += 2;
              } else {
                if (!Ze(o, {}, e)) return r;
                s++;
              }
              i++;
            }
            return { match: !0, pathIndex: i, commandIndex: s };
          })(t, e, n),
          i = n.slice(s.commandIndex);
        if (s.match && s.pathIndex < t.segments.length) {
          const e = new ae(t.segments.slice(0, s.pathIndex), {});
          return (e.children[zt] = new ae(t.segments.slice(s.pathIndex), t.children)), Ke(e, 0, i);
        }
        return s.match && 0 === i.length
          ? new ae(t.segments, {})
          : s.match && !t.hasChildren()
          ? Ye(t, e, n)
          : s.match
          ? Ke(t, 0, i)
          : Ye(t, e, n);
      }
      function Ke(t, e, n) {
        if (0 === n.length) return new ae(t.segments, {});
        {
          const s = (function(t) {
              return 'object' != typeof t[0] ? { [zt]: t } : void 0 === t[0].outlets ? { [zt]: t } : t[0].outlets;
            })(n),
            i = {};
          return (
            se(s, (n, s) => {
              null !== n && (i[s] = We(t.children[s], e, n));
            }),
            se(t.children, (t, e) => {
              void 0 === s[e] && (i[e] = t);
            }),
            new ae(t.segments, i)
          );
        }
      }
      function Ye(t, e, n) {
        const s = t.segments.slice(0, e);
        let i = 0;
        for (; i < n.length; ) {
          if ('object' == typeof n[i] && void 0 !== n[i].outlets) {
            const t = Qe(n[i].outlets);
            return new ae(s, t);
          }
          if (0 === i && Ue(n[0])) {
            s.push(new le(t.segments[e].path, n[0])), i++;
            continue;
          }
          const r = qe(n[i]),
            o = i < n.length - 1 ? n[i + 1] : null;
          r && o && Ue(o) ? (s.push(new le(r, Ge(o))), (i += 2)) : (s.push(new le(r, {})), i++);
        }
        return new ae(s, {});
      }
      function Qe(t) {
        const e = {};
        return (
          se(t, (t, n) => {
            null !== t && (e[n] = Ye(new ae([], {}), 0, t));
          }),
          e
        );
      }
      function Ge(t) {
        const e = {};
        return se(t, (t, n) => (e[n] = `${t}`)), e;
      }
      function Ze(t, e, n) {
        return t == n.path && te(e, n.parameters);
      }
      const Xe = (t, e, n) =>
        Object(D.a)(s => (new Je(e, s.targetRouterState, s.currentRouterState, n).activate(t), s));
      class Je {
        constructor(t, e, n, s) {
          (this.routeReuseStrategy = t), (this.futureState = e), (this.currState = n), (this.forwardEvent = s);
        }
        activate(t) {
          const e = this.futureState._root,
            n = this.currState ? this.currState._root : null;
          this.deactivateChildRoutes(e, n, t), Be(this.futureState.root), this.activateChildRoutes(e, n, t);
        }
        deactivateChildRoutes(t, e, n) {
          const s = Oe(e);
          t.children.forEach(t => {
            const e = t.value.outlet;
            this.deactivateRoutes(t, s[e], n), delete s[e];
          }),
            se(s, (t, e) => {
              this.deactivateRouteAndItsChildren(t, n);
            });
        }
        deactivateRoutes(t, e, n) {
          const s = t.value,
            i = e ? e.value : null;
          if (s === i)
            if (s.component) {
              const i = n.getContext(s.outlet);
              i && this.deactivateChildRoutes(t, e, i.children);
            } else this.deactivateChildRoutes(t, e, n);
          else i && this.deactivateRouteAndItsChildren(e, n);
        }
        deactivateRouteAndItsChildren(t, e) {
          this.routeReuseStrategy.shouldDetach(t.value.snapshot)
            ? this.detachAndStoreRouteSubtree(t, e)
            : this.deactivateRouteAndOutlet(t, e);
        }
        detachAndStoreRouteSubtree(t, e) {
          const n = e.getContext(t.value.outlet);
          if (n && n.outlet) {
            const e = n.outlet.detach(),
              s = n.children.onOutletDeactivated();
            this.routeReuseStrategy.store(t.value.snapshot, { componentRef: e, route: t, contexts: s });
          }
        }
        deactivateRouteAndOutlet(t, e) {
          const n = e.getContext(t.value.outlet);
          if (n) {
            const s = Oe(t),
              i = t.value.component ? n.children : e;
            se(s, (t, e) => this.deactivateRouteAndItsChildren(t, i)),
              n.outlet && (n.outlet.deactivate(), n.children.onOutletDeactivated());
          }
        }
        activateChildRoutes(t, e, n) {
          const s = Oe(e);
          t.children.forEach(t => {
            this.activateRoutes(t, s[t.value.outlet], n), this.forwardEvent(new Vt(t.value.snapshot));
          }),
            t.children.length && this.forwardEvent(new Ft(t.value.snapshot));
        }
        activateRoutes(t, e, n) {
          const s = t.value,
            i = e ? e.value : null;
          if ((Be(s), s === i))
            if (s.component) {
              const i = n.getOrCreateContext(s.outlet);
              this.activateChildRoutes(t, e, i.children);
            } else this.activateChildRoutes(t, e, n);
          else if (s.component) {
            const e = n.getOrCreateContext(s.outlet);
            if (this.routeReuseStrategy.shouldAttach(s.snapshot)) {
              const t = this.routeReuseStrategy.retrieve(s.snapshot);
              this.routeReuseStrategy.store(s.snapshot, null),
                e.children.onOutletReAttached(t.contexts),
                (e.attachRef = t.componentRef),
                (e.route = t.route.value),
                e.outlet && e.outlet.attach(t.componentRef, t.route.value),
                tn(t.route);
            } else {
              const n = (function(t) {
                  for (let e = s.snapshot.parent; e; e = e.parent) {
                    const t = e.routeConfig;
                    if (t && t._loadedConfig) return t._loadedConfig;
                    if (t && t.component) return null;
                  }
                  return null;
                })(),
                i = n ? n.module.componentFactoryResolver : null;
              (e.attachRef = null),
                (e.route = s),
                (e.resolver = i),
                e.outlet && e.outlet.activateWith(s, i),
                this.activateChildRoutes(t, null, e.children);
            }
          } else this.activateChildRoutes(t, null, n);
        }
      }
      function tn(t) {
        Be(t.value), t.children.forEach(tn);
      }
      function en(t) {
        return 'function' == typeof t;
      }
      function nn(t) {
        return t instanceof oe;
      }
      class sn {
        constructor(t) {
          this.segmentGroup = t || null;
        }
      }
      class rn {
        constructor(t) {
          this.urlTree = t;
        }
      }
      function on(t) {
        return new m.a(e => e.error(new sn(t)));
      }
      function an(t) {
        return new m.a(e => e.error(new rn(t)));
      }
      function ln(t) {
        return new m.a(e => e.error(new Error(`Only absolute redirects can have named outlets. redirectTo: '${t}'`)));
      }
      class cn {
        constructor(t, e, n, i, r) {
          (this.configLoader = e),
            (this.urlSerializer = n),
            (this.urlTree = i),
            (this.config = r),
            (this.allowRedirects = !0),
            (this.ngModule = t.get(s.w));
        }
        apply() {
          return this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, zt)
            .pipe(Object(D.a)(t => this.createUrlTree(t, this.urlTree.queryParams, this.urlTree.fragment)))
            .pipe(
              Y(t => {
                if (t instanceof rn) return (this.allowRedirects = !1), this.match(t.urlTree);
                if (t instanceof sn) throw this.noMatchError(t);
                throw t;
              })
            );
        }
        match(t) {
          return this.expandSegmentGroup(this.ngModule, this.config, t.root, zt)
            .pipe(Object(D.a)(e => this.createUrlTree(e, t.queryParams, t.fragment)))
            .pipe(
              Y(t => {
                if (t instanceof sn) throw this.noMatchError(t);
                throw t;
              })
            );
        }
        noMatchError(t) {
          return new Error(`Cannot match any routes. URL Segment: '${t.segmentGroup}'`);
        }
        createUrlTree(t, e, n) {
          const s = t.segments.length > 0 ? new ae([], { [zt]: t }) : t;
          return new oe(s, e, n);
        }
        expandSegmentGroup(t, e, n, s) {
          return 0 === n.segments.length && n.hasChildren()
            ? this.expandChildren(t, e, n).pipe(Object(D.a)(t => new ae([], t)))
            : this.expandSegment(t, n, e, n.segments, s, !0);
        }
        expandChildren(t, e, n) {
          return (function(t, e) {
            if (0 === Object.keys(t).length) return c({});
            const n = [],
              s = [],
              i = {};
            return (
              se(t, (t, r) => {
                const o = e(r, t).pipe(Object(D.a)(t => (i[r] = t)));
                r === zt ? n.push(o) : s.push(o);
              }),
              c.apply(null, n.concat(s)).pipe(
                T(),
                W(),
                Object(D.a)(() => i)
              )
            );
          })(n.children, (n, s) => this.expandSegmentGroup(t, e, s, n));
        }
        expandSegment(t, e, n, s, i, r) {
          return c(...n).pipe(
            Object(D.a)(o =>
              this.expandSegmentAgainstRoute(t, e, n, o, s, i, r).pipe(
                Y(t => {
                  if (t instanceof sn) return c(null);
                  throw t;
                })
              )
            ),
            T(),
            tt(t => !!t),
            Y((t, n) => {
              if (t instanceof g || 'EmptyError' === t.name) {
                if (this.noLeftoversInUrl(e, s, i)) return c(new ae([], {}));
                throw new sn(e);
              }
              throw t;
            })
          );
        }
        noLeftoversInUrl(t, e, n) {
          return 0 === e.length && !t.children[n];
        }
        expandSegmentAgainstRoute(t, e, n, s, i, r, o) {
          return pn(s) !== r
            ? on(e)
            : void 0 === s.redirectTo
            ? this.matchSegmentAgainstRoute(t, e, s, i)
            : o && this.allowRedirects
            ? this.expandSegmentAgainstRouteUsingRedirect(t, e, n, s, i, r)
            : on(e);
        }
        expandSegmentAgainstRouteUsingRedirect(t, e, n, s, i, r) {
          return '**' === s.path
            ? this.expandWildCardWithParamsAgainstRouteUsingRedirect(t, n, s, r)
            : this.expandRegularSegmentAgainstRouteUsingRedirect(t, e, n, s, i, r);
        }
        expandWildCardWithParamsAgainstRouteUsingRedirect(t, e, n, s) {
          const i = this.applyRedirectCommands([], n.redirectTo, {});
          return n.redirectTo.startsWith('/')
            ? an(i)
            : this.lineralizeSegments(n, i).pipe(
                Object(et.a)(n => {
                  const i = new ae(n, {});
                  return this.expandSegment(t, i, e, n, s, !1);
                })
              );
        }
        expandRegularSegmentAgainstRouteUsingRedirect(t, e, n, s, i, r) {
          const { matched: o, consumedSegments: a, lastChild: l, positionalParamSegments: c } = hn(e, s, i);
          if (!o) return on(e);
          const h = this.applyRedirectCommands(a, s.redirectTo, c);
          return s.redirectTo.startsWith('/')
            ? an(h)
            : this.lineralizeSegments(s, h).pipe(
                Object(et.a)(s => this.expandSegment(t, e, n, s.concat(i.slice(l)), r, !1))
              );
        }
        matchSegmentAgainstRoute(t, e, n, s) {
          if ('**' === n.path)
            return n.loadChildren
              ? this.configLoader.load(t.injector, n).pipe(Object(D.a)(t => ((n._loadedConfig = t), new ae(s, {}))))
              : c(new ae(s, {}));
          const { matched: i, consumedSegments: r, lastChild: o } = hn(e, n, s);
          if (!i) return on(e);
          const a = s.slice(o);
          return this.getChildConfig(t, n, s).pipe(
            Object(et.a)(t => {
              const n = t.module,
                s = t.routes,
                { segmentGroup: i, slicedSegments: o } = (function(t, e, n, s) {
                  return n.length > 0 &&
                    (function(t, e, n) {
                      return s.some(n => dn(t, e, n) && pn(n) !== zt);
                    })(t, n)
                    ? {
                        segmentGroup: un(
                          new ae(
                            e,
                            (function(t, e) {
                              const n = {};
                              n[zt] = e;
                              for (const s of t) '' === s.path && pn(s) !== zt && (n[pn(s)] = new ae([], {}));
                              return n;
                            })(s, new ae(n, t.children))
                          )
                        ),
                        slicedSegments: []
                      }
                    : 0 === n.length &&
                      (function(t, e, n) {
                        return s.some(n => dn(t, e, n));
                      })(t, n)
                    ? {
                        segmentGroup: un(
                          new ae(
                            t.segments,
                            (function(t, e, n, s) {
                              const i = {};
                              for (const r of n) dn(t, e, r) && !s[pn(r)] && (i[pn(r)] = new ae([], {}));
                              return Object.assign({}, s, i);
                            })(t, n, s, t.children)
                          )
                        ),
                        slicedSegments: n
                      }
                    : { segmentGroup: t, slicedSegments: n };
                })(e, r, a, s);
              return 0 === o.length && i.hasChildren()
                ? this.expandChildren(n, s, i).pipe(Object(D.a)(t => new ae(r, t)))
                : 0 === s.length && 0 === o.length
                ? c(new ae(r, {}))
                : this.expandSegment(n, i, s, o, zt, !0).pipe(
                    Object(D.a)(t => new ae(r.concat(t.segments), t.children))
                  );
            })
          );
        }
        getChildConfig(t, e, n) {
          return e.children
            ? c(new Qt(e.children, t))
            : e.loadChildren
            ? void 0 !== e._loadedConfig
              ? c(e._loadedConfig)
              : (function(t, e, n) {
                  const s = e.canLoad;
                  return s && 0 !== s.length
                    ? Object(h.a)(s)
                        .pipe(
                          Object(D.a)(s => {
                            const i = t.get(s);
                            let r;
                            if (
                              (function(t) {
                                return t && en(t.canLoad);
                              })(i)
                            )
                              r = i.canLoad(e, n);
                            else {
                              if (!en(i)) throw new Error('Invalid CanLoad guard');
                              r = i(e, n);
                            }
                            return ie(r);
                          })
                        )
                        .pipe(
                          T(),
                          ((i = t => !0 === t), t => t.lift(new nt(i, void 0, t)))
                        )
                    : c(!0);
                  var i;
                })(t.injector, e, n).pipe(
                  Object(et.a)(n =>
                    n
                      ? this.configLoader.load(t.injector, e).pipe(Object(D.a)(t => ((e._loadedConfig = t), t)))
                      : (function(t) {
                          return new m.a(e =>
                            e.error(
                              Kt(
                                `Cannot load children because the guard of the route "path: '${t.path}'" returned false`
                              )
                            )
                          );
                        })(e)
                  )
                )
            : c(new Qt([], t));
        }
        lineralizeSegments(t, e) {
          let n = [],
            s = e.root;
          for (;;) {
            if (((n = n.concat(s.segments)), 0 === s.numberOfChildren)) return c(n);
            if (s.numberOfChildren > 1 || !s.children[zt]) return ln(t.redirectTo);
            s = s.children[zt];
          }
        }
        applyRedirectCommands(t, e, n) {
          return this.applyRedirectCreatreUrlTree(e, this.urlSerializer.parse(e), t, n);
        }
        applyRedirectCreatreUrlTree(t, e, n, s) {
          const i = this.createSegmentGroup(t, e.root, n, s);
          return new oe(i, this.createQueryParams(e.queryParams, this.urlTree.queryParams), e.fragment);
        }
        createQueryParams(t, e) {
          const n = {};
          return (
            se(t, (t, s) => {
              if ('string' == typeof t && t.startsWith(':')) {
                const i = t.substring(1);
                n[s] = e[i];
              } else n[s] = t;
            }),
            n
          );
        }
        createSegmentGroup(t, e, n, s) {
          const i = this.createSegments(t, e.segments, n, s);
          let r = {};
          return (
            se(e.children, (e, i) => {
              r[i] = this.createSegmentGroup(t, e, n, s);
            }),
            new ae(i, r)
          );
        }
        createSegments(t, e, n, s) {
          return e.map(e => (e.path.startsWith(':') ? this.findPosParam(t, e, s) : this.findOrReturn(e, n)));
        }
        findPosParam(t, e, n) {
          const s = n[e.path.substring(1)];
          if (!s) throw new Error(`Cannot redirect to '${t}'. Cannot find '${e.path}'.`);
          return s;
        }
        findOrReturn(t, e) {
          let n = 0;
          for (const s of e) {
            if (s.path === t.path) return e.splice(n), s;
            n++;
          }
          return t;
        }
      }
      function hn(t, e, n) {
        if ('' === e.path)
          return 'full' === e.pathMatch && (t.hasChildren() || n.length > 0)
            ? { matched: !1, consumedSegments: [], lastChild: 0, positionalParamSegments: {} }
            : { matched: !0, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
        const s = (e.matcher || Yt)(n, t, e);
        return s
          ? {
              matched: !0,
              consumedSegments: s.consumed,
              lastChild: s.consumed.length,
              positionalParamSegments: s.posParams
            }
          : { matched: !1, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
      }
      function un(t) {
        if (1 === t.numberOfChildren && t.children[zt]) {
          const e = t.children[zt];
          return new ae(t.segments.concat(e.segments), e.children);
        }
        return t;
      }
      function dn(t, e, n) {
        return (
          (!(t.hasChildren() || e.length > 0) || 'full' !== n.pathMatch) && '' === n.path && void 0 !== n.redirectTo
        );
      }
      function pn(t) {
        return t.outlet || zt;
      }
      class mn {
        constructor(t) {
          (this.path = t), (this.route = this.path[this.path.length - 1]);
        }
      }
      class fn {
        constructor(t, e) {
          (this.component = t), (this.route = e);
        }
      }
      function gn(t, e, n) {
        const s = t._root;
        return (function t(e, n, s, i, r = { canDeactivateChecks: [], canActivateChecks: [] }) {
          const o = Oe(n);
          return (
            e.children.forEach(e => {
              !(function(e, n, s, i, r = { canDeactivateChecks: [], canActivateChecks: [] }) {
                const o = e.value,
                  a = n ? n.value : null,
                  l = s ? s.getContext(e.value.outlet) : null;
                if (a && o.routeConfig === a.routeConfig) {
                  const c = (function(t, e, n) {
                    if ('function' == typeof n) return n(t, e);
                    switch (n) {
                      case 'pathParamsChange':
                        return !ce(t.url, e.url);
                      case 'pathParamsOrQueryParamsChange':
                        return !ce(t.url, e.url) || !te(t.queryParams, e.queryParams);
                      case 'always':
                        return !0;
                      case 'paramsOrQueryParamsChange':
                        return !Ve(t, e) || !te(t.queryParams, e.queryParams);
                      case 'paramsChange':
                      default:
                        return !Ve(t, e);
                    }
                  })(a, o, o.routeConfig.runGuardsAndResolvers);
                  c ? r.canActivateChecks.push(new mn(i)) : ((o.data = a.data), (o._resolvedData = a._resolvedData)),
                    t(e, n, o.component ? (l ? l.children : null) : s, i, r),
                    c && r.canDeactivateChecks.push(new fn((l && l.outlet && l.outlet.component) || null, a));
                } else
                  a && _n(n, l, r),
                    r.canActivateChecks.push(new mn(i)),
                    t(e, null, o.component ? (l ? l.children : null) : s, i, r);
              })(e, o[e.value.outlet], s, i.concat([e.value]), r),
                delete o[e.value.outlet];
            }),
            se(o, (t, e) => _n(t, s.getContext(e), r)),
            r
          );
        })(s, e ? e._root : null, n, [s.value]);
      }
      function bn(t, e, n) {
        const s = (function(t) {
          if (!t) return null;
          for (let e = t.parent; e; e = e.parent) {
            const t = e.routeConfig;
            if (t && t._loadedConfig) return t._loadedConfig;
          }
          return null;
        })(e);
        return (s ? s.module.injector : n).get(t);
      }
      function _n(t, e, n) {
        const s = Oe(t),
          i = t.value;
        se(s, (t, s) => {
          _n(t, i.component ? (e ? e.children.getContext(s) : null) : e, n);
        }),
          n.canDeactivateChecks.push(
            new fn(i.component && e && e.outlet && e.outlet.isActivated ? e.outlet.component : null, i)
          );
      }
      const yn = Symbol('INITIAL_VALUE');
      function vn() {
        return it(t =>
          w(
            ...t.map(t =>
              t.pipe(
                Z(1),
                lt(yn)
              )
            )
          ).pipe(
            ct((t, e) => {
              let n = !1;
              return e.reduce((t, s, i) => {
                if (t !== yn) return t;
                if ((s === yn && (n = !0), !n)) {
                  if (!1 === s) return s;
                  if (i === e.length - 1 || nn(s)) return s;
                }
                return t;
              }, t);
            }, yn),
            I(t => t !== yn),
            Object(D.a)(t => (nn(t) ? t : !0 === t)),
            Z(1)
          )
        );
      }
      function wn(t, e) {
        return null !== t && e && e(new Bt(t)), c(!0);
      }
      function Cn(t, e) {
        return null !== t && e && e(new jt(t)), c(!0);
      }
      function xn(t, e, n) {
        const s = e.routeConfig ? e.routeConfig.canActivate : null;
        return s && 0 !== s.length
          ? c(
              s.map(s =>
                k(() => {
                  const i = bn(s, e, n);
                  let r;
                  if (
                    (function(t) {
                      return t && en(t.canActivate);
                    })(i)
                  )
                    r = ie(i.canActivate(e, t));
                  else {
                    if (!en(i)) throw new Error('Invalid CanActivate guard');
                    r = ie(i(e, t));
                  }
                  return r.pipe(tt());
                })
              )
            ).pipe(vn())
          : c(!0);
      }
      function En(t, e, n) {
        const s = e[e.length - 1],
          i = e
            .slice(0, e.length - 1)
            .reverse()
            .map(t =>
              (function(t) {
                const e = t.routeConfig ? t.routeConfig.canActivateChild : null;
                return e && 0 !== e.length ? { node: t, guards: e } : null;
              })(t)
            )
            .filter(t => null !== t)
            .map(e =>
              k(() =>
                c(
                  e.guards.map(i => {
                    const r = bn(i, e.node, n);
                    let o;
                    if (
                      (function(t) {
                        return t && en(t.canActivateChild);
                      })(r)
                    )
                      o = ie(r.canActivateChild(s, t));
                    else {
                      if (!en(r)) throw new Error('Invalid CanActivateChild guard');
                      o = ie(r(s, t));
                    }
                    return o.pipe(tt());
                  })
                ).pipe(vn())
              )
            );
        return c(i).pipe(vn());
      }
      class Sn {}
      class kn {
        constructor(t, e, n, s, i, r) {
          (this.rootComponentType = t),
            (this.config = e),
            (this.urlTree = n),
            (this.url = s),
            (this.paramsInheritanceStrategy = i),
            (this.relativeLinkResolution = r);
        }
        recognize() {
          try {
            const e = Tn(this.urlTree.root, [], [], this.config, this.relativeLinkResolution).segmentGroup,
              n = this.processSegmentGroup(this.config, e, zt),
              s = new Me(
                [],
                Object.freeze({}),
                Object.freeze(Object.assign({}, this.urlTree.queryParams)),
                this.urlTree.fragment,
                {},
                zt,
                this.rootComponentType,
                null,
                this.urlTree.root,
                -1,
                {}
              ),
              i = new Te(s, n),
              r = new Le(this.url, i);
            return this.inheritParamsAndData(r._root), c(r);
          } catch (t) {
            return new m.a(e => e.error(t));
          }
        }
        inheritParamsAndData(t) {
          const e = t.value,
            n = Ne(e, this.paramsInheritanceStrategy);
          (e.params = Object.freeze(n.params)),
            (e.data = Object.freeze(n.data)),
            t.children.forEach(t => this.inheritParamsAndData(t));
        }
        processSegmentGroup(t, e, n) {
          return 0 === e.segments.length && e.hasChildren()
            ? this.processChildren(t, e)
            : this.processSegment(t, e, e.segments, n);
        }
        processChildren(t, e) {
          const n = he(e, (e, n) => this.processSegmentGroup(t, e, n));
          return (
            (function(t) {
              const e = {};
              n.forEach(t => {
                const n = e[t.value.outlet];
                if (n) {
                  const e = n.url.map(t => t.toString()).join('/'),
                    s = t.value.url.map(t => t.toString()).join('/');
                  throw new Error(`Two segments cannot have the same outlet name: '${e}' and '${s}'.`);
                }
                e[t.value.outlet] = t.value;
              });
            })(),
            n.sort((t, e) =>
              t.value.outlet === zt ? -1 : e.value.outlet === zt ? 1 : t.value.outlet.localeCompare(e.value.outlet)
            ),
            n
          );
        }
        processSegment(t, e, n, s) {
          for (const r of t)
            try {
              return this.processSegmentAgainstRoute(r, e, n, s);
            } catch (i) {
              if (!(i instanceof Sn)) throw i;
            }
          if (this.noLeftoversInUrl(e, n, s)) return [];
          throw new Sn();
        }
        noLeftoversInUrl(t, e, n) {
          return 0 === e.length && !t.children[n];
        }
        processSegmentAgainstRoute(t, e, n, s) {
          if (t.redirectTo) throw new Sn();
          if ((t.outlet || zt) !== s) throw new Sn();
          let i,
            r = [],
            o = [];
          if ('**' === t.path) {
            const r = n.length > 0 ? ne(n).parameters : {};
            i = new Me(
              n,
              r,
              Object.freeze(Object.assign({}, this.urlTree.queryParams)),
              this.urlTree.fragment,
              Rn(t),
              s,
              t.component,
              t,
              Dn(e),
              An(e) + n.length,
              Pn(t)
            );
          } else {
            const a = (function(t, e, n) {
              if ('' === e.path) {
                if ('full' === e.pathMatch && (t.hasChildren() || n.length > 0)) throw new Sn();
                return { consumedSegments: [], lastChild: 0, parameters: {} };
              }
              const s = (e.matcher || Yt)(n, t, e);
              if (!s) throw new Sn();
              const i = {};
              se(s.posParams, (t, e) => {
                i[e] = t.path;
              });
              const r = s.consumed.length > 0 ? Object.assign({}, i, s.consumed[s.consumed.length - 1].parameters) : i;
              return { consumedSegments: s.consumed, lastChild: s.consumed.length, parameters: r };
            })(e, t, n);
            (r = a.consumedSegments),
              (o = n.slice(a.lastChild)),
              (i = new Me(
                r,
                a.parameters,
                Object.freeze(Object.assign({}, this.urlTree.queryParams)),
                this.urlTree.fragment,
                Rn(t),
                s,
                t.component,
                t,
                Dn(e),
                An(e) + r.length,
                Pn(t)
              ));
          }
          const a = (function(t) {
              return t.children ? t.children : t.loadChildren ? t._loadedConfig.routes : [];
            })(t),
            { segmentGroup: l, slicedSegments: c } = Tn(e, r, o, a, this.relativeLinkResolution);
          if (0 === c.length && l.hasChildren()) {
            const t = this.processChildren(a, l);
            return [new Te(i, t)];
          }
          if (0 === a.length && 0 === c.length) return [new Te(i, [])];
          const h = this.processSegment(a, l, c, zt);
          return [new Te(i, h)];
        }
      }
      function Dn(t) {
        let e = t;
        for (; e._sourceSegment; ) e = e._sourceSegment;
        return e;
      }
      function An(t) {
        let e = t,
          n = e._segmentIndexShift ? e._segmentIndexShift : 0;
        for (; e._sourceSegment; ) n += (e = e._sourceSegment)._segmentIndexShift ? e._segmentIndexShift : 0;
        return n - 1;
      }
      function Tn(t, e, n, s, i) {
        if (
          n.length > 0 &&
          (function(t, e, n) {
            return s.some(n => On(t, e, n) && In(n) !== zt);
          })(t, n)
        ) {
          const i = new ae(
            e,
            (function(t, e, n, s) {
              const i = {};
              (i[zt] = s), (s._sourceSegment = t), (s._segmentIndexShift = e.length);
              for (const r of n)
                if ('' === r.path && In(r) !== zt) {
                  const n = new ae([], {});
                  (n._sourceSegment = t), (n._segmentIndexShift = e.length), (i[In(r)] = n);
                }
              return i;
            })(t, e, s, new ae(n, t.children))
          );
          return (i._sourceSegment = t), (i._segmentIndexShift = e.length), { segmentGroup: i, slicedSegments: [] };
        }
        if (
          0 === n.length &&
          (function(t, e, n) {
            return s.some(n => On(t, e, n));
          })(t, n)
        ) {
          const r = new ae(
            t.segments,
            (function(t, e, n, s, i, r) {
              const o = {};
              for (const a of s)
                if (On(t, n, a) && !i[In(a)]) {
                  const n = new ae([], {});
                  (n._sourceSegment = t),
                    (n._segmentIndexShift = 'legacy' === r ? t.segments.length : e.length),
                    (o[In(a)] = n);
                }
              return Object.assign({}, i, o);
            })(t, e, n, s, t.children, i)
          );
          return (r._sourceSegment = t), (r._segmentIndexShift = e.length), { segmentGroup: r, slicedSegments: n };
        }
        const r = new ae(t.segments, t.children);
        return (r._sourceSegment = t), (r._segmentIndexShift = e.length), { segmentGroup: r, slicedSegments: n };
      }
      function On(t, e, n) {
        return (
          (!(t.hasChildren() || e.length > 0) || 'full' !== n.pathMatch) && '' === n.path && void 0 === n.redirectTo
        );
      }
      function In(t) {
        return t.outlet || zt;
      }
      function Rn(t) {
        return t.data || {};
      }
      function Pn(t) {
        return t.resolve || {};
      }
      function Nn(t, e, n, s) {
        const i = bn(t, e, s);
        return ie(i.resolve ? i.resolve(e, n) : i(e, n));
      }
      function Mn(t) {
        return function(e) {
          return e.pipe(
            it(e => {
              const n = t(e);
              return n ? Object(h.a)(n).pipe(Object(D.a)(() => e)) : Object(h.a)([e]);
            })
          );
        };
      }
      class Ln {}
      class jn {
        shouldDetach(t) {
          return !1;
        }
        store(t, e) {}
        shouldAttach(t) {
          return !1;
        }
        retrieve(t) {
          return null;
        }
        shouldReuseRoute(t, e) {
          return t.routeConfig === e.routeConfig;
        }
      }
      const Fn = new s.p('ROUTES');
      class Bn {
        constructor(t, e, n, s) {
          (this.loader = t), (this.compiler = e), (this.onLoadStartListener = n), (this.onLoadEndListener = s);
        }
        load(t, e) {
          return (
            this.onLoadStartListener && this.onLoadStartListener(e),
            this.loadModuleFactory(e.loadChildren).pipe(
              Object(D.a)(n => {
                this.onLoadEndListener && this.onLoadEndListener(e);
                const s = n.create(t);
                return new Qt(ee(s.injector.get(Fn)).map(Jt), s);
              })
            )
          );
        }
        loadModuleFactory(t) {
          return 'string' == typeof t
            ? Object(h.a)(this.loader.load(t))
            : ie(t()).pipe(
                Object(et.a)(t => (t instanceof s.u ? c(t) : Object(h.a)(this.compiler.compileModuleAsync(t))))
              );
        }
      }
      class Vn {}
      class Un {
        shouldProcessUrl(t) {
          return !0;
        }
        extract(t) {
          return t;
        }
        merge(t, e) {
          return t;
        }
      }
      function Hn(t) {
        throw t;
      }
      function zn(t, e, n) {
        return e.parse('/');
      }
      function $n(t, e) {
        return c(null);
      }
      class qn {
        constructor(t, e, n, i, r, o, a, l) {
          (this.rootComponentType = t),
            (this.urlSerializer = e),
            (this.rootContexts = n),
            (this.location = i),
            (this.config = l),
            (this.lastSuccessfulNavigation = null),
            (this.currentNavigation = null),
            (this.navigationId = 0),
            (this.isNgZoneEnabled = !1),
            (this.events = new u.a()),
            (this.errorHandler = Hn),
            (this.malformedUriErrorHandler = zn),
            (this.navigated = !1),
            (this.lastSuccessfulId = -1),
            (this.hooks = { beforePreactivation: $n, afterPreactivation: $n }),
            (this.urlHandlingStrategy = new Un()),
            (this.routeReuseStrategy = new jn()),
            (this.onSameUrlNavigation = 'ignore'),
            (this.paramsInheritanceStrategy = 'emptyOnly'),
            (this.urlUpdateStrategy = 'deferred'),
            (this.relativeLinkResolution = 'legacy'),
            (this.ngModule = r.get(s.w)),
            (this.console = r.get(s.bb));
          const c = r.get(s.y);
          (this.isNgZoneEnabled = c instanceof s.y),
            this.resetConfig(l),
            (this.currentUrlTree = new oe(new ae([], {}), {}, null)),
            (this.rawUrlTree = this.currentUrlTree),
            (this.browserUrlTree = this.currentUrlTree),
            (this.configLoader = new Bn(o, a, t => this.triggerEvent(new Mt(t)), t => this.triggerEvent(new Lt(t)))),
            (this.routerState = Re(this.currentUrlTree, this.rootComponentType)),
            (this.transitions = new p({
              id: 0,
              currentUrlTree: this.currentUrlTree,
              currentRawUrl: this.currentUrlTree,
              extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),
              urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),
              rawUrl: this.currentUrlTree,
              extras: {},
              resolve: null,
              reject: null,
              promise: Promise.resolve(!0),
              source: 'imperative',
              restoredState: null,
              currentSnapshot: this.routerState.snapshot,
              targetSnapshot: null,
              currentRouterState: this.routerState,
              targetRouterState: null,
              guards: { canActivateChecks: [], canDeactivateChecks: [] },
              guardsResult: null
            })),
            (this.navigations = this.setupNavigations(this.transitions)),
            this.processNavigations();
        }
        setupNavigations(t) {
          const e = this.events;
          return t.pipe(
            I(t => 0 !== t.id),
            Object(D.a)(t => Object.assign({}, t, { extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl) })),
            it(t => {
              let n = !1,
                s = !1;
              return c(t).pipe(
                bt(t => {
                  this.currentNavigation = {
                    id: t.id,
                    initialUrl: t.currentRawUrl,
                    extractedUrl: t.extractedUrl,
                    trigger: t.source,
                    extras: t.extras,
                    previousNavigation: this.lastSuccessfulNavigation
                      ? Object.assign({}, this.lastSuccessfulNavigation, { previousNavigation: null })
                      : null
                  };
                }),
                it(t => {
                  const n = !this.navigated || t.extractedUrl.toString() !== this.browserUrlTree.toString();
                  if (
                    ('reload' === this.onSameUrlNavigation || n) &&
                    this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl)
                  )
                    return c(t).pipe(
                      it(t => {
                        const n = this.transitions.getValue();
                        return (
                          e.next(new kt(t.id, this.serializeUrl(t.extractedUrl), t.source, t.restoredState)),
                          n !== this.transitions.getValue() ? E : [t]
                        );
                      }),
                      it(t => Promise.resolve(t)),
                      (function(t, e, n, s) {
                        return function(i) {
                          return i.pipe(
                            it(i =>
                              (function(t, e, n, s, r) {
                                return new cn(t, e, n, i.extractedUrl, r).apply();
                              })(t, e, n, 0, s).pipe(Object(D.a)(t => Object.assign({}, i, { urlAfterRedirects: t })))
                            )
                          );
                        };
                      })(this.ngModule.injector, this.configLoader, this.urlSerializer, this.config),
                      bt(t => {
                        this.currentNavigation = Object.assign({}, this.currentNavigation, {
                          finalUrl: t.urlAfterRedirects
                        });
                      }),
                      (function(t, e, n, s, i) {
                        return function(r) {
                          return r.pipe(
                            Object(et.a)(r =>
                              (function(t, e, n, s, i = 'emptyOnly', r = 'legacy') {
                                return new kn(t, e, n, s, i, r).recognize();
                              })(t, e, r.urlAfterRedirects, n(r.urlAfterRedirects), s, i).pipe(
                                Object(D.a)(t => Object.assign({}, r, { targetSnapshot: t }))
                              )
                            )
                          );
                        };
                      })(
                        this.rootComponentType,
                        this.config,
                        t => this.serializeUrl(t),
                        this.paramsInheritanceStrategy,
                        this.relativeLinkResolution
                      ),
                      bt(t => {
                        'eager' === this.urlUpdateStrategy &&
                          (t.extras.skipLocationChange ||
                            this.setBrowserUrl(t.urlAfterRedirects, !!t.extras.replaceUrl, t.id, t.extras.state),
                          (this.browserUrlTree = t.urlAfterRedirects));
                      }),
                      bt(t => {
                        const n = new Ot(
                          t.id,
                          this.serializeUrl(t.extractedUrl),
                          this.serializeUrl(t.urlAfterRedirects),
                          t.targetSnapshot
                        );
                        e.next(n);
                      })
                    );
                  if (n && this.rawUrlTree && this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {
                    const { id: n, extractedUrl: s, source: i, restoredState: r, extras: o } = t,
                      a = new kt(n, this.serializeUrl(s), i, r);
                    e.next(a);
                    const l = Re(s, this.rootComponentType).snapshot;
                    return c(
                      Object.assign({}, t, {
                        targetSnapshot: l,
                        urlAfterRedirects: s,
                        extras: Object.assign({}, o, { skipLocationChange: !1, replaceUrl: !1 })
                      })
                    );
                  }
                  return (this.rawUrlTree = t.rawUrl), (this.browserUrlTree = t.urlAfterRedirects), t.resolve(null), E;
                }),
                Mn(t => {
                  const {
                    targetSnapshot: e,
                    id: n,
                    extractedUrl: s,
                    rawUrl: i,
                    extras: { skipLocationChange: r, replaceUrl: o }
                  } = t;
                  return this.hooks.beforePreactivation(e, {
                    navigationId: n,
                    appliedUrlTree: s,
                    rawUrlTree: i,
                    skipLocationChange: !!r,
                    replaceUrl: !!o
                  });
                }),
                bt(t => {
                  const e = new It(
                    t.id,
                    this.serializeUrl(t.extractedUrl),
                    this.serializeUrl(t.urlAfterRedirects),
                    t.targetSnapshot
                  );
                  this.triggerEvent(e);
                }),
                Object(D.a)(t =>
                  Object.assign({}, t, { guards: gn(t.targetSnapshot, t.currentSnapshot, this.rootContexts) })
                ),
                (function(t, e) {
                  return function(n) {
                    return n.pipe(
                      Object(et.a)(n => {
                        const {
                          targetSnapshot: s,
                          currentSnapshot: i,
                          guards: { canActivateChecks: r, canDeactivateChecks: o }
                        } = n;
                        return 0 === o.length && 0 === r.length
                          ? c(Object.assign({}, n, { guardsResult: !0 }))
                          : (function(t, e, n, s) {
                              return Object(h.a)(t).pipe(
                                Object(et.a)(t =>
                                  (function(t, e, n, s, i) {
                                    const r = e && e.routeConfig ? e.routeConfig.canDeactivate : null;
                                    return r && 0 !== r.length
                                      ? c(
                                          r.map(r => {
                                            const o = bn(r, e, i);
                                            let a;
                                            if (
                                              (function(t) {
                                                return t && en(t.canDeactivate);
                                              })(o)
                                            )
                                              a = ie(o.canDeactivate(t, e, n, s));
                                            else {
                                              if (!en(o)) throw new Error('Invalid CanDeactivate guard');
                                              a = ie(o(t, e, n, s));
                                            }
                                            return a.pipe(tt());
                                          })
                                        ).pipe(vn())
                                      : c(!0);
                                  })(t.component, t.route, n, e, s)
                                ),
                                tt(t => !0 !== t, !0)
                              );
                            })(o, s, i, t).pipe(
                              Object(et.a)(n =>
                                n &&
                                (function(t) {
                                  return 'boolean' == typeof n;
                                })()
                                  ? (function(t, e, n, s) {
                                      return Object(h.a)(e).pipe(
                                        dt(e =>
                                          Object(h.a)([
                                            Cn(e.route.parent, s),
                                            wn(e.route, s),
                                            En(t, e.path, n),
                                            xn(t, e.route, n)
                                          ]).pipe(
                                            T(),
                                            tt(t => !0 !== t, !0)
                                          )
                                        ),
                                        tt(t => !0 !== t, !0)
                                      );
                                    })(s, r, t, e)
                                  : c(n)
                              ),
                              Object(D.a)(t => Object.assign({}, n, { guardsResult: t }))
                            );
                      })
                    );
                  };
                })(this.ngModule.injector, t => this.triggerEvent(t)),
                bt(t => {
                  if (nn(t.guardsResult)) {
                    const e = Kt(`Redirecting to "${this.serializeUrl(t.guardsResult)}"`);
                    throw ((e.url = t.guardsResult), e);
                  }
                }),
                bt(t => {
                  const e = new Rt(
                    t.id,
                    this.serializeUrl(t.extractedUrl),
                    this.serializeUrl(t.urlAfterRedirects),
                    t.targetSnapshot,
                    !!t.guardsResult
                  );
                  this.triggerEvent(e);
                }),
                I(t => {
                  if (!t.guardsResult) {
                    this.resetUrlToCurrentUrlTree();
                    const n = new At(t.id, this.serializeUrl(t.extractedUrl), '');
                    return e.next(n), t.resolve(!1), !1;
                  }
                  return !0;
                }),
                Mn(t => {
                  if (t.guards.canActivateChecks.length)
                    return c(t).pipe(
                      bt(t => {
                        const e = new Pt(
                          t.id,
                          this.serializeUrl(t.extractedUrl),
                          this.serializeUrl(t.urlAfterRedirects),
                          t.targetSnapshot
                        );
                        this.triggerEvent(e);
                      }),
                      (function(t, e) {
                        return function(n) {
                          return n.pipe(
                            Object(et.a)(n => {
                              const {
                                targetSnapshot: s,
                                guards: { canActivateChecks: i }
                              } = n;
                              return i.length
                                ? Object(h.a)(i).pipe(
                                    dt(n =>
                                      (function(t, e, n, i) {
                                        return (function(t, e, n, s) {
                                          const i = Object.keys(t);
                                          if (0 === i.length) return c({});
                                          if (1 === i.length) {
                                            const r = i[0];
                                            return Nn(t[r], e, n, s).pipe(Object(D.a)(t => ({ [r]: t })));
                                          }
                                          const r = {};
                                          return Object(h.a)(i)
                                            .pipe(
                                              Object(et.a)(i =>
                                                Nn(t[i], e, n, s).pipe(Object(D.a)(t => ((r[i] = t), t)))
                                              )
                                            )
                                            .pipe(
                                              W(),
                                              Object(D.a)(() => r)
                                            );
                                        })(t._resolve, t, s, i).pipe(
                                          Object(D.a)(
                                            e => (
                                              (t._resolvedData = e),
                                              (t.data = Object.assign({}, t.data, Ne(t, n).resolve)),
                                              null
                                            )
                                          )
                                        );
                                      })(n.route, 0, t, e)
                                    ),
                                    mt((t, e) => t),
                                    Object(D.a)(t => n)
                                  )
                                : c(n);
                            })
                          );
                        };
                      })(this.paramsInheritanceStrategy, this.ngModule.injector),
                      bt(t => {
                        const e = new Nt(
                          t.id,
                          this.serializeUrl(t.extractedUrl),
                          this.serializeUrl(t.urlAfterRedirects),
                          t.targetSnapshot
                        );
                        this.triggerEvent(e);
                      })
                    );
                }),
                Mn(t => {
                  const {
                    targetSnapshot: e,
                    id: n,
                    extractedUrl: s,
                    rawUrl: i,
                    extras: { skipLocationChange: r, replaceUrl: o }
                  } = t;
                  return this.hooks.afterPreactivation(e, {
                    navigationId: n,
                    appliedUrlTree: s,
                    rawUrlTree: i,
                    skipLocationChange: !!r,
                    replaceUrl: !!o
                  });
                }),
                Object(D.a)(t => {
                  const e = (function(t, e, n) {
                    const s = (function t(e, n, s) {
                      if (s && e.shouldReuseRoute(n.value, s.value.snapshot)) {
                        const i = s.value;
                        i._futureSnapshot = n.value;
                        const r = (function(e, n, s) {
                          return n.children.map(n => {
                            for (const i of s.children)
                              if (e.shouldReuseRoute(i.value.snapshot, n.value)) return t(e, n, i);
                            return t(e, n);
                          });
                        })(e, n, s);
                        return new Te(i, r);
                      }
                      {
                        const s = e.retrieve(n.value);
                        if (s) {
                          const t = s.route;
                          return (
                            (function t(e, n) {
                              if (e.value.routeConfig !== n.value.routeConfig)
                                throw new Error(
                                  'Cannot reattach ActivatedRouteSnapshot created from a different route'
                                );
                              if (e.children.length !== n.children.length)
                                throw new Error(
                                  'Cannot reattach ActivatedRouteSnapshot with a different number of children'
                                );
                              n.value._futureSnapshot = e.value;
                              for (let s = 0; s < e.children.length; ++s) t(e.children[s], n.children[s]);
                            })(n, t),
                            t
                          );
                        }
                        {
                          const s = new Pe(
                              new p((i = n.value).url),
                              new p(i.params),
                              new p(i.queryParams),
                              new p(i.fragment),
                              new p(i.data),
                              i.outlet,
                              i.component,
                              i
                            ),
                            r = n.children.map(n => t(e, n));
                          return new Te(s, r);
                        }
                      }
                      var i;
                    })(t, e._root, n ? n._root : void 0);
                    return new Ie(s, e);
                  })(this.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);
                  return Object.assign({}, t, { targetRouterState: e });
                }),
                bt(t => {
                  (this.currentUrlTree = t.urlAfterRedirects),
                    (this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl)),
                    (this.routerState = t.targetRouterState),
                    'deferred' === this.urlUpdateStrategy &&
                      (t.extras.skipLocationChange ||
                        this.setBrowserUrl(this.rawUrlTree, !!t.extras.replaceUrl, t.id, t.extras.state),
                      (this.browserUrlTree = t.urlAfterRedirects));
                }),
                Xe(this.rootContexts, this.routeReuseStrategy, t => this.triggerEvent(t)),
                bt({
                  next() {
                    n = !0;
                  },
                  complete() {
                    n = !0;
                  }
                }),
                wt(() => {
                  if (!n && !s) {
                    this.resetUrlToCurrentUrlTree();
                    const n = new At(
                      t.id,
                      this.serializeUrl(t.extractedUrl),
                      `Navigation ID ${t.id} is not equal to the current navigation id ${this.navigationId}`
                    );
                    e.next(n), t.resolve(!1);
                  }
                  this.currentNavigation = null;
                }),
                Y(n => {
                  if (
                    ((s = !0),
                    (function(t) {
                      return n && n[Wt];
                    })())
                  ) {
                    const s = nn(n.url);
                    s ||
                      ((this.navigated = !0), this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl));
                    const i = new At(t.id, this.serializeUrl(t.extractedUrl), n.message);
                    e.next(i), t.resolve(!1), s && this.navigateByUrl(n.url);
                  } else {
                    this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);
                    const s = new Tt(t.id, this.serializeUrl(t.extractedUrl), n);
                    e.next(s);
                    try {
                      t.resolve(this.errorHandler(n));
                    } catch (i) {
                      t.reject(i);
                    }
                  }
                  return E;
                })
              );
            })
          );
        }
        resetRootComponentType(t) {
          (this.rootComponentType = t), (this.routerState.root.component = this.rootComponentType);
        }
        getTransition() {
          const t = this.transitions.value;
          return (t.urlAfterRedirects = this.browserUrlTree), t;
        }
        setTransition(t) {
          this.transitions.next(Object.assign({}, this.getTransition(), t));
        }
        initialNavigation() {
          this.setUpLocationChangeListener(),
            0 === this.navigationId && this.navigateByUrl(this.location.path(!0), { replaceUrl: !0 });
        }
        setUpLocationChangeListener() {
          this.locationSubscription ||
            (this.locationSubscription = this.location.subscribe(t => {
              let e = this.parseUrl(t.url);
              const n = 'popstate' === t.type ? 'popstate' : 'hashchange',
                s = t.state && t.state.navigationId ? t.state : null;
              setTimeout(() => {
                this.scheduleNavigation(e, n, s, { replaceUrl: !0 });
              }, 0);
            }));
        }
        get url() {
          return this.serializeUrl(this.currentUrlTree);
        }
        getCurrentNavigation() {
          return this.currentNavigation;
        }
        triggerEvent(t) {
          this.events.next(t);
        }
        resetConfig(t) {
          Gt(t), (this.config = t.map(Jt)), (this.navigated = !1), (this.lastSuccessfulId = -1);
        }
        ngOnDestroy() {
          this.dispose();
        }
        dispose() {
          this.locationSubscription && (this.locationSubscription.unsubscribe(), (this.locationSubscription = null));
        }
        createUrlTree(t, e = {}) {
          const {
            relativeTo: n,
            queryParams: i,
            fragment: r,
            preserveQueryParams: o,
            queryParamsHandling: a,
            preserveFragment: l
          } = e;
          Object(s.W)() &&
            o &&
            console &&
            console.warn &&
            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');
          const c = n || this.routerState.root,
            h = l ? this.currentUrlTree.fragment : r;
          let u = null;
          if (a)
            switch (a) {
              case 'merge':
                u = Object.assign({}, this.currentUrlTree.queryParams, i);
                break;
              case 'preserve':
                u = this.currentUrlTree.queryParams;
                break;
              default:
                u = i || null;
            }
          else u = o ? this.currentUrlTree.queryParams : i || null;
          return (
            null !== u && (u = this.removeEmptyProps(u)),
            (function(t, e, n, s, i) {
              if (0 === n.length) return He(e.root, e.root, e, s, i);
              const r = (function(t) {
                if ('string' == typeof t[0] && 1 === t.length && '/' === t[0]) return new ze(!0, 0, t);
                let e = 0,
                  n = !1;
                const s = t.reduce((t, s, i) => {
                  if ('object' == typeof s && null != s) {
                    if (s.outlets) {
                      const e = {};
                      return (
                        se(s.outlets, (t, n) => {
                          e[n] = 'string' == typeof t ? t.split('/') : t;
                        }),
                        [...t, { outlets: e }]
                      );
                    }
                    if (s.segmentPath) return [...t, s.segmentPath];
                  }
                  return 'string' != typeof s
                    ? [...t, s]
                    : 0 === i
                    ? (s.split('/').forEach((s, i) => {
                        (0 == i && '.' === s) ||
                          (0 == i && '' === s ? (n = !0) : '..' === s ? e++ : '' != s && t.push(s));
                      }),
                      t)
                    : [...t, s];
                }, []);
                return new ze(n, e, s);
              })(n);
              if (r.toRoot()) return He(e.root, new ae([], {}), e, s, i);
              const o = (function(t, n, s) {
                  if (t.isAbsolute) return new $e(e.root, !0, 0);
                  if (-1 === s.snapshot._lastPathIndex) return new $e(s.snapshot._urlSegment, !0, 0);
                  const i = Ue(t.commands[0]) ? 0 : 1;
                  return (function(e, n, r) {
                    let o = s.snapshot._urlSegment,
                      a = s.snapshot._lastPathIndex + i,
                      l = t.numberOfDoubleDots;
                    for (; l > a; ) {
                      if (((l -= a), !(o = o.parent))) throw new Error("Invalid number of '../'");
                      a = o.segments.length;
                    }
                    return new $e(o, !1, a - l);
                  })();
                })(r, 0, t),
                a = o.processChildren
                  ? Ke(o.segmentGroup, o.index, r.commands)
                  : We(o.segmentGroup, o.index, r.commands);
              return He(o.segmentGroup, a, e, s, i);
            })(c, this.currentUrlTree, t, u, h)
          );
        }
        navigateByUrl(t, e = { skipLocationChange: !1 }) {
          Object(s.W)() &&
            this.isNgZoneEnabled &&
            !s.y.isInAngularZone() &&
            this.console.warn("Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?");
          const n = nn(t) ? t : this.parseUrl(t),
            i = this.urlHandlingStrategy.merge(n, this.rawUrlTree);
          return this.scheduleNavigation(i, 'imperative', null, e);
        }
        navigate(t, e = { skipLocationChange: !1 }) {
          return (
            (function(t) {
              for (let e = 0; e < t.length; e++) {
                const n = t[e];
                if (null == n) throw new Error(`The requested path contains ${n} segment at index ${e}`);
              }
            })(t),
            this.navigateByUrl(this.createUrlTree(t, e), e)
          );
        }
        serializeUrl(t) {
          return this.urlSerializer.serialize(t);
        }
        parseUrl(t) {
          let e;
          try {
            e = this.urlSerializer.parse(t);
          } catch (n) {
            e = this.malformedUriErrorHandler(n, this.urlSerializer, t);
          }
          return e;
        }
        isActive(t, e) {
          if (nn(t)) return re(this.currentUrlTree, t, e);
          const n = this.parseUrl(t);
          return re(this.currentUrlTree, n, e);
        }
        removeEmptyProps(t) {
          return Object.keys(t).reduce((e, n) => {
            const s = t[n];
            return null != s && (e[n] = s), e;
          }, {});
        }
        processNavigations() {
          this.navigations.subscribe(
            t => {
              (this.navigated = !0),
                (this.lastSuccessfulId = t.id),
                this.events.next(
                  new Dt(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(this.currentUrlTree))
                ),
                (this.lastSuccessfulNavigation = this.currentNavigation),
                (this.currentNavigation = null),
                t.resolve(!0);
            },
            t => {
              this.console.warn('Unhandled Navigation Error: ');
            }
          );
        }
        scheduleNavigation(t, e, n, s) {
          const i = this.getTransition();
          if (i && 'imperative' !== e && 'imperative' === i.source && i.rawUrl.toString() === t.toString())
            return Promise.resolve(!0);
          if (i && 'hashchange' == e && 'popstate' === i.source && i.rawUrl.toString() === t.toString())
            return Promise.resolve(!0);
          if (i && 'popstate' == e && 'hashchange' === i.source && i.rawUrl.toString() === t.toString())
            return Promise.resolve(!0);
          let r = null,
            o = null;
          const a = new Promise((t, e) => {
              (r = t), (o = e);
            }),
            l = ++this.navigationId;
          return (
            this.setTransition({
              id: l,
              source: e,
              restoredState: n,
              currentUrlTree: this.currentUrlTree,
              currentRawUrl: this.rawUrlTree,
              rawUrl: t,
              extras: s,
              resolve: r,
              reject: o,
              promise: a,
              currentSnapshot: this.routerState.snapshot,
              currentRouterState: this.routerState
            }),
            a.catch(t => Promise.reject(t))
          );
        }
        setBrowserUrl(t, e, n, s) {
          const i = this.urlSerializer.serialize(t);
          (s = s || {}),
            this.location.isCurrentPathEqualTo(i) || e
              ? this.location.replaceState(i, '', Object.assign({}, s, { navigationId: n }))
              : this.location.go(i, '', Object.assign({}, s, { navigationId: n }));
        }
        resetStateAndUrl(t, e, n) {
          (this.routerState = t),
            (this.currentUrlTree = e),
            (this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, n)),
            this.resetUrlToCurrentUrlTree();
        }
        resetUrlToCurrentUrlTree() {
          this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), '', {
            navigationId: this.lastSuccessfulId
          });
        }
      }
      let Wn = (() =>
          class {
            constructor(t, e, n, s, i) {
              (this.router = t),
                (this.route = e),
                (this.commands = []),
                null == n && s.setAttribute(i.nativeElement, 'tabindex', '0');
            }
            set routerLink(t) {
              this.commands = null != t ? (Array.isArray(t) ? t : [t]) : [];
            }
            set preserveQueryParams(t) {
              Object(s.W)() &&
                console &&
                console.warn &&
                console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.'),
                (this.preserve = t);
            }
            onClick() {
              const t = { skipLocationChange: Yn(this.skipLocationChange), replaceUrl: Yn(this.replaceUrl) };
              return this.router.navigateByUrl(this.urlTree, t), !0;
            }
            get urlTree() {
              return this.router.createUrlTree(this.commands, {
                relativeTo: this.route,
                queryParams: this.queryParams,
                fragment: this.fragment,
                preserveQueryParams: Yn(this.preserve),
                queryParamsHandling: this.queryParamsHandling,
                preserveFragment: Yn(this.preserveFragment)
              });
            }
          })(),
        Kn = (() =>
          class {
            constructor(t, e, n) {
              (this.router = t),
                (this.route = e),
                (this.locationStrategy = n),
                (this.commands = []),
                (this.subscription = t.events.subscribe(t => {
                  t instanceof Dt && this.updateTargetUrlAndHref();
                }));
            }
            set routerLink(t) {
              this.commands = null != t ? (Array.isArray(t) ? t : [t]) : [];
            }
            set preserveQueryParams(t) {
              Object(s.W)() &&
                console &&
                console.warn &&
                console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.'),
                (this.preserve = t);
            }
            ngOnChanges(t) {
              this.updateTargetUrlAndHref();
            }
            ngOnDestroy() {
              this.subscription.unsubscribe();
            }
            onClick(t, e, n, s) {
              if (0 !== t || e || n || s) return !0;
              if ('string' == typeof this.target && '_self' != this.target) return !0;
              const i = {
                skipLocationChange: Yn(this.skipLocationChange),
                replaceUrl: Yn(this.replaceUrl),
                state: this.state
              };
              return this.router.navigateByUrl(this.urlTree, i), !1;
            }
            updateTargetUrlAndHref() {
              this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
            }
            get urlTree() {
              return this.router.createUrlTree(this.commands, {
                relativeTo: this.route,
                queryParams: this.queryParams,
                fragment: this.fragment,
                preserveQueryParams: Yn(this.preserve),
                queryParamsHandling: this.queryParamsHandling,
                preserveFragment: Yn(this.preserveFragment)
              });
            }
          })();
      function Yn(t) {
        return '' === t || !!t;
      }
      let Qn = (() =>
        class {
          constructor(t, e, n, s, i) {
            (this.router = t),
              (this.element = e),
              (this.renderer = n),
              (this.link = s),
              (this.linkWithHref = i),
              (this.classes = []),
              (this.isActive = !1),
              (this.routerLinkActiveOptions = { exact: !1 }),
              (this.subscription = t.events.subscribe(t => {
                t instanceof Dt && this.update();
              }));
          }
          ngAfterContentInit() {
            this.links.changes.subscribe(t => this.update()),
              this.linksWithHrefs.changes.subscribe(t => this.update()),
              this.update();
          }
          set routerLinkActive(t) {
            const e = Array.isArray(t) ? t : t.split(' ');
            this.classes = e.filter(t => !!t);
          }
          ngOnChanges(t) {
            this.update();
          }
          ngOnDestroy() {
            this.subscription.unsubscribe();
          }
          update() {
            this.links &&
              this.linksWithHrefs &&
              this.router.navigated &&
              Promise.resolve().then(() => {
                const t = this.hasActiveLinks();
                this.isActive !== t &&
                  ((this.isActive = t),
                  this.classes.forEach(e => {
                    t
                      ? this.renderer.addClass(this.element.nativeElement, e)
                      : this.renderer.removeClass(this.element.nativeElement, e);
                  }));
              });
          }
          isLinkActive(t) {
            return e => t.isActive(e.urlTree, this.routerLinkActiveOptions.exact);
          }
          hasActiveLinks() {
            const t = this.isLinkActive(this.router);
            return (
              (this.link && t(this.link)) ||
              (this.linkWithHref && t(this.linkWithHref)) ||
              this.links.some(t) ||
              this.linksWithHrefs.some(t)
            );
          }
        })();
      class Gn {
        constructor() {
          (this.outlet = null),
            (this.route = null),
            (this.resolver = null),
            (this.children = new Zn()),
            (this.attachRef = null);
        }
      }
      class Zn {
        constructor() {
          this.contexts = new Map();
        }
        onChildOutletCreated(t, e) {
          const n = this.getOrCreateContext(t);
          (n.outlet = e), this.contexts.set(t, n);
        }
        onChildOutletDestroyed(t) {
          const e = this.getContext(t);
          e && (e.outlet = null);
        }
        onOutletDeactivated() {
          const t = this.contexts;
          return (this.contexts = new Map()), t;
        }
        onOutletReAttached(t) {
          this.contexts = t;
        }
        getOrCreateContext(t) {
          let e = this.getContext(t);
          return e || ((e = new Gn()), this.contexts.set(t, e)), e;
        }
        getContext(t) {
          return this.contexts.get(t) || null;
        }
      }
      let Xn = (() =>
        class {
          constructor(t, e, n, i, r) {
            (this.parentContexts = t),
              (this.location = e),
              (this.resolver = n),
              (this.changeDetector = r),
              (this.activated = null),
              (this._activatedRoute = null),
              (this.activateEvents = new s.m()),
              (this.deactivateEvents = new s.m()),
              (this.name = i || zt),
              t.onChildOutletCreated(this.name, this);
          }
          ngOnDestroy() {
            this.parentContexts.onChildOutletDestroyed(this.name);
          }
          ngOnInit() {
            if (!this.activated) {
              const t = this.parentContexts.getContext(this.name);
              t &&
                t.route &&
                (t.attachRef ? this.attach(t.attachRef, t.route) : this.activateWith(t.route, t.resolver || null));
            }
          }
          get isActivated() {
            return !!this.activated;
          }
          get component() {
            if (!this.activated) throw new Error('Outlet is not activated');
            return this.activated.instance;
          }
          get activatedRoute() {
            if (!this.activated) throw new Error('Outlet is not activated');
            return this._activatedRoute;
          }
          get activatedRouteData() {
            return this._activatedRoute ? this._activatedRoute.snapshot.data : {};
          }
          detach() {
            if (!this.activated) throw new Error('Outlet is not activated');
            this.location.detach();
            const t = this.activated;
            return (this.activated = null), (this._activatedRoute = null), t;
          }
          attach(t, e) {
            (this.activated = t), (this._activatedRoute = e), this.location.insert(t.hostView);
          }
          deactivate() {
            if (this.activated) {
              const t = this.component;
              this.activated.destroy(),
                (this.activated = null),
                (this._activatedRoute = null),
                this.deactivateEvents.emit(t);
            }
          }
          activateWith(t, e) {
            if (this.isActivated) throw new Error('Cannot activate an already activated outlet');
            this._activatedRoute = t;
            const n = (e = e || this.resolver).resolveComponentFactory(t._futureSnapshot.routeConfig.component),
              s = this.parentContexts.getOrCreateContext(this.name).children,
              i = new Jn(t, s, this.location.injector);
            (this.activated = this.location.createComponent(n, this.location.length, i)),
              this.changeDetector.markForCheck(),
              this.activateEvents.emit(this.activated.instance);
          }
        })();
      class Jn {
        constructor(t, e, n) {
          (this.route = t), (this.childContexts = e), (this.parent = n);
        }
        get(t, e) {
          return t === Pe ? this.route : t === Zn ? this.childContexts : this.parent.get(t, e);
        }
      }
      class ts {}
      class es {
        preload(t, e) {
          return e().pipe(Y(() => c(null)));
        }
      }
      class ns {
        preload(t, e) {
          return c(null);
        }
      }
      let ss = (() =>
        class {
          constructor(t, e, n, s, i) {
            (this.router = t),
              (this.injector = s),
              (this.preloadingStrategy = i),
              (this.loader = new Bn(e, n, e => t.triggerEvent(new Mt(e)), e => t.triggerEvent(new Lt(e))));
          }
          setUpPreloading() {
            this.subscription = this.router.events
              .pipe(
                I(t => t instanceof Dt),
                dt(() => this.preload())
              )
              .subscribe(() => {});
          }
          preload() {
            const t = this.injector.get(s.w);
            return this.processRoutes(t, this.router.config);
          }
          ngOnDestroy() {
            this.subscription.unsubscribe();
          }
          processRoutes(t, e) {
            const n = [];
            for (const s of e)
              if (s.loadChildren && !s.canLoad && s._loadedConfig) {
                const t = s._loadedConfig;
                n.push(this.processRoutes(t.module, t.routes));
              } else
                s.loadChildren && !s.canLoad
                  ? n.push(this.preloadConfig(t, s))
                  : s.children && n.push(this.processRoutes(t, s.children));
            return Object(h.a)(n).pipe(
              Object(A.a)(),
              Object(D.a)(t => void 0)
            );
          }
          preloadConfig(t, e) {
            return this.preloadingStrategy.preload(e, () =>
              this.loader
                .load(t.injector, e)
                .pipe(Object(et.a)(t => ((e._loadedConfig = t), this.processRoutes(t.module, t.routes))))
            );
          }
        })();
      class is {
        constructor(t, e, n = {}) {
          (this.router = t),
            (this.viewportScroller = e),
            (this.options = n),
            (this.lastId = 0),
            (this.lastSource = 'imperative'),
            (this.restoredId = 0),
            (this.store = {}),
            (n.scrollPositionRestoration = n.scrollPositionRestoration || 'disabled'),
            (n.anchorScrolling = n.anchorScrolling || 'disabled');
        }
        init() {
          'disabled' !== this.options.scrollPositionRestoration &&
            this.viewportScroller.setHistoryScrollRestoration('manual'),
            (this.routerEventsSubscription = this.createScrollEvents()),
            (this.scrollEventsSubscription = this.consumeScrollEvents());
        }
        createScrollEvents() {
          return this.router.events.subscribe(t => {
            t instanceof kt
              ? ((this.store[this.lastId] = this.viewportScroller.getScrollPosition()),
                (this.lastSource = t.navigationTrigger),
                (this.restoredId = t.restoredState ? t.restoredState.navigationId : 0))
              : t instanceof Dt &&
                ((this.lastId = t.id), this.scheduleScrollEvent(t, this.router.parseUrl(t.urlAfterRedirects).fragment));
          });
        }
        consumeScrollEvents() {
          return this.router.events.subscribe(t => {
            t instanceof Ut &&
              (t.position
                ? 'top' === this.options.scrollPositionRestoration
                  ? this.viewportScroller.scrollToPosition([0, 0])
                  : 'enabled' === this.options.scrollPositionRestoration &&
                    this.viewportScroller.scrollToPosition(t.position)
                : t.anchor && 'enabled' === this.options.anchorScrolling
                ? this.viewportScroller.scrollToAnchor(t.anchor)
                : 'disabled' !== this.options.scrollPositionRestoration &&
                  this.viewportScroller.scrollToPosition([0, 0]));
          });
        }
        scheduleScrollEvent(t, e) {
          this.router.triggerEvent(new Ut(t, 'popstate' === this.lastSource ? this.store[this.restoredId] : null, e));
        }
        ngOnDestroy() {
          this.routerEventsSubscription && this.routerEventsSubscription.unsubscribe(),
            this.scrollEventsSubscription && this.scrollEventsSubscription.unsubscribe();
        }
      }
      const rs = new s.p('ROUTER_CONFIGURATION'),
        os = new s.p('ROUTER_FORROOT_GUARD'),
        as = [
          r.g,
          { provide: ue, useClass: de },
          {
            provide: qn,
            useFactory: ms,
            deps: [s.g, ue, Zn, r.g, s.q, s.v, s.i, Fn, rs, [Vn, new s.z()], [Ln, new s.z()]]
          },
          Zn,
          { provide: Pe, useFactory: fs, deps: [qn] },
          { provide: s.v, useClass: s.J },
          ss,
          ns,
          es,
          { provide: rs, useValue: { enableTracing: !1 } }
        ];
      function ls() {
        return new s.x('Router', qn);
      }
      let cs = (() => {
        class t {
          constructor(t, e) {}
          static forRoot(e, n) {
            return {
              ngModule: t,
              providers: [
                as,
                ps(e),
                { provide: os, useFactory: ds, deps: [[qn, new s.z(), new s.I()]] },
                { provide: rs, useValue: n || {} },
                { provide: r.h, useFactory: us, deps: [r.r, [new s.o(r.a), new s.z()], rs] },
                { provide: is, useFactory: hs, deps: [qn, r.s, rs] },
                { provide: ts, useExisting: n && n.preloadingStrategy ? n.preloadingStrategy : ns },
                { provide: s.x, multi: !0, useFactory: ls },
                [
                  gs,
                  { provide: s.d, multi: !0, useFactory: bs, deps: [gs] },
                  { provide: ys, useFactory: _s, deps: [gs] },
                  { provide: s.b, multi: !0, useExisting: ys }
                ]
              ]
            };
          }
          static forChild(e) {
            return { ngModule: t, providers: [ps(e)] };
          }
        }
        return t;
      })();
      function hs(t, e, n) {
        return n.scrollOffset && e.setOffset(n.scrollOffset), new is(t, e, n);
      }
      function us(t, e, n = {}) {
        return n.useHash ? new r.e(t, e) : new r.q(t, e);
      }
      function ds(t) {
        if (t)
          throw new Error(
            'RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.'
          );
        return 'guarded';
      }
      function ps(t) {
        return [{ provide: s.a, multi: !0, useValue: t }, { provide: Fn, multi: !0, useValue: t }];
      }
      function ms(t, e, n, s, i, r, o, a, l = {}, c, h) {
        const u = new qn(null, e, n, s, i, r, o, ee(a));
        if (
          (c && (u.urlHandlingStrategy = c),
          h && (u.routeReuseStrategy = h),
          l.errorHandler && (u.errorHandler = l.errorHandler),
          l.malformedUriErrorHandler && (u.malformedUriErrorHandler = l.malformedUriErrorHandler),
          l.enableTracing)
        ) {
          const t = Object(Et.s)();
          u.events.subscribe(e => {
            t.logGroup(`Router Event: ${e.constructor.name}`), t.log(e.toString()), t.log(e), t.logGroupEnd();
          });
        }
        return (
          l.onSameUrlNavigation && (u.onSameUrlNavigation = l.onSameUrlNavigation),
          l.paramsInheritanceStrategy && (u.paramsInheritanceStrategy = l.paramsInheritanceStrategy),
          l.urlUpdateStrategy && (u.urlUpdateStrategy = l.urlUpdateStrategy),
          l.relativeLinkResolution && (u.relativeLinkResolution = l.relativeLinkResolution),
          u
        );
      }
      function fs(t) {
        return t.routerState.root;
      }
      let gs = (() =>
        class {
          constructor(t) {
            (this.injector = t), (this.initNavigation = !1), (this.resultOfPreactivationDone = new u.a());
          }
          appInitializer() {
            return this.injector.get(r.f, Promise.resolve(null)).then(() => {
              let t = null;
              const e = new Promise(e => (t = e)),
                n = this.injector.get(qn),
                s = this.injector.get(rs);
              if (this.isLegacyDisabled(s) || this.isLegacyEnabled(s)) t(!0);
              else if ('disabled' === s.initialNavigation) n.setUpLocationChangeListener(), t(!0);
              else {
                if ('enabled' !== s.initialNavigation)
                  throw new Error(`Invalid initialNavigation options: '${s.initialNavigation}'`);
                (n.hooks.afterPreactivation = () =>
                  this.initNavigation ? c(null) : ((this.initNavigation = !0), t(!0), this.resultOfPreactivationDone)),
                  n.initialNavigation();
              }
              return e;
            });
          }
          bootstrapListener(t) {
            const e = this.injector.get(rs),
              n = this.injector.get(ss),
              i = this.injector.get(is),
              r = this.injector.get(qn),
              o = this.injector.get(s.g);
            t === o.components[0] &&
              (this.isLegacyEnabled(e)
                ? r.initialNavigation()
                : this.isLegacyDisabled(e) && r.setUpLocationChangeListener(),
              n.setUpPreloading(),
              i.init(),
              r.resetRootComponentType(o.componentTypes[0]),
              this.resultOfPreactivationDone.next(null),
              this.resultOfPreactivationDone.complete());
          }
          isLegacyEnabled(t) {
            return (
              'legacy_enabled' === t.initialNavigation || !0 === t.initialNavigation || void 0 === t.initialNavigation
            );
          }
          isLegacyDisabled(t) {
            return 'legacy_disabled' === t.initialNavigation || !1 === t.initialNavigation;
          }
        })();
      function bs(t) {
        return t.appInitializer.bind(t);
      }
      function _s(t) {
        return t.bootstrapListener.bind(t);
      }
      const ys = new s.p('Router Initializer');
      var vs = n('VRyK'),
        ws = n('AytR');
      class Cs {
        constructor(t) {
          if (t) throw new Error(`${t} has already been loaded. Import Core module in the AppModule only.`);
        }
      }
      var xs = (function(t) {
        return (
          (t[(t.Off = 0)] = 'Off'),
          (t[(t.Error = 1)] = 'Error'),
          (t[(t.Warning = 2)] = 'Warning'),
          (t[(t.Info = 3)] = 'Info'),
          (t[(t.Debug = 4)] = 'Debug'),
          t
        );
      })({});
      let Es = (() => {
        class t {
          constructor(t) {
            this.source = t;
          }
          static enableProductionMode() {
            t.level = xs.Warning;
          }
          debug(...t) {
            this.log(console.log, xs.Debug, t);
          }
          info(...t) {
            this.log(console.info, xs.Info, t);
          }
          warn(...t) {
            this.log(console.warn, xs.Warning, t);
          }
          error(...t) {
            this.log(console.error, xs.Error, t);
          }
          log(e, n, s) {
            if (n <= t.level) {
              const i = this.source ? ['[' + this.source + ']'].concat(s) : s;
              e.apply(console, i), t.outputs.forEach(t => t.apply(t, [this.source, n, ...s]));
            }
          }
        }
        return (t.level = xs.Debug), (t.outputs = []), t;
      })();
      var Ss = n('A/Ql'),
        ks = n('4odN'),
        Ds = n('w1tV');
      function As(t, e, n) {
        return 0 === n ? [e] : (t.push(e), t);
      }
      class Ts {}
      let Os = (() =>
        class extends Ts {
          getTranslation(t) {
            return c({});
          }
        })();
      class Is {}
      let Rs = (() =>
        class {
          handle(t) {
            return t.key;
          }
        })();
      class Ps {}
      let Ns = (() =>
        class extends Ps {
          compile(t, e) {
            return t;
          }
          compileTranslations(t, e) {
            return t;
          }
        })();
      function Ms(t) {
        return null != t;
      }
      function Ls(t) {
        return t && 'object' == typeof t && !Array.isArray(t);
      }
      class js {}
      let Fs = (() =>
        class extends js {
          constructor() {
            super(...arguments), (this.templateMatcher = /{{\s?([^{}\s]*)\s?}}/g);
          }
          interpolate(t, e) {
            return 'string' == typeof t
              ? this.interpolateString(t, e)
              : 'function' == typeof t
              ? this.interpolateFunction(t, e)
              : t;
          }
          getValue(t, e) {
            let n = e.split('.');
            e = '';
            do {
              (e += n.shift()),
                !Ms(t) || !Ms(t[e]) || ('object' != typeof t[e] && n.length)
                  ? n.length
                    ? (e += '.')
                    : (t = void 0)
                  : ((t = t[e]), (e = ''));
            } while (n.length);
            return t;
          }
          interpolateFunction(t, e) {
            return t(e);
          }
          interpolateString(t, e) {
            return e
              ? t.replace(this.templateMatcher, (t, n) => {
                  let s = this.getValue(e, n);
                  return Ms(s) ? s : t;
                })
              : t;
          }
        })();
      class Bs {
        constructor() {
          (this.currentLang = this.defaultLang),
            (this.translations = {}),
            (this.langs = []),
            (this.onTranslationChange = new s.m()),
            (this.onLangChange = new s.m()),
            (this.onDefaultLangChange = new s.m());
        }
      }
      const Vs = new s.p('USE_STORE'),
        Us = new s.p('USE_DEFAULT_LANG');
      let Hs = (() =>
          class {
            constructor(t, e, n, i, r, o = !0, a = !1) {
              (this.store = t),
                (this.currentLoader = e),
                (this.compiler = n),
                (this.parser = i),
                (this.missingTranslationHandler = r),
                (this.useDefaultLang = o),
                (this.isolate = a),
                (this.pending = !1),
                (this._onTranslationChange = new s.m()),
                (this._onLangChange = new s.m()),
                (this._onDefaultLangChange = new s.m()),
                (this._langs = []),
                (this._translations = {}),
                (this._translationRequests = {});
            }
            get onTranslationChange() {
              return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;
            }
            get onLangChange() {
              return this.isolate ? this._onLangChange : this.store.onLangChange;
            }
            get onDefaultLangChange() {
              return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;
            }
            get defaultLang() {
              return this.isolate ? this._defaultLang : this.store.defaultLang;
            }
            set defaultLang(t) {
              this.isolate ? (this._defaultLang = t) : (this.store.defaultLang = t);
            }
            get currentLang() {
              return this.isolate ? this._currentLang : this.store.currentLang;
            }
            set currentLang(t) {
              this.isolate ? (this._currentLang = t) : (this.store.currentLang = t);
            }
            get langs() {
              return this.isolate ? this._langs : this.store.langs;
            }
            set langs(t) {
              this.isolate ? (this._langs = t) : (this.store.langs = t);
            }
            get translations() {
              return this.isolate ? this._translations : this.store.translations;
            }
            set translations(t) {
              this.isolate ? (this._translations = t) : (this.store.translations = t);
            }
            setDefaultLang(t) {
              if (t === this.defaultLang) return;
              let e = this.retrieveTranslations(t);
              void 0 !== e
                ? (this.defaultLang || (this.defaultLang = t),
                  e.pipe(Z(1)).subscribe(e => {
                    this.changeDefaultLang(t);
                  }))
                : this.changeDefaultLang(t);
            }
            getDefaultLang() {
              return this.defaultLang;
            }
            use(t) {
              if (t === this.currentLang) return c(this.translations[t]);
              let e = this.retrieveTranslations(t);
              return void 0 !== e
                ? (this.currentLang || (this.currentLang = t),
                  e.pipe(Z(1)).subscribe(e => {
                    this.changeLang(t);
                  }),
                  e)
                : (this.changeLang(t), c(this.translations[t]));
            }
            retrieveTranslations(t) {
              let e;
              return (
                void 0 === this.translations[t] &&
                  ((this._translationRequests[t] = this._translationRequests[t] || this.getTranslation(t)),
                  (e = this._translationRequests[t])),
                e
              );
            }
            getTranslation(t) {
              this.pending = !0;
              const e = this.currentLoader.getTranslation(t).pipe(Object(Ds.a)());
              return (
                (this.loadingTranslations = e.pipe(
                  Z(1),
                  Object(D.a)(e => this.compiler.compileTranslations(e, t)),
                  Object(Ds.a)()
                )),
                this.loadingTranslations.subscribe(
                  e => {
                    (this.translations[t] = e), this.updateLangs(), (this.pending = !1);
                  },
                  t => {
                    this.pending = !1;
                  }
                ),
                e
              );
            }
            setTranslation(t, e, n = !1) {
              (e = this.compiler.compileTranslations(e, t)),
                (this.translations[t] =
                  n && this.translations[t]
                    ? (function t(e, n) {
                        let s = Object.assign({}, e);
                        return (
                          Ls(e) &&
                            Ls(n) &&
                            Object.keys(n).forEach(i => {
                              Ls(n[i]) && i in e ? (s[i] = t(e[i], n[i])) : Object.assign(s, { [i]: n[i] });
                            }),
                          s
                        );
                      })(this.translations[t], e)
                    : e),
                this.updateLangs(),
                this.onTranslationChange.emit({ lang: t, translations: this.translations[t] });
            }
            getLangs() {
              return this.langs;
            }
            addLangs(t) {
              t.forEach(t => {
                -1 === this.langs.indexOf(t) && this.langs.push(t);
              });
            }
            updateLangs() {
              this.addLangs(Object.keys(this.translations));
            }
            getParsedResult(t, e, n) {
              let s;
              if (e instanceof Array) {
                let s = {},
                  i = !1;
                for (let r of e)
                  (s[r] = this.getParsedResult(t, r, n)), 'function' == typeof s[r].subscribe && (i = !0);
                if (i) {
                  let t;
                  for (let n of e) {
                    let e = 'function' == typeof s[n].subscribe ? s[n] : c(s[n]);
                    t = void 0 === t ? e : Object(vs.a)(t, e);
                  }
                  return t.pipe(
                    mt(As, []),
                    Object(D.a)(t => {
                      let n = {};
                      return (
                        t.forEach((t, s) => {
                          n[e[s]] = t;
                        }),
                        n
                      );
                    })
                  );
                }
                return s;
              }
              if (
                (t && (s = this.parser.interpolate(this.parser.getValue(t, e), n)),
                void 0 === s &&
                  this.defaultLang &&
                  this.defaultLang !== this.currentLang &&
                  this.useDefaultLang &&
                  (s = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], e), n)),
                void 0 === s)
              ) {
                let t = { key: e, translateService: this };
                void 0 !== n && (t.interpolateParams = n), (s = this.missingTranslationHandler.handle(t));
              }
              return void 0 !== s ? s : e;
            }
            get(t, e) {
              if (!Ms(t) || !t.length) throw new Error('Parameter "key" required');
              if (this.pending)
                return m.a.create(n => {
                  let s = t => {
                      n.next(t), n.complete();
                    },
                    i = t => {
                      n.error(t);
                    };
                  this.loadingTranslations.subscribe(n => {
                    'function' == typeof (n = this.getParsedResult(n, t, e)).subscribe ? n.subscribe(s, i) : s(n);
                  }, i);
                });
              {
                let n = this.getParsedResult(this.translations[this.currentLang], t, e);
                return 'function' == typeof n.subscribe ? n : c(n);
              }
            }
            stream(t, e) {
              if (!Ms(t) || !t.length) throw new Error('Parameter "key" required');
              return at(
                this.get(t, e),
                this.onLangChange.pipe(
                  it(n => {
                    const s = this.getParsedResult(n.translations, t, e);
                    return 'function' == typeof s.subscribe ? s : c(s);
                  })
                )
              );
            }
            instant(t, e) {
              if (!Ms(t) || !t.length) throw new Error('Parameter "key" required');
              let n = this.getParsedResult(this.translations[this.currentLang], t, e);
              if (void 0 !== n.subscribe) {
                if (t instanceof Array) {
                  let e = {};
                  return (
                    t.forEach((n, s) => {
                      e[t[s]] = t[s];
                    }),
                    e
                  );
                }
                return t;
              }
              return n;
            }
            set(t, e, n = this.currentLang) {
              (this.translations[n][t] = this.compiler.compile(e, n)),
                this.updateLangs(),
                this.onTranslationChange.emit({ lang: n, translations: this.translations[n] });
            }
            changeLang(t) {
              (this.currentLang = t),
                this.onLangChange.emit({ lang: t, translations: this.translations[t] }),
                this.defaultLang || this.changeDefaultLang(t);
            }
            changeDefaultLang(t) {
              (this.defaultLang = t), this.onDefaultLangChange.emit({ lang: t, translations: this.translations[t] });
            }
            reloadLang(t) {
              return this.resetLang(t), this.getTranslation(t);
            }
            resetLang(t) {
              (this._translationRequests[t] = void 0), (this.translations[t] = void 0);
            }
            getBrowserLang() {
              if ('undefined' == typeof window || void 0 === window.navigator) return;
              let t = window.navigator.languages ? window.navigator.languages[0] : null;
              return (
                -1 !==
                  (t =
                    t ||
                    window.navigator.language ||
                    window.navigator.browserLanguage ||
                    window.navigator.userLanguage).indexOf('-') && (t = t.split('-')[0]),
                -1 !== t.indexOf('_') && (t = t.split('_')[0]),
                t
              );
            }
            getBrowserCultureLang() {
              if ('undefined' == typeof window || void 0 === window.navigator) return;
              return (
                (window.navigator.languages ? window.navigator.languages[0] : null) ||
                window.navigator.language ||
                window.navigator.browserLanguage ||
                window.navigator.userLanguage
              );
            }
          })(),
        zs = (() =>
          class {
            constructor(t, e, n) {
              (this.translateService = t),
                (this.element = e),
                (this._ref = n),
                this.onTranslationChangeSub ||
                  (this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(t => {
                    t.lang === this.translateService.currentLang && this.checkNodes(!0, t.translations);
                  })),
                this.onLangChangeSub ||
                  (this.onLangChangeSub = this.translateService.onLangChange.subscribe(t => {
                    this.checkNodes(!0, t.translations);
                  })),
                this.onDefaultLangChangeSub ||
                  (this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(t => {
                    this.checkNodes(!0);
                  }));
            }
            set translate(t) {
              t && ((this.key = t), this.checkNodes());
            }
            set translateParams(t) {
              (function t(e, n) {
                if (e === n) return !0;
                if (null === e || null === n) return !1;
                if (e != e && n != n) return !0;
                let s,
                  i,
                  r,
                  o = typeof e;
                if (o == typeof n && 'object' == o) {
                  if (!Array.isArray(e)) {
                    if (Array.isArray(n)) return !1;
                    for (i in ((r = Object.create(null)), e)) {
                      if (!t(e[i], n[i])) return !1;
                      r[i] = !0;
                    }
                    for (i in n) if (!(i in r) && void 0 !== n[i]) return !1;
                    return !0;
                  }
                  if (!Array.isArray(n)) return !1;
                  if ((s = e.length) == n.length) {
                    for (i = 0; i < s; i++) if (!t(e[i], n[i])) return !1;
                    return !0;
                  }
                }
                return !1;
              })(this.currentParams, t) || ((this.currentParams = t), this.checkNodes(!0));
            }
            ngAfterViewChecked() {
              this.checkNodes();
            }
            checkNodes(t = !1, e) {
              let n = this.element.nativeElement.childNodes;
              n.length ||
                (this.setContent(this.element.nativeElement, this.key), (n = this.element.nativeElement.childNodes));
              for (let s = 0; s < n.length; ++s) {
                let i = n[s];
                if (3 === i.nodeType) {
                  let n;
                  if (this.key) (n = this.key), t && (i.lastKey = null);
                  else {
                    let e = this.getContent(i),
                      s = e.trim();
                    s.length &&
                      (e !== i.currentValue
                        ? ((n = s), (i.originalContent = this.getContent(i)))
                        : i.originalContent && t && ((i.lastKey = null), (n = i.originalContent.trim())));
                  }
                  this.updateValue(n, i, e);
                }
              }
            }
            updateValue(t, e, n) {
              if (t) {
                if (e.lastKey === t && this.lastParams === this.currentParams) return;
                this.lastParams = this.currentParams;
                let s = n => {
                  n !== t && (e.lastKey = t),
                    e.originalContent || (e.originalContent = this.getContent(e)),
                    (e.currentValue = Ms(n) ? n : e.originalContent || t),
                    this.setContent(e, this.key ? e.currentValue : e.originalContent.replace(t, e.currentValue)),
                    this._ref.markForCheck();
                };
                if (Ms(n)) {
                  let e = this.translateService.getParsedResult(n, t, this.currentParams);
                  'function' == typeof e.subscribe ? e.subscribe(s) : s(e);
                } else this.translateService.get(t, this.currentParams).subscribe(s);
              }
            }
            getContent(t) {
              return Ms(t.textContent) ? t.textContent : t.data;
            }
            setContent(t, e) {
              Ms(t.textContent) ? (t.textContent = e) : (t.data = e);
            }
            ngOnDestroy() {
              this.onLangChangeSub && this.onLangChangeSub.unsubscribe(),
                this.onDefaultLangChangeSub && this.onDefaultLangChangeSub.unsubscribe(),
                this.onTranslationChangeSub && this.onTranslationChangeSub.unsubscribe();
            }
          })(),
        $s = (() => {
          class t {
            static forRoot(e = {}) {
              return {
                ngModule: t,
                providers: [
                  e.loader || { provide: Ts, useClass: Os },
                  e.compiler || { provide: Ps, useClass: Ns },
                  e.parser || { provide: js, useClass: Fs },
                  e.missingTranslationHandler || { provide: Is, useClass: Rs },
                  Bs,
                  { provide: Vs, useValue: e.isolate },
                  { provide: Us, useValue: e.useDefaultLang },
                  Hs
                ]
              };
            }
            static forChild(e = {}) {
              return {
                ngModule: t,
                providers: [
                  e.loader || { provide: Ts, useClass: Os },
                  e.compiler || { provide: Ps, useClass: Ns },
                  e.parser || { provide: js, useClass: Fs },
                  e.missingTranslationHandler || { provide: Is, useClass: Rs },
                  { provide: Vs, useValue: e.isolate },
                  { provide: Us, useValue: e.useDefaultLang },
                  Hs
                ]
              };
            }
          }
          return t;
        })();
      const qs = new Es('I18nService'),
        Ws = 'language';
      function Ks(t) {
        return t;
      }
      let Ys = (() => {
        class t {
          constructor(t) {
            (this.translateService = t), t.setTranslation('en-US', Ss), t.setTranslation('fr-FR', ks);
          }
          init(t, e) {
            (this.defaultLanguage = t),
              (this.supportedLanguages = e),
              (this.language = ''),
              (this.langChangeSubscription = this.translateService.onLangChange.subscribe(t => {
                localStorage.setItem(Ws, t.lang);
              }));
          }
          destroy() {
            this.langChangeSubscription && this.langChangeSubscription.unsubscribe();
          }
          set language(t) {
            t = t || localStorage.getItem(Ws) || this.translateService.getBrowserCultureLang();
            let e = this.supportedLanguages.includes(t);
            t &&
              !e &&
              ((t = t.split('-')[0]), (t = this.supportedLanguages.find(e => e.startsWith(t)) || ''), (e = Boolean(t))),
              e || (t = this.defaultLanguage),
              qs.debug(`Language set to ${t}`),
              this.translateService.use(t);
          }
          get language() {
            return this.translateService.currentLang;
          }
        }
        return (
          (t.ngInjectableDef = s.Ob({
            factory: function() {
              return new t(s.Pb(Hs));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      class Qs {}
      class Gs {}
      class Zs {
        constructor(t) {
          (this.normalizedNames = new Map()),
            (this.lazyUpdate = null),
            t
              ? (this.lazyInit =
                  'string' == typeof t
                    ? () => {
                        (this.headers = new Map()),
                          t.split('\n').forEach(t => {
                            const e = t.indexOf(':');
                            if (e > 0) {
                              const n = t.slice(0, e),
                                s = n.toLowerCase(),
                                i = t.slice(e + 1).trim();
                              this.maybeSetNormalizedName(n, s),
                                this.headers.has(s) ? this.headers.get(s).push(i) : this.headers.set(s, [i]);
                            }
                          });
                      }
                    : () => {
                        (this.headers = new Map()),
                          Object.keys(t).forEach(e => {
                            let n = t[e];
                            const s = e.toLowerCase();
                            'string' == typeof n && (n = [n]),
                              n.length > 0 && (this.headers.set(s, n), this.maybeSetNormalizedName(e, s));
                          });
                      })
              : (this.headers = new Map());
        }
        has(t) {
          return this.init(), this.headers.has(t.toLowerCase());
        }
        get(t) {
          this.init();
          const e = this.headers.get(t.toLowerCase());
          return e && e.length > 0 ? e[0] : null;
        }
        keys() {
          return this.init(), Array.from(this.normalizedNames.values());
        }
        getAll(t) {
          return this.init(), this.headers.get(t.toLowerCase()) || null;
        }
        append(t, e) {
          return this.clone({ name: t, value: e, op: 'a' });
        }
        set(t, e) {
          return this.clone({ name: t, value: e, op: 's' });
        }
        delete(t, e) {
          return this.clone({ name: t, value: e, op: 'd' });
        }
        maybeSetNormalizedName(t, e) {
          this.normalizedNames.has(e) || this.normalizedNames.set(e, t);
        }
        init() {
          this.lazyInit &&
            (this.lazyInit instanceof Zs ? this.copyFrom(this.lazyInit) : this.lazyInit(),
            (this.lazyInit = null),
            this.lazyUpdate && (this.lazyUpdate.forEach(t => this.applyUpdate(t)), (this.lazyUpdate = null)));
        }
        copyFrom(t) {
          t.init(),
            Array.from(t.headers.keys()).forEach(e => {
              this.headers.set(e, t.headers.get(e)), this.normalizedNames.set(e, t.normalizedNames.get(e));
            });
        }
        clone(t) {
          const e = new Zs();
          return (
            (e.lazyInit = this.lazyInit && this.lazyInit instanceof Zs ? this.lazyInit : this),
            (e.lazyUpdate = (this.lazyUpdate || []).concat([t])),
            e
          );
        }
        applyUpdate(t) {
          const e = t.name.toLowerCase();
          switch (t.op) {
            case 'a':
            case 's':
              let n = t.value;
              if (('string' == typeof n && (n = [n]), 0 === n.length)) return;
              this.maybeSetNormalizedName(t.name, e);
              const s = ('a' === t.op ? this.headers.get(e) : void 0) || [];
              s.push(...n), this.headers.set(e, s);
              break;
            case 'd':
              const i = t.value;
              if (i) {
                let t = this.headers.get(e);
                if (!t) return;
                0 === (t = t.filter(t => -1 === i.indexOf(t))).length
                  ? (this.headers.delete(e), this.normalizedNames.delete(e))
                  : this.headers.set(e, t);
              } else this.headers.delete(e), this.normalizedNames.delete(e);
          }
        }
        forEach(t) {
          this.init(),
            Array.from(this.normalizedNames.keys()).forEach(e => t(this.normalizedNames.get(e), this.headers.get(e)));
        }
      }
      class Xs {
        encodeKey(t) {
          return Js(t);
        }
        encodeValue(t) {
          return Js(t);
        }
        decodeKey(t) {
          return decodeURIComponent(t);
        }
        decodeValue(t) {
          return decodeURIComponent(t);
        }
      }
      function Js(t) {
        return encodeURIComponent(t)
          .replace(/%40/gi, '@')
          .replace(/%3A/gi, ':')
          .replace(/%24/gi, '$')
          .replace(/%2C/gi, ',')
          .replace(/%3B/gi, ';')
          .replace(/%2B/gi, '+')
          .replace(/%3D/gi, '=')
          .replace(/%3F/gi, '?')
          .replace(/%2F/gi, '/');
      }
      class ti {
        constructor(t = {}) {
          if (((this.updates = null), (this.cloneFrom = null), (this.encoder = t.encoder || new Xs()), t.fromString)) {
            if (t.fromObject) throw new Error('Cannot specify both fromString and fromObject.');
            this.map = (function(t, e) {
              const n = new Map();
              return (
                t.length > 0 &&
                  t.split('&').forEach(t => {
                    const s = t.indexOf('='),
                      [i, r] =
                        -1 == s ? [e.decodeKey(t), ''] : [e.decodeKey(t.slice(0, s)), e.decodeValue(t.slice(s + 1))],
                      o = n.get(i) || [];
                    o.push(r), n.set(i, o);
                  }),
                n
              );
            })(t.fromString, this.encoder);
          } else
            t.fromObject
              ? ((this.map = new Map()),
                Object.keys(t.fromObject).forEach(e => {
                  const n = t.fromObject[e];
                  this.map.set(e, Array.isArray(n) ? n : [n]);
                }))
              : (this.map = null);
        }
        has(t) {
          return this.init(), this.map.has(t);
        }
        get(t) {
          this.init();
          const e = this.map.get(t);
          return e ? e[0] : null;
        }
        getAll(t) {
          return this.init(), this.map.get(t) || null;
        }
        keys() {
          return this.init(), Array.from(this.map.keys());
        }
        append(t, e) {
          return this.clone({ param: t, value: e, op: 'a' });
        }
        set(t, e) {
          return this.clone({ param: t, value: e, op: 's' });
        }
        delete(t, e) {
          return this.clone({ param: t, value: e, op: 'd' });
        }
        toString() {
          return (
            this.init(),
            this.keys()
              .map(t => {
                const e = this.encoder.encodeKey(t);
                return this.map
                  .get(t)
                  .map(t => e + '=' + this.encoder.encodeValue(t))
                  .join('&');
              })
              .join('&')
          );
        }
        clone(t) {
          const e = new ti({ encoder: this.encoder });
          return (e.cloneFrom = this.cloneFrom || this), (e.updates = (this.updates || []).concat([t])), e;
        }
        init() {
          null === this.map && (this.map = new Map()),
            null !== this.cloneFrom &&
              (this.cloneFrom.init(),
              this.cloneFrom.keys().forEach(t => this.map.set(t, this.cloneFrom.map.get(t))),
              this.updates.forEach(t => {
                switch (t.op) {
                  case 'a':
                  case 's':
                    const e = ('a' === t.op ? this.map.get(t.param) : void 0) || [];
                    e.push(t.value), this.map.set(t.param, e);
                    break;
                  case 'd':
                    if (void 0 === t.value) {
                      this.map.delete(t.param);
                      break;
                    }
                    {
                      let e = this.map.get(t.param) || [];
                      const n = e.indexOf(t.value);
                      -1 !== n && e.splice(n, 1), e.length > 0 ? this.map.set(t.param, e) : this.map.delete(t.param);
                    }
                }
              }),
              (this.cloneFrom = this.updates = null));
        }
      }
      function ei(t) {
        return 'undefined' != typeof ArrayBuffer && t instanceof ArrayBuffer;
      }
      function ni(t) {
        return 'undefined' != typeof Blob && t instanceof Blob;
      }
      function si(t) {
        return 'undefined' != typeof FormData && t instanceof FormData;
      }
      class ii {
        constructor(t, e, n, s) {
          let i;
          if (
            ((this.url = e),
            (this.body = null),
            (this.reportProgress = !1),
            (this.withCredentials = !1),
            (this.responseType = 'json'),
            (this.method = t.toUpperCase()),
            (function(t) {
              switch (t) {
                case 'DELETE':
                case 'GET':
                case 'HEAD':
                case 'OPTIONS':
                case 'JSONP':
                  return !1;
                default:
                  return !0;
              }
            })(this.method) || s
              ? ((this.body = void 0 !== n ? n : null), (i = s))
              : (i = n),
            i &&
              ((this.reportProgress = !!i.reportProgress),
              (this.withCredentials = !!i.withCredentials),
              i.responseType && (this.responseType = i.responseType),
              i.headers && (this.headers = i.headers),
              i.params && (this.params = i.params)),
            this.headers || (this.headers = new Zs()),
            this.params)
          ) {
            const t = this.params.toString();
            if (0 === t.length) this.urlWithParams = e;
            else {
              const n = e.indexOf('?');
              this.urlWithParams = e + (-1 === n ? '?' : n < e.length - 1 ? '&' : '') + t;
            }
          } else (this.params = new ti()), (this.urlWithParams = e);
        }
        serializeBody() {
          return null === this.body
            ? null
            : ei(this.body) || ni(this.body) || si(this.body) || 'string' == typeof this.body
            ? this.body
            : this.body instanceof ti
            ? this.body.toString()
            : 'object' == typeof this.body || 'boolean' == typeof this.body || Array.isArray(this.body)
            ? JSON.stringify(this.body)
            : this.body.toString();
        }
        detectContentTypeHeader() {
          return null === this.body
            ? null
            : si(this.body)
            ? null
            : ni(this.body)
            ? this.body.type || null
            : ei(this.body)
            ? null
            : 'string' == typeof this.body
            ? 'text/plain'
            : this.body instanceof ti
            ? 'application/x-www-form-urlencoded;charset=UTF-8'
            : 'object' == typeof this.body || 'number' == typeof this.body || Array.isArray(this.body)
            ? 'application/json'
            : null;
        }
        clone(t = {}) {
          const e = t.method || this.method,
            n = t.url || this.url,
            s = t.responseType || this.responseType,
            i = void 0 !== t.body ? t.body : this.body,
            r = void 0 !== t.withCredentials ? t.withCredentials : this.withCredentials,
            o = void 0 !== t.reportProgress ? t.reportProgress : this.reportProgress;
          let a = t.headers || this.headers,
            l = t.params || this.params;
          return (
            void 0 !== t.setHeaders && (a = Object.keys(t.setHeaders).reduce((e, n) => e.set(n, t.setHeaders[n]), a)),
            t.setParams && (l = Object.keys(t.setParams).reduce((e, n) => e.set(n, t.setParams[n]), l)),
            new ii(e, n, i, { params: l, headers: a, reportProgress: o, responseType: s, withCredentials: r })
          );
        }
      }
      const ri = (function() {
        var t = { Sent: 0, UploadProgress: 1, ResponseHeader: 2, DownloadProgress: 3, Response: 4, User: 5 };
        return (
          (t[t.Sent] = 'Sent'),
          (t[t.UploadProgress] = 'UploadProgress'),
          (t[t.ResponseHeader] = 'ResponseHeader'),
          (t[t.DownloadProgress] = 'DownloadProgress'),
          (t[t.Response] = 'Response'),
          (t[t.User] = 'User'),
          t
        );
      })();
      class oi {
        constructor(t, e = 200, n = 'OK') {
          (this.headers = t.headers || new Zs()),
            (this.status = void 0 !== t.status ? t.status : e),
            (this.statusText = t.statusText || n),
            (this.url = t.url || null),
            (this.ok = this.status >= 200 && this.status < 300);
        }
      }
      class ai extends oi {
        constructor(t = {}) {
          super(t), (this.type = ri.ResponseHeader);
        }
        clone(t = {}) {
          return new ai({
            headers: t.headers || this.headers,
            status: void 0 !== t.status ? t.status : this.status,
            statusText: t.statusText || this.statusText,
            url: t.url || this.url || void 0
          });
        }
      }
      class li extends oi {
        constructor(t = {}) {
          super(t), (this.type = ri.Response), (this.body = void 0 !== t.body ? t.body : null);
        }
        clone(t = {}) {
          return new li({
            body: void 0 !== t.body ? t.body : this.body,
            headers: t.headers || this.headers,
            status: void 0 !== t.status ? t.status : this.status,
            statusText: t.statusText || this.statusText,
            url: t.url || this.url || void 0
          });
        }
      }
      class ci extends oi {
        constructor(t) {
          super(t, 0, 'Unknown Error'),
            (this.name = 'HttpErrorResponse'),
            (this.ok = !1),
            (this.message =
              this.status >= 200 && this.status < 300
                ? `Http failure during parsing for ${t.url || '(unknown url)'}`
                : `Http failure response for ${t.url || '(unknown url)'}: ${t.status} ${t.statusText}`),
            (this.error = t.error || null);
        }
      }
      function hi(t, e) {
        return {
          body: e,
          headers: t.headers,
          observe: t.observe,
          params: t.params,
          reportProgress: t.reportProgress,
          responseType: t.responseType,
          withCredentials: t.withCredentials
        };
      }
      let ui = (() =>
        class {
          constructor(t) {
            this.handler = t;
          }
          request(t, e, n = {}) {
            let s;
            if (t instanceof ii) s = t;
            else {
              let i = void 0;
              i = n.headers instanceof Zs ? n.headers : new Zs(n.headers);
              let r = void 0;
              n.params && (r = n.params instanceof ti ? n.params : new ti({ fromObject: n.params })),
                (s = new ii(t, e, void 0 !== n.body ? n.body : null, {
                  headers: i,
                  params: r,
                  reportProgress: n.reportProgress,
                  responseType: n.responseType || 'json',
                  withCredentials: n.withCredentials
                }));
            }
            const i = c(s).pipe(dt(t => this.handler.handle(t)));
            if (t instanceof ii || 'events' === n.observe) return i;
            const r = i.pipe(I(t => t instanceof li));
            switch (n.observe || 'body') {
              case 'body':
                switch (s.responseType) {
                  case 'arraybuffer':
                    return r.pipe(
                      Object(D.a)(t => {
                        if (null !== t.body && !(t.body instanceof ArrayBuffer))
                          throw new Error('Response is not an ArrayBuffer.');
                        return t.body;
                      })
                    );
                  case 'blob':
                    return r.pipe(
                      Object(D.a)(t => {
                        if (null !== t.body && !(t.body instanceof Blob)) throw new Error('Response is not a Blob.');
                        return t.body;
                      })
                    );
                  case 'text':
                    return r.pipe(
                      Object(D.a)(t => {
                        if (null !== t.body && 'string' != typeof t.body) throw new Error('Response is not a string.');
                        return t.body;
                      })
                    );
                  case 'json':
                  default:
                    return r.pipe(Object(D.a)(t => t.body));
                }
              case 'response':
                return r;
              default:
                throw new Error(`Unreachable: unhandled observe type ${n.observe}}`);
            }
          }
          delete(t, e = {}) {
            return this.request('DELETE', t, e);
          }
          get(t, e = {}) {
            return this.request('GET', t, e);
          }
          head(t, e = {}) {
            return this.request('HEAD', t, e);
          }
          jsonp(t, e) {
            return this.request('JSONP', t, {
              params: new ti().append(e, 'JSONP_CALLBACK'),
              observe: 'body',
              responseType: 'json'
            });
          }
          options(t, e = {}) {
            return this.request('OPTIONS', t, e);
          }
          patch(t, e, n = {}) {
            return this.request('PATCH', t, hi(n, e));
          }
          post(t, e, n = {}) {
            return this.request('POST', t, hi(n, e));
          }
          put(t, e, n = {}) {
            return this.request('PUT', t, hi(n, e));
          }
        })();
      class di {
        constructor(t, e) {
          (this.next = t), (this.interceptor = e);
        }
        handle(t) {
          return this.interceptor.intercept(t, this.next);
        }
      }
      const pi = new s.p('HTTP_INTERCEPTORS');
      let mi = (() =>
        class {
          intercept(t, e) {
            return e.handle(t);
          }
        })();
      const fi = /^\)\]\}',?\n/;
      class gi {}
      let bi = (() =>
          class {
            constructor() {}
            build() {
              return new XMLHttpRequest();
            }
          })(),
        _i = (() =>
          class {
            constructor(t) {
              this.xhrFactory = t;
            }
            handle(t) {
              if ('JSONP' === t.method)
                throw new Error('Attempted to construct Jsonp request without JsonpClientModule installed.');
              return new m.a(e => {
                const n = this.xhrFactory.build();
                if (
                  (n.open(t.method, t.urlWithParams),
                  t.withCredentials && (n.withCredentials = !0),
                  t.headers.forEach((t, e) => n.setRequestHeader(t, e.join(','))),
                  t.headers.has('Accept') || n.setRequestHeader('Accept', 'application/json, text/plain, */*'),
                  !t.headers.has('Content-Type'))
                ) {
                  const e = t.detectContentTypeHeader();
                  null !== e && n.setRequestHeader('Content-Type', e);
                }
                if (t.responseType) {
                  const e = t.responseType.toLowerCase();
                  n.responseType = 'json' !== e ? e : 'text';
                }
                const s = t.serializeBody();
                let i = null;
                const r = () => {
                    if (null !== i) return i;
                    const e = 1223 === n.status ? 204 : n.status,
                      s = n.statusText || 'OK',
                      r = new Zs(n.getAllResponseHeaders()),
                      o =
                        (function(t) {
                          return 'responseURL' in t && t.responseURL
                            ? t.responseURL
                            : /^X-Request-URL:/m.test(t.getAllResponseHeaders())
                            ? t.getResponseHeader('X-Request-URL')
                            : null;
                        })(n) || t.url;
                    return (i = new ai({ headers: r, status: e, statusText: s, url: o }));
                  },
                  o = () => {
                    let { headers: s, status: i, statusText: o, url: a } = r(),
                      l = null;
                    204 !== i && (l = void 0 === n.response ? n.responseText : n.response),
                      0 === i && (i = l ? 200 : 0);
                    let c = i >= 200 && i < 300;
                    if ('json' === t.responseType && 'string' == typeof l) {
                      const t = l;
                      l = l.replace(fi, '');
                      try {
                        l = '' !== l ? JSON.parse(l) : null;
                      } catch (h) {
                        (l = t), c && ((c = !1), (l = { error: h, text: l }));
                      }
                    }
                    c
                      ? (e.next(new li({ body: l, headers: s, status: i, statusText: o, url: a || void 0 })),
                        e.complete())
                      : e.error(new ci({ error: l, headers: s, status: i, statusText: o, url: a || void 0 }));
                  },
                  a = t => {
                    const { url: s } = r(),
                      i = new ci({
                        error: t,
                        status: n.status || 0,
                        statusText: n.statusText || 'Unknown Error',
                        url: s || void 0
                      });
                    e.error(i);
                  };
                let l = !1;
                const c = s => {
                    l || (e.next(r()), (l = !0));
                    let i = { type: ri.DownloadProgress, loaded: s.loaded };
                    s.lengthComputable && (i.total = s.total),
                      'text' === t.responseType && n.responseText && (i.partialText = n.responseText),
                      e.next(i);
                  },
                  h = t => {
                    let n = { type: ri.UploadProgress, loaded: t.loaded };
                    t.lengthComputable && (n.total = t.total), e.next(n);
                  };
                return (
                  n.addEventListener('load', o),
                  n.addEventListener('error', a),
                  t.reportProgress &&
                    (n.addEventListener('progress', c),
                    null !== s && n.upload && n.upload.addEventListener('progress', h)),
                  n.send(s),
                  e.next({ type: ri.Sent }),
                  () => {
                    n.removeEventListener('error', a),
                      n.removeEventListener('load', o),
                      t.reportProgress &&
                        (n.removeEventListener('progress', c),
                        null !== s && n.upload && n.upload.removeEventListener('progress', h)),
                      n.abort();
                  }
                );
              });
            }
          })();
      const yi = new s.p('XSRF_COOKIE_NAME'),
        vi = new s.p('XSRF_HEADER_NAME');
      class wi {}
      let Ci = (() =>
          class {
            constructor(t, e, n) {
              (this.doc = t),
                (this.platform = e),
                (this.cookieName = n),
                (this.lastCookieString = ''),
                (this.lastToken = null),
                (this.parseCount = 0);
            }
            getToken() {
              if ('server' === this.platform) return null;
              const t = this.doc.cookie || '';
              return (
                t !== this.lastCookieString &&
                  (this.parseCount++, (this.lastToken = Object(r.B)(t, this.cookieName)), (this.lastCookieString = t)),
                this.lastToken
              );
            }
          })(),
        xi = (() =>
          class {
            constructor(t, e) {
              (this.tokenService = t), (this.headerName = e);
            }
            intercept(t, e) {
              const n = t.url.toLowerCase();
              if ('GET' === t.method || 'HEAD' === t.method || n.startsWith('http://') || n.startsWith('https://'))
                return e.handle(t);
              const s = this.tokenService.getToken();
              return (
                null === s ||
                  t.headers.has(this.headerName) ||
                  (t = t.clone({ headers: t.headers.set(this.headerName, s) })),
                e.handle(t)
              );
            }
          })(),
        Ei = (() =>
          class {
            constructor(t, e) {
              (this.backend = t), (this.injector = e), (this.chain = null);
            }
            handle(t) {
              if (null === this.chain) {
                const t = this.injector.get(pi, []);
                this.chain = t.reduceRight((t, e) => new di(t, e), this.backend);
              }
              return this.chain.handle(t);
            }
          })(),
        Si = (() => {
          class t {
            static disable() {
              return { ngModule: t, providers: [{ provide: xi, useClass: mi }] };
            }
            static withOptions(e = {}) {
              return {
                ngModule: t,
                providers: [
                  e.cookieName ? { provide: yi, useValue: e.cookieName } : [],
                  e.headerName ? { provide: vi, useValue: e.headerName } : []
                ]
              };
            }
          }
          return t;
        })(),
        ki = (() => class {})();
      const Di = new Es('ErrorHandlerInterceptor');
      let Ai = (() => {
        class t {
          intercept(t, e) {
            return e.handle(t).pipe(Y(t => this.errorHandler(t)));
          }
          errorHandler(t) {
            throw (ws.a.production || Di.error('Request error', t), t);
          }
        }
        return (
          (t.ngInjectableDef = s.Ob({
            factory: function() {
              return new t();
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      const Ti = new Es('HttpCacheService'),
        Oi = 'httpCache';
      let Ii = (() => {
          class t {
            constructor() {
              (this.cachedData = {}), (this.storage = null), this.loadCacheData();
            }
            setCacheData(t, e, n) {
              (this.cachedData[t] = { lastUpdated: n || new Date(), data: e }),
                Ti.debug(`Cache set for key: "${t}"`),
                this.saveCacheData();
            }
            getCacheData(t) {
              const e = this.cachedData[t];
              return e ? (Ti.debug(`Cache hit for key: "${t}"`), e.data) : null;
            }
            getHttpCacheEntry(t) {
              return this.cachedData[t] || null;
            }
            clearCache(t) {
              delete this.cachedData[t], Ti.debug(`Cache cleared for key: "${t}"`), this.saveCacheData();
            }
            cleanCache(t) {
              t
                ? Object.entries(this.cachedData).forEach(([e, n]) => {
                    t >= n.lastUpdated && delete this.cachedData[e];
                  })
                : (this.cachedData = {}),
                this.saveCacheData();
            }
            setPersistence(t) {
              this.cleanCache(),
                (this.storage = 'local' === t || 'session' === t ? window[t + 'Storage'] : null),
                this.loadCacheData();
            }
            saveCacheData() {
              this.storage && this.storage.setItem(Oi, JSON.stringify(this.cachedData));
            }
            loadCacheData() {
              const t = this.storage ? this.storage.getItem(Oi) : null;
              this.cachedData = t ? JSON.parse(t) : {};
            }
          }
          return (
            (t.ngInjectableDef = s.Ob({
              factory: function() {
                return new t();
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        Ri = (() => {
          class t {
            constructor(t) {
              (this.httpCacheService = t), (this.forceUpdate = !1);
            }
            configure(e) {
              const n = new t(this.httpCacheService);
              return e && e.update && (n.forceUpdate = !0), n;
            }
            intercept(t, e) {
              return 'GET' !== t.method
                ? e.handle(t)
                : new m.a(n => {
                    const s = this.forceUpdate ? null : this.httpCacheService.getCacheData(t.urlWithParams);
                    null !== s
                      ? (n.next(new li(s)), n.complete())
                      : e.handle(t).subscribe(
                          e => {
                            e instanceof li && this.httpCacheService.setCacheData(t.urlWithParams, e), n.next(e);
                          },
                          t => n.error(t),
                          () => n.complete()
                        );
                  });
            }
          }
          return (
            (t.ngInjectableDef = s.Ob({
              factory: function() {
                return new t(s.Pb(Ii));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        Pi = (() => {
          class t {
            intercept(t, e) {
              return /^(http|https):/i.test(t.url) || (t = t.clone({ url: ws.a.serverUrl + t.url })), e.handle(t);
            }
          }
          return (
            (t.ngInjectableDef = s.Ob({
              factory: function() {
                return new t();
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })();
      class Ni {
        constructor(t, e) {
          (this.next = t), (this.interceptor = e);
        }
        handle(t) {
          return this.interceptor.intercept(t, this.next);
        }
      }
      const Mi = new s.p('HTTP_DYNAMIC_INTERCEPTORS');
      let Li = (() => {
        class t extends ui {
          constructor(t, e, n = []) {
            super(t),
              (this.httpHandler = t),
              (this.injector = e),
              (this.interceptors = n),
              this.interceptors || (this.interceptors = [this.injector.get(Pi), this.injector.get(Ai)]);
          }
          cache(t) {
            const e = this.injector.get(Ri).configure({ update: t });
            return this.addInterceptor(e);
          }
          skipErrorHandler() {
            return this.removeInterceptor(Ai);
          }
          disableApiPrefix() {
            return this.removeInterceptor(Pi);
          }
          request(t, e, n) {
            const s = this.interceptors.reduceRight((t, e) => new Ni(t, e), this.httpHandler);
            return new ui(s).request(t, e, n);
          }
          removeInterceptor(e) {
            return new t(this.httpHandler, this.injector, this.interceptors.filter(t => !(t instanceof e)));
          }
          addInterceptor(e) {
            return new t(this.httpHandler, this.injector, this.interceptors.concat([e]));
          }
        }
        return (
          (t.ngInjectableDef = s.Ob({
            factory: function() {
              return new t(s.Pb(Qs), s.Pb(s.n), s.Pb(Mi, 8));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      class ji extends Ln {
        shouldDetach(t) {
          return !1;
        }
        store(t, e) {}
        shouldAttach(t) {
          return !1;
        }
        retrieve(t) {
          return null;
        }
        shouldReuseRoute(t, e) {
          return t.routeConfig === e.routeConfig || t.data.reuse;
        }
      }
      function Fi(t) {
        return e => e.lift(new Bi(t));
      }
      class Bi {
        constructor(t) {
          this.notifier = t;
        }
        call(t, e) {
          const n = new Vi(t),
            s = Object(y.a)(n, this.notifier);
          return s && !n.seenValue ? (n.add(s), e.subscribe(n)) : n;
        }
      }
      class Vi extends _.a {
        constructor(t) {
          super(t), (this.seenValue = !1);
        }
        notifyNext(t, e, n, s, i) {
          (this.seenValue = !0), this.complete();
        }
        notifyComplete() {}
      }
      const Ui = Symbol('untilDestroyed'),
        Hi = new Es('App');
      class zi {
        constructor(t, e, n, s, i) {
          (this.router = t),
            (this.activatedRoute = e),
            (this.titleService = n),
            (this.translateService = s),
            (this.i18nService = i);
        }
        ngOnInit() {
          ws.a.production && Es.enableProductionMode(),
            Hi.debug('init'),
            this.i18nService.init(ws.a.defaultLanguage, ws.a.supportedLanguages);
          const t = this.router.events.pipe(I(t => t instanceof Dt));
          Object(vs.a)(this.translateService.onLangChange, t)
            .pipe(
              Object(D.a)(() => {
                let t = this.activatedRoute;
                for (; t.firstChild; ) t = t.firstChild;
                return t;
              }),
              I(t => 'primary' === t.outlet),
              it(t => t.data),
              (function(t, e = 'ngOnDestroy') {
                return n => {
                  const s = t[e],
                    i = 'function' == typeof s;
                  if (!i) throw new Error(`${t.constructor.name} is using untilDestroyed but doesn't implement ${e}`);
                  return (
                    t[Ui] ||
                      ((t[Ui] = new u.a()),
                      (t[e] = function() {
                        i && s.apply(this, arguments), t[Ui].next(), t[Ui].complete();
                      })),
                    n.pipe(Fi(t[Ui]))
                  );
                };
              })(this)
            )
            .subscribe(t => {
              const e = t.title;
              e && this.titleService.setTitle(this.translateService.instant(e));
            });
        }
        ngOnDestroy() {
          this.i18nService.destroy();
        }
      }
      class $i {}
      class qi {}
      const Wi = '*';
      function Ki(t, e = null) {
        return { type: 2, steps: t, options: e };
      }
      function Yi(t) {
        return { type: 6, styles: t, offset: null };
      }
      function Qi(t) {
        Promise.resolve(null).then(t);
      }
      class Gi {
        constructor(t = 0, e = 0) {
          (this._onDoneFns = []),
            (this._onStartFns = []),
            (this._onDestroyFns = []),
            (this._started = !1),
            (this._destroyed = !1),
            (this._finished = !1),
            (this.parentPlayer = null),
            (this.totalTime = t + e);
        }
        _onFinish() {
          this._finished || ((this._finished = !0), this._onDoneFns.forEach(t => t()), (this._onDoneFns = []));
        }
        onStart(t) {
          this._onStartFns.push(t);
        }
        onDone(t) {
          this._onDoneFns.push(t);
        }
        onDestroy(t) {
          this._onDestroyFns.push(t);
        }
        hasStarted() {
          return this._started;
        }
        init() {}
        play() {
          this.hasStarted() || (this._onStart(), this.triggerMicrotask()), (this._started = !0);
        }
        triggerMicrotask() {
          Qi(() => this._onFinish());
        }
        _onStart() {
          this._onStartFns.forEach(t => t()), (this._onStartFns = []);
        }
        pause() {}
        restart() {}
        finish() {
          this._onFinish();
        }
        destroy() {
          this._destroyed ||
            ((this._destroyed = !0),
            this.hasStarted() || this._onStart(),
            this.finish(),
            this._onDestroyFns.forEach(t => t()),
            (this._onDestroyFns = []));
        }
        reset() {}
        setPosition(t) {}
        getPosition() {
          return 0;
        }
        triggerCallback(t) {
          const e = 'start' == t ? this._onStartFns : this._onDoneFns;
          e.forEach(t => t()), (e.length = 0);
        }
      }
      class Zi {
        constructor(t) {
          (this._onDoneFns = []),
            (this._onStartFns = []),
            (this._finished = !1),
            (this._started = !1),
            (this._destroyed = !1),
            (this._onDestroyFns = []),
            (this.parentPlayer = null),
            (this.totalTime = 0),
            (this.players = t);
          let e = 0,
            n = 0,
            s = 0;
          const i = this.players.length;
          0 == i
            ? Qi(() => this._onFinish())
            : this.players.forEach(t => {
                t.onDone(() => {
                  ++e == i && this._onFinish();
                }),
                  t.onDestroy(() => {
                    ++n == i && this._onDestroy();
                  }),
                  t.onStart(() => {
                    ++s == i && this._onStart();
                  });
              }),
            (this.totalTime = this.players.reduce((t, e) => Math.max(t, e.totalTime), 0));
        }
        _onFinish() {
          this._finished || ((this._finished = !0), this._onDoneFns.forEach(t => t()), (this._onDoneFns = []));
        }
        init() {
          this.players.forEach(t => t.init());
        }
        onStart(t) {
          this._onStartFns.push(t);
        }
        _onStart() {
          this.hasStarted() || ((this._started = !0), this._onStartFns.forEach(t => t()), (this._onStartFns = []));
        }
        onDone(t) {
          this._onDoneFns.push(t);
        }
        onDestroy(t) {
          this._onDestroyFns.push(t);
        }
        hasStarted() {
          return this._started;
        }
        play() {
          this.parentPlayer || this.init(), this._onStart(), this.players.forEach(t => t.play());
        }
        pause() {
          this.players.forEach(t => t.pause());
        }
        restart() {
          this.players.forEach(t => t.restart());
        }
        finish() {
          this._onFinish(), this.players.forEach(t => t.finish());
        }
        destroy() {
          this._onDestroy();
        }
        _onDestroy() {
          this._destroyed ||
            ((this._destroyed = !0),
            this._onFinish(),
            this.players.forEach(t => t.destroy()),
            this._onDestroyFns.forEach(t => t()),
            (this._onDestroyFns = []));
        }
        reset() {
          this.players.forEach(t => t.reset()), (this._destroyed = !1), (this._finished = !1), (this._started = !1);
        }
        setPosition(t) {
          const e = t * this.totalTime;
          this.players.forEach(t => {
            const n = t.totalTime ? Math.min(1, e / t.totalTime) : 1;
            t.setPosition(n);
          });
        }
        getPosition() {
          let t = 0;
          return (
            this.players.forEach(e => {
              const n = e.getPosition();
              t = Math.min(n, t);
            }),
            t
          );
        }
        beforeDestroy() {
          this.players.forEach(t => {
            t.beforeDestroy && t.beforeDestroy();
          });
        }
        triggerCallback(t) {
          const e = 'start' == t ? this._onStartFns : this._onDoneFns;
          e.forEach(t => t()), (e.length = 0);
        }
      }
      const Xi = '!';
      function Ji() {
        throw Error('Host already has a portal attached');
      }
      class tr {
        attach(t) {
          return (
            null == t &&
              (function() {
                throw Error('Attempting to attach a portal to a null PortalOutlet');
              })(),
            t.hasAttached() && Ji(),
            (this._attachedHost = t),
            t.attach(this)
          );
        }
        detach() {
          let t = this._attachedHost;
          null == t
            ? (function() {
                throw Error('Attempting to detach a portal that is not attached to a host');
              })()
            : ((this._attachedHost = null), t.detach());
        }
        get isAttached() {
          return null != this._attachedHost;
        }
        setAttachedHost(t) {
          this._attachedHost = t;
        }
      }
      class er extends tr {
        constructor(t, e, n, s) {
          super(),
            (this.component = t),
            (this.viewContainerRef = e),
            (this.injector = n),
            (this.componentFactoryResolver = s);
        }
      }
      class nr extends tr {
        constructor(t, e, n) {
          super(), (this.templateRef = t), (this.viewContainerRef = e), (this.context = n);
        }
        get origin() {
          return this.templateRef.elementRef;
        }
        attach(t, e = this.context) {
          return (this.context = e), super.attach(t);
        }
        detach() {
          return (this.context = void 0), super.detach();
        }
      }
      class sr {
        constructor() {
          this._isDisposed = !1;
        }
        hasAttached() {
          return !!this._attachedPortal;
        }
        attach(t) {
          return (
            t ||
              (function() {
                throw Error('Must provide a portal to attach');
              })(),
            this.hasAttached() && Ji(),
            this._isDisposed &&
              (function() {
                throw Error('This PortalOutlet has already been disposed');
              })(),
            t instanceof er
              ? ((this._attachedPortal = t), this.attachComponentPortal(t))
              : t instanceof nr
              ? ((this._attachedPortal = t), this.attachTemplatePortal(t))
              : void (function() {
                  throw Error(
                    'Attempting to attach an unknown Portal type. BasePortalOutlet accepts either a ComponentPortal or a TemplatePortal.'
                  );
                })()
          );
        }
        detach() {
          this._attachedPortal && (this._attachedPortal.setAttachedHost(null), (this._attachedPortal = null)),
            this._invokeDisposeFn();
        }
        dispose() {
          this.hasAttached() && this.detach(), this._invokeDisposeFn(), (this._isDisposed = !0);
        }
        setDisposeFn(t) {
          this._disposeFn = t;
        }
        _invokeDisposeFn() {
          this._disposeFn && (this._disposeFn(), (this._disposeFn = null));
        }
      }
      class ir extends sr {
        constructor(t, e, n, s) {
          super(),
            (this.outletElement = t),
            (this._componentFactoryResolver = e),
            (this._appRef = n),
            (this._defaultInjector = s);
        }
        attachComponentPortal(t) {
          const e = (t.componentFactoryResolver || this._componentFactoryResolver).resolveComponentFactory(t.component);
          let n;
          return (
            t.viewContainerRef
              ? ((n = t.viewContainerRef.createComponent(
                  e,
                  t.viewContainerRef.length,
                  t.injector || t.viewContainerRef.injector
                )),
                this.setDisposeFn(() => n.destroy()))
              : ((n = e.create(t.injector || this._defaultInjector)),
                this._appRef.attachView(n.hostView),
                this.setDisposeFn(() => {
                  this._appRef.detachView(n.hostView), n.destroy();
                })),
            this.outletElement.appendChild(this._getComponentRootNode(n)),
            n
          );
        }
        attachTemplatePortal(t) {
          let e = t.viewContainerRef,
            n = e.createEmbeddedView(t.templateRef, t.context);
          return (
            n.detectChanges(),
            n.rootNodes.forEach(t => this.outletElement.appendChild(t)),
            this.setDisposeFn(() => {
              let t = e.indexOf(n);
              -1 !== t && e.remove(t);
            }),
            n
          );
        }
        dispose() {
          super.dispose(),
            null != this.outletElement.parentNode && this.outletElement.parentNode.removeChild(this.outletElement);
        }
        _getComponentRootNode(t) {
          return t.hostView.rootNodes[0];
        }
      }
      let rr = (() =>
          class extends sr {
            constructor(t, e) {
              super(),
                (this._componentFactoryResolver = t),
                (this._viewContainerRef = e),
                (this._isInitialized = !1),
                (this.attached = new s.m());
            }
            get portal() {
              return this._attachedPortal;
            }
            set portal(t) {
              (!this.hasAttached() || t || this._isInitialized) &&
                (this.hasAttached() && super.detach(), t && super.attach(t), (this._attachedPortal = t));
            }
            get attachedRef() {
              return this._attachedRef;
            }
            ngOnInit() {
              this._isInitialized = !0;
            }
            ngOnDestroy() {
              super.dispose(), (this._attachedPortal = null), (this._attachedRef = null);
            }
            attachComponentPortal(t) {
              t.setAttachedHost(this);
              const e = null != t.viewContainerRef ? t.viewContainerRef : this._viewContainerRef,
                n = (t.componentFactoryResolver || this._componentFactoryResolver).resolveComponentFactory(t.component),
                s = e.createComponent(n, e.length, t.injector || e.injector);
              return (
                super.setDisposeFn(() => s.destroy()),
                (this._attachedPortal = t),
                (this._attachedRef = s),
                this.attached.emit(s),
                s
              );
            }
            attachTemplatePortal(t) {
              t.setAttachedHost(this);
              const e = this._viewContainerRef.createEmbeddedView(t.templateRef, t.context);
              return (
                super.setDisposeFn(() => this._viewContainerRef.clear()),
                (this._attachedPortal = t),
                (this._attachedRef = e),
                this.attached.emit(e),
                e
              );
            }
          })(),
        or = (() => class {})();
      class ar {
        constructor(t, e) {
          (this._parentInjector = t), (this._customTokens = e);
        }
        get(t, e) {
          const n = this._customTokens.get(t);
          return void 0 !== n ? n : this._parentInjector.get(t, e);
        }
      }
      const lr = 9,
        cr = 27,
        hr = 37,
        ur = 38,
        dr = 39,
        pr = 40,
        mr = 48,
        fr = 57,
        gr = 65,
        br = 90;
      function _r(t, ...e) {
        return e.length ? e.some(e => t[e]) : t.altKey || t.shiftKey || t.ctrlKey || t.metaKey;
      }
      const yr = new s.p('cdk-dir-doc', {
        providedIn: 'root',
        factory: function() {
          return Object(s.V)(r.d);
        }
      });
      let vr = (() => {
          class t {
            constructor(t) {
              if (((this.value = 'ltr'), (this.change = new s.m()), t)) {
                const e = t.documentElement ? t.documentElement.dir : null,
                  n = (t.body ? t.body.dir : null) || e;
                this.value = 'ltr' === n || 'rtl' === n ? n : 'ltr';
              }
            }
            ngOnDestroy() {
              this.change.complete();
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(yr, 8));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        wr = (() => class {})();
      function Cr(t) {
        return null != t && 'false' !== `${t}`;
      }
      function xr(t, e = 0) {
        return (function(t) {
          return !isNaN(parseFloat(t)) && !isNaN(Number(t));
        })(t)
          ? Number(t)
          : e;
      }
      function Er(t) {
        return Array.isArray(t) ? t : [t];
      }
      function Sr(t) {
        return null == t ? '' : 'string' == typeof t ? t : `${t}px`;
      }
      function kr(t) {
        return t instanceof s.k ? t.nativeElement : t;
      }
      function Dr(t, e, n, s) {
        return (
          Object(gt.a)(n) && ((s = n), (n = void 0)),
          s
            ? Dr(t, e, n).pipe(Object(D.a)(t => (Object(b.a)(t) ? s(...t) : s(t))))
            : new m.a(s => {
                !(function t(e, n, s, i, r) {
                  let o;
                  if (
                    (function(t) {
                      return t && 'function' == typeof t.addEventListener && 'function' == typeof t.removeEventListener;
                    })(e)
                  ) {
                    const t = e;
                    e.addEventListener(n, s, r), (o = () => t.removeEventListener(n, s, r));
                  } else if (
                    (function(t) {
                      return t && 'function' == typeof t.on && 'function' == typeof t.off;
                    })(e)
                  ) {
                    const t = e;
                    e.on(n, s), (o = () => t.off(n, s));
                  } else if (
                    (function(t) {
                      return t && 'function' == typeof t.addListener && 'function' == typeof t.removeListener;
                    })(e)
                  ) {
                    const t = e;
                    e.addListener(n, s), (o = () => t.removeListener(n, s));
                  } else {
                    if (!e || !e.length) throw new TypeError('Invalid event target');
                    for (let o = 0, a = e.length; o < a; o++) t(e[o], n, s, i, r);
                  }
                  i.add(o);
                })(
                  t,
                  e,
                  function(t) {
                    s.next(arguments.length > 1 ? Array.prototype.slice.call(arguments) : t);
                  },
                  s,
                  n
                );
              })
        );
      }
      class Ar extends vt.a {
        constructor(t, e) {
          super();
        }
        schedule(t, e = 0) {
          return this;
        }
      }
      class Tr extends Ar {
        constructor(t, e) {
          super(t, e), (this.scheduler = t), (this.work = e), (this.pending = !1);
        }
        schedule(t, e = 0) {
          if (this.closed) return this;
          this.state = t;
          const n = this.id,
            s = this.scheduler;
          return (
            null != n && (this.id = this.recycleAsyncId(s, n, e)),
            (this.pending = !0),
            (this.delay = e),
            (this.id = this.id || this.requestAsyncId(s, this.id, e)),
            this
          );
        }
        requestAsyncId(t, e, n = 0) {
          return setInterval(t.flush.bind(t, this), n);
        }
        recycleAsyncId(t, e, n = 0) {
          if (null !== n && this.delay === n && !1 === this.pending) return e;
          clearInterval(e);
        }
        execute(t, e) {
          if (this.closed) return new Error('executing a cancelled action');
          this.pending = !1;
          const n = this._execute(t, e);
          if (n) return n;
          !1 === this.pending && null != this.id && (this.id = this.recycleAsyncId(this.scheduler, this.id, null));
        }
        _execute(t, e) {
          let n = !1,
            s = void 0;
          try {
            this.work(t);
          } catch (i) {
            (n = !0), (s = (!!i && i) || new Error(i));
          }
          if (n) return this.unsubscribe(), s;
        }
        _unsubscribe() {
          const t = this.id,
            e = this.scheduler,
            n = e.actions,
            s = n.indexOf(this);
          (this.work = null),
            (this.state = null),
            (this.pending = !1),
            (this.scheduler = null),
            -1 !== s && n.splice(s, 1),
            null != t && (this.id = this.recycleAsyncId(e, t, null)),
            (this.delay = null);
        }
      }
      let Or = (() => {
        class t {
          constructor(e, n = t.now) {
            (this.SchedulerAction = e), (this.now = n);
          }
          schedule(t, e = 0, n) {
            return new this.SchedulerAction(this, t).schedule(n, e);
          }
        }
        return (t.now = () => Date.now()), t;
      })();
      class Ir extends Or {
        constructor(t, e = Or.now) {
          super(t, () => (Ir.delegate && Ir.delegate !== this ? Ir.delegate.now() : e())),
            (this.actions = []),
            (this.active = !1),
            (this.scheduled = void 0);
        }
        schedule(t, e = 0, n) {
          return Ir.delegate && Ir.delegate !== this ? Ir.delegate.schedule(t, e, n) : super.schedule(t, e, n);
        }
        flush(t) {
          const { actions: e } = this;
          if (this.active) return void e.push(t);
          let n;
          this.active = !0;
          do {
            if ((n = t.execute(t.state, t.delay))) break;
          } while ((t = e.shift()));
          if (((this.active = !1), n)) {
            for (; (t = e.shift()); ) t.unsubscribe();
            throw n;
          }
        }
      }
      let Rr = 1;
      const Pr = {},
        Nr = {
          setImmediate(t) {
            const e = Rr++;
            return (
              (Pr[e] = t),
              Promise.resolve().then(() =>
                (function(t) {
                  const e = Pr[t];
                  e && e();
                })(e)
              ),
              e
            );
          },
          clearImmediate(t) {
            delete Pr[t];
          }
        };
      class Mr extends Tr {
        constructor(t, e) {
          super(t, e), (this.scheduler = t), (this.work = e);
        }
        requestAsyncId(t, e, n = 0) {
          return null !== n && n > 0
            ? super.requestAsyncId(t, e, n)
            : (t.actions.push(this), t.scheduled || (t.scheduled = Nr.setImmediate(t.flush.bind(t, null))));
        }
        recycleAsyncId(t, e, n = 0) {
          if ((null !== n && n > 0) || (null === n && this.delay > 0)) return super.recycleAsyncId(t, e, n);
          0 === t.actions.length && (Nr.clearImmediate(e), (t.scheduled = void 0));
        }
      }
      class Lr extends Ir {
        flush(t) {
          (this.active = !0), (this.scheduled = void 0);
          const { actions: e } = this;
          let n,
            s = -1,
            i = e.length;
          t = t || e.shift();
          do {
            if ((n = t.execute(t.state, t.delay))) break;
          } while (++s < i && (t = e.shift()));
          if (((this.active = !1), n)) {
            for (; ++s < i && (t = e.shift()); ) t.unsubscribe();
            throw n;
          }
        }
      }
      const jr = new Lr(Mr);
      class Fr {
        constructor(t, e) {
          (this.compare = t), (this.keySelector = e);
        }
        call(t, e) {
          return e.subscribe(new Br(t, this.compare, this.keySelector));
        }
      }
      class Br extends O.a {
        constructor(t, e, n) {
          super(t), (this.keySelector = n), (this.hasKey = !1), 'function' == typeof e && (this.compare = e);
        }
        compare(t, e) {
          return t === e;
        }
        _next(t) {
          let e;
          try {
            const { keySelector: n } = this;
            e = n ? n(t) : t;
          } catch (s) {
            return this.destination.error(s);
          }
          let n = !1;
          if (this.hasKey)
            try {
              const { compare: t } = this;
              n = t(this.key, e);
            } catch (s) {
              return this.destination.error(s);
            }
          else this.hasKey = !0;
          n || ((this.key = e), this.destination.next(t));
        }
      }
      const Vr = new Ir(Tr);
      class Ur {
        constructor(t) {
          this.durationSelector = t;
        }
        call(t, e) {
          return e.subscribe(new Hr(t, this.durationSelector));
        }
      }
      class Hr extends _.a {
        constructor(t, e) {
          super(t), (this.durationSelector = e), (this.hasValue = !1);
        }
        _next(t) {
          if (((this.value = t), (this.hasValue = !0), !this.throttled)) {
            let n;
            try {
              const { durationSelector: s } = this;
              n = s(t);
            } catch (e) {
              return this.destination.error(e);
            }
            const s = Object(y.a)(this, n);
            !s || s.closed ? this.clearThrottle() : this.add((this.throttled = s));
          }
        }
        clearThrottle() {
          const { value: t, hasValue: e, throttled: n } = this;
          n && (this.remove(n), (this.throttled = null), n.unsubscribe()),
            e && ((this.value = null), (this.hasValue = !1), this.destination.next(t));
        }
        notifyNext(t, e, n, s) {
          this.clearThrottle();
        }
        notifyComplete() {
          this.clearThrottle();
        }
      }
      function zr(t) {
        return !Object(b.a)(t) && t - parseFloat(t) + 1 >= 0;
      }
      function $r(t) {
        const { index: e, period: n, subscriber: s } = t;
        if ((s.next(e), !s.closed)) {
          if (-1 === n) return s.complete();
          (t.index = e + 1), this.schedule(t, n);
        }
      }
      function qr(t, e = Vr) {
        return (
          (n = () =>
            (function(t = 0, e, n) {
              let s = -1;
              return (
                zr(e) ? (s = Number(e) < 1 ? 1 : Number(e)) : Object(o.a)(e) && (n = e),
                Object(o.a)(n) || (n = Vr),
                new m.a(e => {
                  const i = zr(t) ? t : +t - n.now();
                  return n.schedule($r, i, { index: 0, period: s, subscriber: e });
                })
              );
            })(t, e)),
          function(t) {
            return t.lift(new Ur(n));
          }
        );
        var n;
      }
      function Wr(t, e) {
        return new m.a(e ? n => e.schedule(Kr, 0, { error: t, subscriber: n }) : e => e.error(t));
      }
      function Kr({ error: t, subscriber: e }) {
        e.error(t);
      }
      let Yr,
        Qr = (() => {
          class t {
            constructor(t, e, n) {
              (this.kind = t), (this.value = e), (this.error = n), (this.hasValue = 'N' === t);
            }
            observe(t) {
              switch (this.kind) {
                case 'N':
                  return t.next && t.next(this.value);
                case 'E':
                  return t.error && t.error(this.error);
                case 'C':
                  return t.complete && t.complete();
              }
            }
            do(t, e, n) {
              switch (this.kind) {
                case 'N':
                  return t && t(this.value);
                case 'E':
                  return e && e(this.error);
                case 'C':
                  return n && n();
              }
            }
            accept(t, e, n) {
              return t && 'function' == typeof t.next ? this.observe(t) : this.do(t, e, n);
            }
            toObservable() {
              switch (this.kind) {
                case 'N':
                  return c(this.value);
                case 'E':
                  return Wr(this.error);
                case 'C':
                  return S();
              }
              throw new Error('unexpected notification kind value');
            }
            static createNext(e) {
              return void 0 !== e ? new t('N', e) : t.undefinedValueNotification;
            }
            static createError(e) {
              return new t('E', void 0, e);
            }
            static createComplete() {
              return t.completeNotification;
            }
          }
          return (t.completeNotification = new t('C')), (t.undefinedValueNotification = new t('N', void 0)), t;
        })();
      n('Ylt2');
      try {
        Yr = 'undefined' != typeof Intl && Intl.v8BreakIterator;
      } catch (kb) {
        Yr = !1;
      }
      let Gr,
        Zr = (() => {
          class t {
            constructor(t) {
              (this._platformId = t),
                (this.isBrowser = this._platformId
                  ? Object(r.t)(this._platformId)
                  : 'object' == typeof document && !!document),
                (this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent)),
                (this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent)),
                (this.BLINK =
                  this.isBrowser &&
                  !(!window.chrome && !Yr) &&
                  'undefined' != typeof CSS &&
                  !this.EDGE &&
                  !this.TRIDENT),
                (this.WEBKIT =
                  this.isBrowser &&
                  /AppleWebKit/i.test(navigator.userAgent) &&
                  !this.BLINK &&
                  !this.EDGE &&
                  !this.TRIDENT),
                (this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window)),
                (this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent)),
                (this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT),
                (this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT);
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(s.A, 8));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        Xr = (() => class {})();
      function Jr(t) {
        return (function() {
          if (null == Gr && 'undefined' != typeof window)
            try {
              window.addEventListener('test', null, Object.defineProperty({}, 'passive', { get: () => (Gr = !0) }));
            } finally {
              Gr = Gr || !1;
            }
          return Gr;
        })()
          ? t
          : !!t.capture;
      }
      const to = (function() {
        var t = { NORMAL: 0, NEGATED: 1, INVERTED: 2 };
        return (t[t.NORMAL] = 'NORMAL'), (t[t.NEGATED] = 'NEGATED'), (t[t.INVERTED] = 'INVERTED'), t;
      })();
      let eo;
      function no() {
        if ('object' != typeof document || !document) return to.NORMAL;
        if (!eo) {
          const t = document.createElement('div'),
            e = t.style;
          (t.dir = 'rtl'),
            (e.height = '1px'),
            (e.width = '1px'),
            (e.overflow = 'auto'),
            (e.visibility = 'hidden'),
            (e.pointerEvents = 'none'),
            (e.position = 'absolute');
          const n = document.createElement('div'),
            s = n.style;
          (s.width = '2px'),
            (s.height = '1px'),
            t.appendChild(n),
            document.body.appendChild(t),
            (eo = to.NORMAL),
            0 === t.scrollLeft && ((t.scrollLeft = 1), (eo = 0 === t.scrollLeft ? to.NEGATED : to.INVERTED)),
            t.parentNode.removeChild(t);
        }
        return eo;
      }
      const so = 20;
      let io = (() => {
          class t {
            constructor(t, e) {
              (this._ngZone = t),
                (this._platform = e),
                (this._scrolled = new u.a()),
                (this._globalSubscription = null),
                (this._scrolledCount = 0),
                (this.scrollContainers = new Map());
            }
            register(t) {
              this.scrollContainers.has(t) ||
                this.scrollContainers.set(t, t.elementScrolled().subscribe(() => this._scrolled.next(t)));
            }
            deregister(t) {
              const e = this.scrollContainers.get(t);
              e && (e.unsubscribe(), this.scrollContainers.delete(t));
            }
            scrolled(t = so) {
              return this._platform.isBrowser
                ? new m.a(e => {
                    this._globalSubscription || this._addGlobalListener();
                    const n = t > 0 ? this._scrolled.pipe(qr(t)).subscribe(e) : this._scrolled.subscribe(e);
                    return (
                      this._scrolledCount++,
                      () => {
                        n.unsubscribe(), this._scrolledCount--, this._scrolledCount || this._removeGlobalListener();
                      }
                    );
                  })
                : c();
            }
            ngOnDestroy() {
              this._removeGlobalListener(),
                this.scrollContainers.forEach((t, e) => this.deregister(e)),
                this._scrolled.complete();
            }
            ancestorScrolled(t, e) {
              const n = this.getAncestorScrollContainers(t);
              return this.scrolled(e).pipe(I(t => !t || n.indexOf(t) > -1));
            }
            getAncestorScrollContainers(t) {
              const e = [];
              return (
                this.scrollContainers.forEach((n, s) => {
                  this._scrollableContainsElement(s, t) && e.push(s);
                }),
                e
              );
            }
            _scrollableContainsElement(t, e) {
              let n = e.nativeElement,
                s = t.getElementRef().nativeElement;
              do {
                if (n == s) return !0;
              } while ((n = n.parentElement));
              return !1;
            }
            _addGlobalListener() {
              this._globalSubscription = this._ngZone.runOutsideAngular(() =>
                Dr(window.document, 'scroll').subscribe(() => this._scrolled.next())
              );
            }
            _removeGlobalListener() {
              this._globalSubscription && (this._globalSubscription.unsubscribe(), (this._globalSubscription = null));
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(s.y), Object(s.Pb)(Zr));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        ro = (() =>
          class {
            constructor(t, e, n, s) {
              (this.elementRef = t),
                (this.scrollDispatcher = e),
                (this.ngZone = n),
                (this.dir = s),
                (this._destroyed = new u.a()),
                (this._elementScrolled = new m.a(t =>
                  this.ngZone.runOutsideAngular(() =>
                    Dr(this.elementRef.nativeElement, 'scroll')
                      .pipe(Fi(this._destroyed))
                      .subscribe(t)
                  )
                ));
            }
            ngOnInit() {
              this.scrollDispatcher.register(this);
            }
            ngOnDestroy() {
              this.scrollDispatcher.deregister(this), this._destroyed.next(), this._destroyed.complete();
            }
            elementScrolled() {
              return this._elementScrolled;
            }
            getElementRef() {
              return this.elementRef;
            }
            scrollTo(t) {
              const e = this.elementRef.nativeElement,
                n = this.dir && 'rtl' == this.dir.value;
              (t.left = null == t.left ? (n ? t.end : t.start) : t.left),
                (t.right = null == t.right ? (n ? t.start : t.end) : t.right),
                null != t.bottom && (t.top = e.scrollHeight - e.clientHeight - t.bottom),
                n && no() != to.NORMAL
                  ? (null != t.left && (t.right = e.scrollWidth - e.clientWidth - t.left),
                    no() == to.INVERTED
                      ? (t.left = t.right)
                      : no() == to.NEGATED && (t.left = t.right ? -t.right : t.right))
                  : null != t.right && (t.left = e.scrollWidth - e.clientWidth - t.right),
                this._applyScrollToOptions(t);
            }
            _applyScrollToOptions(t) {
              const e = this.elementRef.nativeElement;
              'object' == typeof document && 'scrollBehavior' in document.documentElement.style
                ? e.scrollTo(t)
                : (null != t.top && (e.scrollTop = t.top), null != t.left && (e.scrollLeft = t.left));
            }
            measureScrollOffset(t) {
              const e = this.elementRef.nativeElement;
              if ('top' == t) return e.scrollTop;
              if ('bottom' == t) return e.scrollHeight - e.clientHeight - e.scrollTop;
              const n = this.dir && 'rtl' == this.dir.value;
              return (
                'start' == t ? (t = n ? 'right' : 'left') : 'end' == t && (t = n ? 'left' : 'right'),
                n && no() == to.INVERTED
                  ? 'left' == t
                    ? e.scrollWidth - e.clientWidth - e.scrollLeft
                    : e.scrollLeft
                  : n && no() == to.NEGATED
                  ? 'left' == t
                    ? e.scrollLeft + e.scrollWidth - e.clientWidth
                    : -e.scrollLeft
                  : 'left' == t
                  ? e.scrollLeft
                  : e.scrollWidth - e.clientWidth - e.scrollLeft
              );
            }
          })(),
        oo = (() => class {})();
      const ao = 20;
      let lo = (() => {
        class t {
          constructor(t, e) {
            (this._platform = t),
              e.runOutsideAngular(() => {
                (this._change = t.isBrowser
                  ? Object(vs.a)(Dr(window, 'resize'), Dr(window, 'orientationchange'))
                  : c()),
                  (this._invalidateCache = this.change().subscribe(() => this._updateViewportSize()));
              });
          }
          ngOnDestroy() {
            this._invalidateCache.unsubscribe();
          }
          getViewportSize() {
            this._viewportSize || this._updateViewportSize();
            const t = { width: this._viewportSize.width, height: this._viewportSize.height };
            return this._platform.isBrowser || (this._viewportSize = null), t;
          }
          getViewportRect() {
            const t = this.getViewportScrollPosition(),
              { width: e, height: n } = this.getViewportSize();
            return { top: t.top, left: t.left, bottom: t.top + n, right: t.left + e, height: n, width: e };
          }
          getViewportScrollPosition() {
            if (!this._platform.isBrowser) return { top: 0, left: 0 };
            const t = document.documentElement,
              e = t.getBoundingClientRect();
            return {
              top: -e.top || document.body.scrollTop || window.scrollY || t.scrollTop || 0,
              left: -e.left || document.body.scrollLeft || window.scrollX || t.scrollLeft || 0
            };
          }
          change(t = ao) {
            return t > 0 ? this._change.pipe(qr(t)) : this._change;
          }
          _updateViewportSize() {
            this._viewportSize = this._platform.isBrowser
              ? { width: window.innerWidth, height: window.innerHeight }
              : { width: 0, height: 0 };
          }
        }
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            factory: function() {
              return new t(Object(s.Pb)(Zr), Object(s.Pb)(s.y));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      class co {
        constructor(t, e) {
          (this._viewportRuler = t),
            (this._previousHTMLStyles = { top: '', left: '' }),
            (this._isEnabled = !1),
            (this._document = e);
        }
        attach() {}
        enable() {
          if (this._canBeEnabled()) {
            const t = this._document.documentElement;
            (this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition()),
              (this._previousHTMLStyles.left = t.style.left || ''),
              (this._previousHTMLStyles.top = t.style.top || ''),
              (t.style.left = Sr(-this._previousScrollPosition.left)),
              (t.style.top = Sr(-this._previousScrollPosition.top)),
              t.classList.add('cdk-global-scrollblock'),
              (this._isEnabled = !0);
          }
        }
        disable() {
          if (this._isEnabled) {
            const t = this._document.documentElement,
              e = t.style,
              n = this._document.body.style,
              s = e.scrollBehavior || '',
              i = n.scrollBehavior || '';
            (this._isEnabled = !1),
              (e.left = this._previousHTMLStyles.left),
              (e.top = this._previousHTMLStyles.top),
              t.classList.remove('cdk-global-scrollblock'),
              (e.scrollBehavior = n.scrollBehavior = 'auto'),
              window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top),
              (e.scrollBehavior = s),
              (n.scrollBehavior = i);
          }
        }
        _canBeEnabled() {
          if (this._document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) return !1;
          const t = this._document.body,
            e = this._viewportRuler.getViewportSize();
          return t.scrollHeight > e.height || t.scrollWidth > e.width;
        }
      }
      function ho() {
        return Error('Scroll strategy has already been attached.');
      }
      class uo {
        constructor(t, e, n, s) {
          (this._scrollDispatcher = t),
            (this._ngZone = e),
            (this._viewportRuler = n),
            (this._config = s),
            (this._scrollSubscription = null),
            (this._detach = () => {
              this.disable(), this._overlayRef.hasAttached() && this._ngZone.run(() => this._overlayRef.detach());
            });
        }
        attach(t) {
          if (this._overlayRef) throw ho();
          this._overlayRef = t;
        }
        enable() {
          if (this._scrollSubscription) return;
          const t = this._scrollDispatcher.scrolled(0);
          this._config && this._config.threshold && this._config.threshold > 1
            ? ((this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top),
              (this._scrollSubscription = t.subscribe(() => {
                const t = this._viewportRuler.getViewportScrollPosition().top;
                Math.abs(t - this._initialScrollPosition) > this._config.threshold
                  ? this._detach()
                  : this._overlayRef.updatePosition();
              })))
            : (this._scrollSubscription = t.subscribe(this._detach));
        }
        disable() {
          this._scrollSubscription && (this._scrollSubscription.unsubscribe(), (this._scrollSubscription = null));
        }
        detach() {
          this.disable(), (this._overlayRef = null);
        }
      }
      class po {
        enable() {}
        disable() {}
        attach() {}
      }
      function mo(t, e) {
        return e.some(e => t.bottom < e.top || t.top > e.bottom || t.right < e.left || t.left > e.right);
      }
      function fo(t, e) {
        return e.some(e => t.top < e.top || t.bottom > e.bottom || t.left < e.left || t.right > e.right);
      }
      class go {
        constructor(t, e, n, s) {
          (this._scrollDispatcher = t),
            (this._viewportRuler = e),
            (this._ngZone = n),
            (this._config = s),
            (this._scrollSubscription = null);
        }
        attach(t) {
          if (this._overlayRef) throw ho();
          this._overlayRef = t;
        }
        enable() {
          this._scrollSubscription ||
            (this._scrollSubscription = this._scrollDispatcher
              .scrolled(this._config ? this._config.scrollThrottle : 0)
              .subscribe(() => {
                if ((this._overlayRef.updatePosition(), this._config && this._config.autoClose)) {
                  const t = this._overlayRef.overlayElement.getBoundingClientRect(),
                    { width: e, height: n } = this._viewportRuler.getViewportSize();
                  mo(t, [{ width: e, height: n, bottom: n, right: e, top: 0, left: 0 }]) &&
                    (this.disable(), this._ngZone.run(() => this._overlayRef.detach()));
                }
              }));
        }
        disable() {
          this._scrollSubscription && (this._scrollSubscription.unsubscribe(), (this._scrollSubscription = null));
        }
        detach() {
          this.disable(), (this._overlayRef = null);
        }
      }
      let bo = (() => {
        class t {
          constructor(t, e, n, s) {
            (this._scrollDispatcher = t),
              (this._viewportRuler = e),
              (this._ngZone = n),
              (this.noop = () => new po()),
              (this.close = t => new uo(this._scrollDispatcher, this._ngZone, this._viewportRuler, t)),
              (this.block = () => new co(this._viewportRuler, this._document)),
              (this.reposition = t => new go(this._scrollDispatcher, this._viewportRuler, this._ngZone, t)),
              (this._document = s);
          }
        }
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            factory: function() {
              return new t(Object(s.Pb)(io), Object(s.Pb)(lo), Object(s.Pb)(s.y), Object(s.Pb)(r.d));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      class _o {
        constructor(t) {
          if (
            ((this.scrollStrategy = new po()),
            (this.panelClass = ''),
            (this.hasBackdrop = !1),
            (this.backdropClass = 'cdk-overlay-dark-backdrop'),
            (this.disposeOnNavigation = !1),
            t)
          ) {
            const e = Object.keys(t);
            for (const n of e) void 0 !== t[n] && (this[n] = t[n]);
          }
        }
      }
      class yo {
        constructor(t, e, n, s, i) {
          (this.offsetX = n),
            (this.offsetY = s),
            (this.panelClass = i),
            (this.originX = t.originX),
            (this.originY = t.originY),
            (this.overlayX = e.overlayX),
            (this.overlayY = e.overlayY);
        }
      }
      let vo = (() =>
        class {
          constructor(t, e) {
            (this.connectionPair = t), (this.scrollableViewProperties = e);
          }
        })();
      function wo(t, e) {
        if ('top' !== e && 'bottom' !== e && 'center' !== e)
          throw Error(`ConnectedPosition: Invalid ${t} "${e}". ` + 'Expected "top", "bottom" or "center".');
      }
      function Co(t, e) {
        if ('start' !== e && 'end' !== e && 'center' !== e)
          throw Error(`ConnectedPosition: Invalid ${t} "${e}". ` + 'Expected "start", "end" or "center".');
      }
      let xo = (() => {
          class t {
            constructor(t) {
              (this._attachedOverlays = []),
                (this._keydownListener = t => {
                  const e = this._attachedOverlays;
                  for (let n = e.length - 1; n > -1; n--)
                    if (e[n]._keydownEventSubscriptions > 0) {
                      e[n]._keydownEvents.next(t);
                      break;
                    }
                }),
                (this._document = t);
            }
            ngOnDestroy() {
              this._detach();
            }
            add(t) {
              this.remove(t),
                this._isAttached ||
                  (this._document.body.addEventListener('keydown', this._keydownListener), (this._isAttached = !0)),
                this._attachedOverlays.push(t);
            }
            remove(t) {
              const e = this._attachedOverlays.indexOf(t);
              e > -1 && this._attachedOverlays.splice(e, 1), 0 === this._attachedOverlays.length && this._detach();
            }
            _detach() {
              this._isAttached &&
                (this._document.body.removeEventListener('keydown', this._keydownListener), (this._isAttached = !1));
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(r.d));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        Eo = (() => {
          class t {
            constructor(t) {
              this._document = t;
            }
            ngOnDestroy() {
              this._containerElement &&
                this._containerElement.parentNode &&
                this._containerElement.parentNode.removeChild(this._containerElement);
            }
            getContainerElement() {
              return this._containerElement || this._createContainer(), this._containerElement;
            }
            _createContainer() {
              const t = this._document.getElementsByClassName('cdk-overlay-container');
              for (let n = 0; n < t.length; n++) t[n].parentNode.removeChild(t[n]);
              const e = this._document.createElement('div');
              e.classList.add('cdk-overlay-container'),
                this._document.body.appendChild(e),
                (this._containerElement = e);
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(r.d));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })();
      class So {
        constructor(t, e, n, s, i, r, o, a) {
          (this._portalOutlet = t),
            (this._host = e),
            (this._pane = n),
            (this._config = s),
            (this._ngZone = i),
            (this._keyboardDispatcher = r),
            (this._document = o),
            (this._location = a),
            (this._backdropElement = null),
            (this._backdropClick = new u.a()),
            (this._attachments = new u.a()),
            (this._detachments = new u.a()),
            (this._locationChanges = vt.a.EMPTY),
            (this._backdropClickHandler = t => this._backdropClick.next(t)),
            (this._keydownEventsObservable = new m.a(t => {
              const e = this._keydownEvents.subscribe(t);
              return (
                this._keydownEventSubscriptions++,
                () => {
                  e.unsubscribe(), this._keydownEventSubscriptions--;
                }
              );
            })),
            (this._keydownEvents = new u.a()),
            (this._keydownEventSubscriptions = 0),
            s.scrollStrategy && ((this._scrollStrategy = s.scrollStrategy), this._scrollStrategy.attach(this)),
            (this._positionStrategy = s.positionStrategy);
        }
        get overlayElement() {
          return this._pane;
        }
        get backdropElement() {
          return this._backdropElement;
        }
        get hostElement() {
          return this._host;
        }
        attach(t) {
          let e = this._portalOutlet.attach(t);
          return (
            this._positionStrategy && this._positionStrategy.attach(this),
            !this._host.parentElement && this._previousHostParent && this._previousHostParent.appendChild(this._host),
            this._updateStackingOrder(),
            this._updateElementSize(),
            this._updateElementDirection(),
            this._scrollStrategy && this._scrollStrategy.enable(),
            this._ngZone.onStable
              .asObservable()
              .pipe(Z(1))
              .subscribe(() => {
                this.hasAttached() && this.updatePosition();
              }),
            this._togglePointerEvents(!0),
            this._config.hasBackdrop && this._attachBackdrop(),
            this._config.panelClass && this._toggleClasses(this._pane, this._config.panelClass, !0),
            this._attachments.next(),
            this._keyboardDispatcher.add(this),
            this._config.disposeOnNavigation &&
              this._location &&
              (this._locationChanges = this._location.subscribe(() => this.dispose())),
            e
          );
        }
        detach() {
          if (!this.hasAttached()) return;
          this.detachBackdrop(),
            this._togglePointerEvents(!1),
            this._positionStrategy && this._positionStrategy.detach && this._positionStrategy.detach(),
            this._scrollStrategy && this._scrollStrategy.disable();
          const t = this._portalOutlet.detach();
          return (
            this._detachments.next(),
            this._keyboardDispatcher.remove(this),
            this._detachContentWhenStable(),
            this._locationChanges.unsubscribe(),
            t
          );
        }
        dispose() {
          const t = this.hasAttached();
          this._positionStrategy && this._positionStrategy.dispose(),
            this._disposeScrollStrategy(),
            this.detachBackdrop(),
            this._locationChanges.unsubscribe(),
            this._keyboardDispatcher.remove(this),
            this._portalOutlet.dispose(),
            this._attachments.complete(),
            this._backdropClick.complete(),
            this._keydownEvents.complete(),
            this._host && this._host.parentNode && (this._host.parentNode.removeChild(this._host), (this._host = null)),
            (this._previousHostParent = this._pane = null),
            t && this._detachments.next(),
            this._detachments.complete();
        }
        hasAttached() {
          return this._portalOutlet.hasAttached();
        }
        backdropClick() {
          return this._backdropClick.asObservable();
        }
        attachments() {
          return this._attachments.asObservable();
        }
        detachments() {
          return this._detachments.asObservable();
        }
        keydownEvents() {
          return this._keydownEventsObservable;
        }
        getConfig() {
          return this._config;
        }
        updatePosition() {
          this._positionStrategy && this._positionStrategy.apply();
        }
        updatePositionStrategy(t) {
          t !== this._positionStrategy &&
            (this._positionStrategy && this._positionStrategy.dispose(),
            (this._positionStrategy = t),
            this.hasAttached() && (t.attach(this), this.updatePosition()));
        }
        updateSize(t) {
          (this._config = Object.assign({}, this._config, t)), this._updateElementSize();
        }
        setDirection(t) {
          (this._config = Object.assign({}, this._config, { direction: t })), this._updateElementDirection();
        }
        addPanelClass(t) {
          this._pane && this._toggleClasses(this._pane, t, !0);
        }
        removePanelClass(t) {
          this._pane && this._toggleClasses(this._pane, t, !1);
        }
        getDirection() {
          const t = this._config.direction;
          return t ? ('string' == typeof t ? t : t.value) : 'ltr';
        }
        updateScrollStrategy(t) {
          t !== this._scrollStrategy &&
            (this._disposeScrollStrategy(),
            (this._scrollStrategy = t),
            this.hasAttached() && (t.attach(this), t.enable()));
        }
        _updateElementDirection() {
          this._host.setAttribute('dir', this.getDirection());
        }
        _updateElementSize() {
          const t = this._pane.style;
          (t.width = Sr(this._config.width)),
            (t.height = Sr(this._config.height)),
            (t.minWidth = Sr(this._config.minWidth)),
            (t.minHeight = Sr(this._config.minHeight)),
            (t.maxWidth = Sr(this._config.maxWidth)),
            (t.maxHeight = Sr(this._config.maxHeight));
        }
        _togglePointerEvents(t) {
          this._pane.style.pointerEvents = t ? 'auto' : 'none';
        }
        _attachBackdrop() {
          (this._backdropElement = this._document.createElement('div')),
            this._backdropElement.classList.add('cdk-overlay-backdrop'),
            this._config.backdropClass && this._toggleClasses(this._backdropElement, this._config.backdropClass, !0),
            this._host.parentElement.insertBefore(this._backdropElement, this._host),
            this._backdropElement.addEventListener('click', this._backdropClickHandler),
            'undefined' != typeof requestAnimationFrame
              ? this._ngZone.runOutsideAngular(() => {
                  requestAnimationFrame(() => {
                    this._backdropElement && this._backdropElement.classList.add('cdk-overlay-backdrop-showing');
                  });
                })
              : this._backdropElement.classList.add('cdk-overlay-backdrop-showing');
        }
        _updateStackingOrder() {
          this._host.nextSibling && this._host.parentNode.appendChild(this._host);
        }
        detachBackdrop() {
          let t,
            e = this._backdropElement;
          if (!e) return;
          let n = () => {
            e &&
              (e.removeEventListener('click', this._backdropClickHandler),
              e.removeEventListener('transitionend', n),
              e.parentNode && e.parentNode.removeChild(e)),
              this._backdropElement == e && (this._backdropElement = null),
              this._config.backdropClass && this._toggleClasses(e, this._config.backdropClass, !1),
              clearTimeout(t);
          };
          e.classList.remove('cdk-overlay-backdrop-showing'),
            this._ngZone.runOutsideAngular(() => {
              e.addEventListener('transitionend', n);
            }),
            (e.style.pointerEvents = 'none'),
            (t = this._ngZone.runOutsideAngular(() => setTimeout(n, 500)));
        }
        _toggleClasses(t, e, n) {
          const s = t.classList;
          Er(e).forEach(t => {
            n ? s.add(t) : s.remove(t);
          });
        }
        _detachContentWhenStable() {
          this._ngZone.runOutsideAngular(() => {
            const t = this._ngZone.onStable
              .asObservable()
              .pipe(Fi(Object(vs.a)(this._attachments, this._detachments)))
              .subscribe(() => {
                (this._pane && this._host && 0 !== this._pane.children.length) ||
                  (this._pane &&
                    this._config.panelClass &&
                    this._toggleClasses(this._pane, this._config.panelClass, !1),
                  this._host &&
                    this._host.parentElement &&
                    ((this._previousHostParent = this._host.parentElement),
                    this._previousHostParent.removeChild(this._host)),
                  t.unsubscribe());
              });
          });
        }
        _disposeScrollStrategy() {
          const t = this._scrollStrategy;
          t && (t.disable(), t.detach && t.detach());
        }
      }
      const ko = 'cdk-overlay-connected-position-bounding-box';
      class Do {
        constructor(t, e, n, s, i) {
          (this._viewportRuler = e),
            (this._document = n),
            (this._platform = s),
            (this._overlayContainer = i),
            (this._lastBoundingBoxSize = { width: 0, height: 0 }),
            (this._isPushed = !1),
            (this._canPush = !0),
            (this._growAfterOpen = !1),
            (this._hasFlexibleDimensions = !0),
            (this._positionLocked = !1),
            (this._viewportMargin = 0),
            (this._scrollables = []),
            (this._preferredPositions = []),
            (this._positionChanges = new u.a()),
            (this._resizeSubscription = vt.a.EMPTY),
            (this._offsetX = 0),
            (this._offsetY = 0),
            (this._appliedPanelClasses = []),
            (this.positionChanges = this._positionChanges.asObservable()),
            this.setOrigin(t);
        }
        get positions() {
          return this._preferredPositions;
        }
        attach(t) {
          if (this._overlayRef && t !== this._overlayRef)
            throw Error('This position strategy is already attached to an overlay');
          this._validatePositions(),
            t.hostElement.classList.add(ko),
            (this._overlayRef = t),
            (this._boundingBox = t.hostElement),
            (this._pane = t.overlayElement),
            (this._isDisposed = !1),
            (this._isInitialRender = !0),
            (this._lastPosition = null),
            this._resizeSubscription.unsubscribe(),
            (this._resizeSubscription = this._viewportRuler.change().subscribe(() => {
              (this._isInitialRender = !0), this.apply();
            }));
        }
        apply() {
          if (this._isDisposed || !this._platform.isBrowser) return;
          if (!this._isInitialRender && this._positionLocked && this._lastPosition)
            return void this.reapplyLastPosition();
          this._clearPanelClasses(),
            this._resetOverlayElementStyles(),
            this._resetBoundingBoxStyles(),
            (this._viewportRect = this._getNarrowedViewportRect()),
            (this._originRect = this._getOriginRect()),
            (this._overlayRect = this._pane.getBoundingClientRect());
          const t = this._originRect,
            e = this._overlayRect,
            n = this._viewportRect,
            s = [];
          let i;
          for (let r of this._preferredPositions) {
            let o = this._getOriginPoint(t, r),
              a = this._getOverlayPoint(o, e, r),
              l = this._getOverlayFit(a, e, n, r);
            if (l.isCompletelyWithinViewport) return (this._isPushed = !1), void this._applyPosition(r, o);
            this._canFitWithFlexibleDimensions(l, a, n)
              ? s.push({
                  position: r,
                  origin: o,
                  overlayRect: e,
                  boundingBoxRect: this._calculateBoundingBoxRect(o, r)
                })
              : (!i || i.overlayFit.visibleArea < l.visibleArea) &&
                (i = { overlayFit: l, overlayPoint: a, originPoint: o, position: r, overlayRect: e });
          }
          if (s.length) {
            let t = null,
              e = -1;
            for (const n of s) {
              const s = n.boundingBoxRect.width * n.boundingBoxRect.height * (n.position.weight || 1);
              s > e && ((e = s), (t = n));
            }
            return (this._isPushed = !1), void this._applyPosition(t.position, t.origin);
          }
          if (this._canPush) return (this._isPushed = !0), void this._applyPosition(i.position, i.originPoint);
          this._applyPosition(i.position, i.originPoint);
        }
        detach() {
          this._clearPanelClasses(),
            (this._lastPosition = null),
            (this._previousPushAmount = null),
            this._resizeSubscription.unsubscribe();
        }
        dispose() {
          this._isDisposed ||
            (this._boundingBox &&
              Ao(this._boundingBox.style, {
                top: '',
                left: '',
                right: '',
                bottom: '',
                height: '',
                width: '',
                alignItems: '',
                justifyContent: ''
              }),
            this._pane && this._resetOverlayElementStyles(),
            this._overlayRef && this._overlayRef.hostElement.classList.remove(ko),
            this.detach(),
            this._positionChanges.complete(),
            (this._overlayRef = this._boundingBox = null),
            (this._isDisposed = !0));
        }
        reapplyLastPosition() {
          if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {
            (this._originRect = this._getOriginRect()),
              (this._overlayRect = this._pane.getBoundingClientRect()),
              (this._viewportRect = this._getNarrowedViewportRect());
            const t = this._lastPosition || this._preferredPositions[0],
              e = this._getOriginPoint(this._originRect, t);
            this._applyPosition(t, e);
          }
        }
        withScrollableContainers(t) {
          return (this._scrollables = t), this;
        }
        withPositions(t) {
          return (
            (this._preferredPositions = t),
            -1 === t.indexOf(this._lastPosition) && (this._lastPosition = null),
            this._validatePositions(),
            this
          );
        }
        withViewportMargin(t) {
          return (this._viewportMargin = t), this;
        }
        withFlexibleDimensions(t = !0) {
          return (this._hasFlexibleDimensions = t), this;
        }
        withGrowAfterOpen(t = !0) {
          return (this._growAfterOpen = t), this;
        }
        withPush(t = !0) {
          return (this._canPush = t), this;
        }
        withLockedPosition(t = !0) {
          return (this._positionLocked = t), this;
        }
        setOrigin(t) {
          return (this._origin = t), this;
        }
        withDefaultOffsetX(t) {
          return (this._offsetX = t), this;
        }
        withDefaultOffsetY(t) {
          return (this._offsetY = t), this;
        }
        withTransformOriginOn(t) {
          return (this._transformOriginSelector = t), this;
        }
        _getOriginPoint(t, e) {
          let n, s;
          if ('center' == e.originX) n = t.left + t.width / 2;
          else {
            const s = this._isRtl() ? t.right : t.left,
              i = this._isRtl() ? t.left : t.right;
            n = 'start' == e.originX ? s : i;
          }
          return {
            x: n,
            y: (s = 'center' == e.originY ? t.top + t.height / 2 : 'top' == e.originY ? t.top : t.bottom)
          };
        }
        _getOverlayPoint(t, e, n) {
          let s, i;
          return (
            (s =
              'center' == n.overlayX
                ? -e.width / 2
                : 'start' === n.overlayX
                ? this._isRtl()
                  ? -e.width
                  : 0
                : this._isRtl()
                ? 0
                : -e.width),
            { x: t.x + s, y: t.y + (i = 'center' == n.overlayY ? -e.height / 2 : 'top' == n.overlayY ? 0 : -e.height) }
          );
        }
        _getOverlayFit(t, e, n, s) {
          let { x: i, y: r } = t,
            o = this._getOffset(s, 'x'),
            a = this._getOffset(s, 'y');
          o && (i += o), a && (r += a);
          let l = 0 - r,
            c = r + e.height - n.height,
            h = this._subtractOverflows(e.width, 0 - i, i + e.width - n.width),
            u = this._subtractOverflows(e.height, l, c),
            d = h * u;
          return {
            visibleArea: d,
            isCompletelyWithinViewport: e.width * e.height === d,
            fitsInViewportVertically: u === e.height,
            fitsInViewportHorizontally: h == e.width
          };
        }
        _canFitWithFlexibleDimensions(t, e, n) {
          if (this._hasFlexibleDimensions) {
            const s = n.bottom - e.y,
              i = n.right - e.x,
              r = this._overlayRef.getConfig().minHeight,
              o = this._overlayRef.getConfig().minWidth,
              a = t.fitsInViewportHorizontally || (null != o && o <= i);
            return (t.fitsInViewportVertically || (null != r && r <= s)) && a;
          }
        }
        _pushOverlayOnScreen(t, e, n) {
          if (this._previousPushAmount && this._positionLocked)
            return { x: t.x + this._previousPushAmount.x, y: t.y + this._previousPushAmount.y };
          const s = this._viewportRect,
            i = Math.max(t.x + e.width - s.right, 0),
            r = Math.max(t.y + e.height - s.bottom, 0),
            o = Math.max(s.top - n.top - t.y, 0),
            a = Math.max(s.left - n.left - t.x, 0);
          let l = 0,
            c = 0;
          return (
            (this._previousPushAmount = {
              x: (l = e.width <= s.width ? a || -i : t.x < this._viewportMargin ? s.left - n.left - t.x : 0),
              y: (c = e.height <= s.height ? o || -r : t.y < this._viewportMargin ? s.top - n.top - t.y : 0)
            }),
            { x: t.x + l, y: t.y + c }
          );
        }
        _applyPosition(t, e) {
          if (
            (this._setTransformOrigin(t),
            this._setOverlayElementStyles(e, t),
            this._setBoundingBoxStyles(e, t),
            t.panelClass && this._addPanelClasses(t.panelClass),
            (this._lastPosition = t),
            this._positionChanges.observers.length)
          ) {
            const e = this._getScrollVisibility(),
              n = new vo(t, e);
            this._positionChanges.next(n);
          }
          this._isInitialRender = !1;
        }
        _setTransformOrigin(t) {
          if (!this._transformOriginSelector) return;
          const e = this._boundingBox.querySelectorAll(this._transformOriginSelector);
          let n,
            s = t.overlayY;
          n =
            'center' === t.overlayX
              ? 'center'
              : this._isRtl()
              ? 'start' === t.overlayX
                ? 'right'
                : 'left'
              : 'start' === t.overlayX
              ? 'left'
              : 'right';
          for (let i = 0; i < e.length; i++) e[i].style.transformOrigin = `${n} ${s}`;
        }
        _calculateBoundingBoxRect(t, e) {
          const n = this._viewportRect,
            s = this._isRtl();
          let i, r, o, a, l, c;
          if ('top' === e.overlayY) i = n.height - (r = t.y) + this._viewportMargin;
          else if ('bottom' === e.overlayY)
            i = n.height - (o = n.height - t.y + 2 * this._viewportMargin) + this._viewportMargin;
          else {
            const e = Math.min(n.bottom - t.y + n.top, t.y),
              s = this._lastBoundingBoxSize.height;
            (r = t.y - e), (i = 2 * e) > s && !this._isInitialRender && !this._growAfterOpen && (r = t.y - s / 2);
          }
          if (('end' === e.overlayX && !s) || ('start' === e.overlayX && s))
            (c = n.width - t.x + this._viewportMargin), (a = t.x - this._viewportMargin);
          else if (('start' === e.overlayX && !s) || ('end' === e.overlayX && s)) (l = t.x), (a = n.right - t.x);
          else {
            const e = Math.min(n.right - t.x + n.left, t.x),
              s = this._lastBoundingBoxSize.width;
            (l = t.x - e), (a = 2 * e) > s && !this._isInitialRender && !this._growAfterOpen && (l = t.x - s / 2);
          }
          return { top: r, left: l, bottom: o, right: c, width: a, height: i };
        }
        _setBoundingBoxStyles(t, e) {
          const n = this._calculateBoundingBoxRect(t, e);
          this._isInitialRender ||
            this._growAfterOpen ||
            ((n.height = Math.min(n.height, this._lastBoundingBoxSize.height)),
            (n.width = Math.min(n.width, this._lastBoundingBoxSize.width)));
          const s = {};
          if (this._hasExactPosition())
            (s.top = s.left = '0'), (s.bottom = s.right = ''), (s.width = s.height = '100%');
          else {
            const t = this._overlayRef.getConfig().maxHeight,
              i = this._overlayRef.getConfig().maxWidth;
            (s.height = Sr(n.height)),
              (s.top = Sr(n.top)),
              (s.bottom = Sr(n.bottom)),
              (s.width = Sr(n.width)),
              (s.left = Sr(n.left)),
              (s.right = Sr(n.right)),
              (s.alignItems = 'center' === e.overlayX ? 'center' : 'end' === e.overlayX ? 'flex-end' : 'flex-start'),
              (s.justifyContent =
                'center' === e.overlayY ? 'center' : 'bottom' === e.overlayY ? 'flex-end' : 'flex-start'),
              t && (s.maxHeight = Sr(t)),
              i && (s.maxWidth = Sr(i));
          }
          (this._lastBoundingBoxSize = n), Ao(this._boundingBox.style, s);
        }
        _resetBoundingBoxStyles() {
          Ao(this._boundingBox.style, {
            top: '0',
            left: '0',
            right: '0',
            bottom: '0',
            height: '',
            width: '',
            alignItems: '',
            justifyContent: ''
          });
        }
        _resetOverlayElementStyles() {
          Ao(this._pane.style, { top: '', left: '', bottom: '', right: '', position: '', transform: '' });
        }
        _setOverlayElementStyles(t, e) {
          const n = {};
          if (this._hasExactPosition()) {
            const s = this._viewportRuler.getViewportScrollPosition();
            Ao(n, this._getExactOverlayY(e, t, s)), Ao(n, this._getExactOverlayX(e, t, s));
          } else n.position = 'static';
          let s = '',
            i = this._getOffset(e, 'x'),
            r = this._getOffset(e, 'y');
          i && (s += `translateX(${i}px) `),
            r && (s += `translateY(${r}px)`),
            (n.transform = s.trim()),
            this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight && (n.maxHeight = ''),
            this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth && (n.maxWidth = ''),
            Ao(this._pane.style, n);
        }
        _getExactOverlayY(t, e, n) {
          let s = { top: null, bottom: null },
            i = this._getOverlayPoint(e, this._overlayRect, t);
          this._isPushed && (i = this._pushOverlayOnScreen(i, this._overlayRect, n));
          let r = this._overlayContainer.getContainerElement().getBoundingClientRect().top;
          return (
            (i.y -= r),
            'bottom' === t.overlayY
              ? (s.bottom = `${this._document.documentElement.clientHeight - (i.y + this._overlayRect.height)}px`)
              : (s.top = Sr(i.y)),
            s
          );
        }
        _getExactOverlayX(t, e, n) {
          let s,
            i = { left: null, right: null },
            r = this._getOverlayPoint(e, this._overlayRect, t);
          return (
            this._isPushed && (r = this._pushOverlayOnScreen(r, this._overlayRect, n)),
            'right' ==
            (s = this._isRtl() ? ('end' === t.overlayX ? 'left' : 'right') : 'end' === t.overlayX ? 'right' : 'left')
              ? (i.right = `${this._document.documentElement.clientWidth - (r.x + this._overlayRect.width)}px`)
              : (i.left = Sr(r.x)),
            i
          );
        }
        _getScrollVisibility() {
          const t = this._getOriginRect(),
            e = this._pane.getBoundingClientRect(),
            n = this._scrollables.map(t => t.getElementRef().nativeElement.getBoundingClientRect());
          return {
            isOriginClipped: fo(t, n),
            isOriginOutsideView: mo(t, n),
            isOverlayClipped: fo(e, n),
            isOverlayOutsideView: mo(e, n)
          };
        }
        _subtractOverflows(t, ...e) {
          return e.reduce((t, e) => t - Math.max(e, 0), t);
        }
        _getNarrowedViewportRect() {
          const t = this._document.documentElement.clientWidth,
            e = this._document.documentElement.clientHeight,
            n = this._viewportRuler.getViewportScrollPosition();
          return {
            top: n.top + this._viewportMargin,
            left: n.left + this._viewportMargin,
            right: n.left + t - this._viewportMargin,
            bottom: n.top + e - this._viewportMargin,
            width: t - 2 * this._viewportMargin,
            height: e - 2 * this._viewportMargin
          };
        }
        _isRtl() {
          return 'rtl' === this._overlayRef.getDirection();
        }
        _hasExactPosition() {
          return !this._hasFlexibleDimensions || this._isPushed;
        }
        _getOffset(t, e) {
          return 'x' === e
            ? null == t.offsetX
              ? this._offsetX
              : t.offsetX
            : null == t.offsetY
            ? this._offsetY
            : t.offsetY;
        }
        _validatePositions() {
          if (!this._preferredPositions.length)
            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');
          this._preferredPositions.forEach(t => {
            Co('originX', t.originX), wo('originY', t.originY), Co('overlayX', t.overlayX), wo('overlayY', t.overlayY);
          });
        }
        _addPanelClasses(t) {
          this._pane &&
            Er(t).forEach(t => {
              '' !== t &&
                -1 === this._appliedPanelClasses.indexOf(t) &&
                (this._appliedPanelClasses.push(t), this._pane.classList.add(t));
            });
        }
        _clearPanelClasses() {
          this._pane &&
            (this._appliedPanelClasses.forEach(t => {
              this._pane.classList.remove(t);
            }),
            (this._appliedPanelClasses = []));
        }
        _getOriginRect() {
          const t = this._origin;
          return t instanceof s.k
            ? t.nativeElement.getBoundingClientRect()
            : t instanceof HTMLElement
            ? t.getBoundingClientRect()
            : { top: t.y, bottom: t.y, left: t.x, right: t.x, height: 0, width: 0 };
        }
      }
      function Ao(t, e) {
        for (let n in e) e.hasOwnProperty(n) && (t[n] = e[n]);
        return t;
      }
      class To {
        constructor(t, e, n, s, i, r, o) {
          (this._preferredPositions = []),
            (this._positionStrategy = new Do(n, s, i, r, o)
              .withFlexibleDimensions(!1)
              .withPush(!1)
              .withViewportMargin(0)),
            this.withFallbackPosition(t, e);
        }
        get _isRtl() {
          return 'rtl' === this._overlayRef.getDirection();
        }
        get onPositionChange() {
          return this._positionStrategy.positionChanges;
        }
        get positions() {
          return this._preferredPositions;
        }
        attach(t) {
          (this._overlayRef = t),
            this._positionStrategy.attach(t),
            this._direction && (t.setDirection(this._direction), (this._direction = null));
        }
        dispose() {
          this._positionStrategy.dispose();
        }
        detach() {
          this._positionStrategy.detach();
        }
        apply() {
          this._positionStrategy.apply();
        }
        recalculateLastPosition() {
          this._positionStrategy.reapplyLastPosition();
        }
        withScrollableContainers(t) {
          this._positionStrategy.withScrollableContainers(t);
        }
        withFallbackPosition(t, e, n, s) {
          const i = new yo(t, e, n, s);
          return this._preferredPositions.push(i), this._positionStrategy.withPositions(this._preferredPositions), this;
        }
        withDirection(t) {
          return this._overlayRef ? this._overlayRef.setDirection(t) : (this._direction = t), this;
        }
        withOffsetX(t) {
          return this._positionStrategy.withDefaultOffsetX(t), this;
        }
        withOffsetY(t) {
          return this._positionStrategy.withDefaultOffsetY(t), this;
        }
        withLockedPosition(t) {
          return this._positionStrategy.withLockedPosition(t), this;
        }
        withPositions(t) {
          return (
            (this._preferredPositions = t.slice()), this._positionStrategy.withPositions(this._preferredPositions), this
          );
        }
        setOrigin(t) {
          return this._positionStrategy.setOrigin(t), this;
        }
      }
      const Oo = 'cdk-global-overlay-wrapper';
      class Io {
        constructor() {
          (this._cssPosition = 'static'),
            (this._topOffset = ''),
            (this._bottomOffset = ''),
            (this._leftOffset = ''),
            (this._rightOffset = ''),
            (this._alignItems = ''),
            (this._justifyContent = ''),
            (this._width = ''),
            (this._height = '');
        }
        attach(t) {
          const e = t.getConfig();
          (this._overlayRef = t),
            this._width && !e.width && t.updateSize({ width: this._width }),
            this._height && !e.height && t.updateSize({ height: this._height }),
            t.hostElement.classList.add(Oo),
            (this._isDisposed = !1);
        }
        top(t = '') {
          return (this._bottomOffset = ''), (this._topOffset = t), (this._alignItems = 'flex-start'), this;
        }
        left(t = '') {
          return (this._rightOffset = ''), (this._leftOffset = t), (this._justifyContent = 'flex-start'), this;
        }
        bottom(t = '') {
          return (this._topOffset = ''), (this._bottomOffset = t), (this._alignItems = 'flex-end'), this;
        }
        right(t = '') {
          return (this._leftOffset = ''), (this._rightOffset = t), (this._justifyContent = 'flex-end'), this;
        }
        width(t = '') {
          return this._overlayRef ? this._overlayRef.updateSize({ width: t }) : (this._width = t), this;
        }
        height(t = '') {
          return this._overlayRef ? this._overlayRef.updateSize({ height: t }) : (this._height = t), this;
        }
        centerHorizontally(t = '') {
          return this.left(t), (this._justifyContent = 'center'), this;
        }
        centerVertically(t = '') {
          return this.top(t), (this._alignItems = 'center'), this;
        }
        apply() {
          if (!this._overlayRef || !this._overlayRef.hasAttached()) return;
          const t = this._overlayRef.overlayElement.style,
            e = this._overlayRef.hostElement.style,
            n = this._overlayRef.getConfig();
          (t.position = this._cssPosition),
            (t.marginLeft = '100%' === n.width ? '0' : this._leftOffset),
            (t.marginTop = '100%' === n.height ? '0' : this._topOffset),
            (t.marginBottom = this._bottomOffset),
            (t.marginRight = this._rightOffset),
            '100%' === n.width
              ? (e.justifyContent = 'flex-start')
              : 'center' === this._justifyContent
              ? (e.justifyContent = 'center')
              : 'rtl' === this._overlayRef.getConfig().direction
              ? 'flex-start' === this._justifyContent
                ? (e.justifyContent = 'flex-end')
                : 'flex-end' === this._justifyContent && (e.justifyContent = 'flex-start')
              : (e.justifyContent = this._justifyContent),
            (e.alignItems = '100%' === n.height ? 'flex-start' : this._alignItems);
        }
        dispose() {
          if (this._isDisposed || !this._overlayRef) return;
          const t = this._overlayRef.overlayElement.style,
            e = this._overlayRef.hostElement,
            n = e.style;
          e.classList.remove(Oo),
            (n.justifyContent = n.alignItems = t.marginTop = t.marginBottom = t.marginLeft = t.marginRight = t.position =
              ''),
            (this._overlayRef = null),
            (this._isDisposed = !0);
        }
      }
      let Ro = (() => {
          class t {
            constructor(t, e, n, s) {
              (this._viewportRuler = t), (this._document = e), (this._platform = n), (this._overlayContainer = s);
            }
            global() {
              return new Io();
            }
            connectedTo(t, e, n) {
              return new To(e, n, t, this._viewportRuler, this._document, this._platform, this._overlayContainer);
            }
            flexibleConnectedTo(t) {
              return new Do(t, this._viewportRuler, this._document, this._platform, this._overlayContainer);
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(lo), Object(s.Pb)(r.d), Object(s.Pb)(Zr), Object(s.Pb)(Eo));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        Po = 0,
        No = (() =>
          class {
            constructor(t, e, n, s, i, r, o, a, l, c) {
              (this.scrollStrategies = t),
                (this._overlayContainer = e),
                (this._componentFactoryResolver = n),
                (this._positionBuilder = s),
                (this._keyboardDispatcher = i),
                (this._injector = r),
                (this._ngZone = o),
                (this._document = a),
                (this._directionality = l),
                (this._location = c);
            }
            create(t) {
              const e = this._createHostElement(),
                n = this._createPaneElement(e),
                s = this._createPortalOutlet(n),
                i = new _o(t);
              return (
                (i.direction = i.direction || this._directionality.value),
                new So(s, e, n, i, this._ngZone, this._keyboardDispatcher, this._document, this._location)
              );
            }
            position() {
              return this._positionBuilder;
            }
            _createPaneElement(t) {
              const e = this._document.createElement('div');
              return (e.id = `cdk-overlay-${Po++}`), e.classList.add('cdk-overlay-pane'), t.appendChild(e), e;
            }
            _createHostElement() {
              const t = this._document.createElement('div');
              return this._overlayContainer.getContainerElement().appendChild(t), t;
            }
            _createPortalOutlet(t) {
              return (
                this._appRef || (this._appRef = this._injector.get(s.g)),
                new ir(t, this._componentFactoryResolver, this._appRef, this._injector)
              );
            }
          })();
      const Mo = new s.p('cdk-connected-overlay-scroll-strategy');
      function Lo(t) {
        return () => t.scrollStrategies.reposition();
      }
      let jo = (() => class {})();
      class Fo {
        constructor() {
          (this.role = 'dialog'),
            (this.panelClass = ''),
            (this.hasBackdrop = !0),
            (this.backdropClass = ''),
            (this.disableClose = !1),
            (this.width = ''),
            (this.height = ''),
            (this.maxWidth = '80vw'),
            (this.data = null),
            (this.ariaDescribedBy = null),
            (this.ariaLabelledBy = null),
            (this.ariaLabel = null),
            (this.autoFocus = !0),
            (this.restoreFocus = !0),
            (this.closeOnNavigation = !0);
        }
      }
      function Bo() {
        throw Error('Attempting to attach dialog content after content is already attached');
      }
      let Vo = (() =>
          class extends sr {
            constructor(t, e, n, i, r) {
              super(),
                (this._elementRef = t),
                (this._focusTrapFactory = e),
                (this._changeDetectorRef = n),
                (this._document = i),
                (this._config = r),
                (this._elementFocusedBeforeDialogWasOpened = null),
                (this._state = 'enter'),
                (this._animationStateChanged = new s.m()),
                (this._ariaLabelledBy = r.ariaLabelledBy || null);
            }
            attachComponentPortal(t) {
              return (
                this._portalOutlet.hasAttached() && Bo(),
                this._savePreviouslyFocusedElement(),
                this._portalOutlet.attachComponentPortal(t)
              );
            }
            attachTemplatePortal(t) {
              return (
                this._portalOutlet.hasAttached() && Bo(),
                this._savePreviouslyFocusedElement(),
                this._portalOutlet.attachTemplatePortal(t)
              );
            }
            _trapFocus() {
              const t = this._elementRef.nativeElement;
              if ((this._focusTrap || (this._focusTrap = this._focusTrapFactory.create(t)), this._config.autoFocus))
                this._focusTrap.focusInitialElementWhenReady();
              else {
                const e = this._document.activeElement;
                e === t || t.contains(e) || t.focus();
              }
            }
            _restoreFocus() {
              const t = this._elementFocusedBeforeDialogWasOpened;
              this._config.restoreFocus && t && 'function' == typeof t.focus && t.focus(),
                this._focusTrap && this._focusTrap.destroy();
            }
            _savePreviouslyFocusedElement() {
              this._document &&
                ((this._elementFocusedBeforeDialogWasOpened = this._document.activeElement),
                this._elementRef.nativeElement.focus &&
                  Promise.resolve().then(() => this._elementRef.nativeElement.focus()));
            }
            _onAnimationDone(t) {
              'enter' === t.toState ? this._trapFocus() : 'exit' === t.toState && this._restoreFocus(),
                this._animationStateChanged.emit(t);
            }
            _onAnimationStart(t) {
              this._animationStateChanged.emit(t);
            }
            _startExitAnimation() {
              (this._state = 'exit'), this._changeDetectorRef.markForCheck();
            }
          })(),
        Uo = 0;
      class Ho {
        constructor(t, e, n, s = `mat-dialog-${Uo++}`) {
          (this._overlayRef = t),
            (this._containerInstance = e),
            (this.id = s),
            (this.disableClose = this._containerInstance._config.disableClose),
            (this._afterOpened = new u.a()),
            (this._afterClosed = new u.a()),
            (this._beforeClosed = new u.a()),
            (e._id = s),
            e._animationStateChanged
              .pipe(
                I(t => 'done' === t.phaseName && 'enter' === t.toState),
                Z(1)
              )
              .subscribe(() => {
                this._afterOpened.next(), this._afterOpened.complete();
              }),
            e._animationStateChanged
              .pipe(
                I(t => 'done' === t.phaseName && 'exit' === t.toState),
                Z(1)
              )
              .subscribe(() => {
                clearTimeout(this._closeFallbackTimeout), this._overlayRef.dispose();
              }),
            t.detachments().subscribe(() => {
              this._beforeClosed.next(this._result),
                this._beforeClosed.complete(),
                this._afterClosed.next(this._result),
                this._afterClosed.complete(),
                (this.componentInstance = null),
                this._overlayRef.dispose();
            }),
            t
              .keydownEvents()
              .pipe(I(t => t.keyCode === cr && !this.disableClose && !_r(t)))
              .subscribe(t => {
                t.preventDefault(), this.close();
              });
        }
        close(t) {
          (this._result = t),
            this._containerInstance._animationStateChanged
              .pipe(
                I(t => 'start' === t.phaseName),
                Z(1)
              )
              .subscribe(e => {
                this._beforeClosed.next(t),
                  this._beforeClosed.complete(),
                  this._overlayRef.detachBackdrop(),
                  (this._closeFallbackTimeout = setTimeout(() => {
                    this._overlayRef.dispose();
                  }, e.totalTime + 100));
              }),
            this._containerInstance._startExitAnimation();
        }
        afterOpened() {
          return this._afterOpened.asObservable();
        }
        afterClosed() {
          return this._afterClosed.asObservable();
        }
        beforeClosed() {
          return this._beforeClosed.asObservable();
        }
        backdropClick() {
          return this._overlayRef.backdropClick();
        }
        keydownEvents() {
          return this._overlayRef.keydownEvents();
        }
        updatePosition(t) {
          let e = this._getPositionStrategy();
          return (
            t && (t.left || t.right) ? (t.left ? e.left(t.left) : e.right(t.right)) : e.centerHorizontally(),
            t && (t.top || t.bottom) ? (t.top ? e.top(t.top) : e.bottom(t.bottom)) : e.centerVertically(),
            this._overlayRef.updatePosition(),
            this
          );
        }
        updateSize(t = '', e = '') {
          return (
            this._getPositionStrategy()
              .width(t)
              .height(e),
            this._overlayRef.updatePosition(),
            this
          );
        }
        addPanelClass(t) {
          return this._overlayRef.addPanelClass(t), this;
        }
        removePanelClass(t) {
          return this._overlayRef.removePanelClass(t), this;
        }
        afterOpen() {
          return this.afterOpened();
        }
        beforeClose() {
          return this.beforeClosed();
        }
        _getPositionStrategy() {
          return this._overlayRef.getConfig().positionStrategy;
        }
      }
      const zo = new s.p('MatDialogData'),
        $o = new s.p('mat-dialog-default-options'),
        qo = new s.p('mat-dialog-scroll-strategy');
      function Wo(t) {
        return () => t.scrollStrategies.block();
      }
      let Ko = (() =>
          class {
            constructor(t, e, n, s, i, r, o) {
              (this._overlay = t),
                (this._injector = e),
                (this._location = n),
                (this._defaultOptions = s),
                (this._parentDialog = r),
                (this._overlayContainer = o),
                (this._openDialogsAtThisLevel = []),
                (this._afterAllClosedAtThisLevel = new u.a()),
                (this._afterOpenedAtThisLevel = new u.a()),
                (this._ariaHiddenElements = new Map()),
                (this.afterAllClosed = k(() =>
                  this.openDialogs.length ? this._afterAllClosed : this._afterAllClosed.pipe(lt(void 0))
                )),
                (this._scrollStrategy = i);
            }
            get openDialogs() {
              return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;
            }
            get afterOpened() {
              return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;
            }
            get afterOpen() {
              return this.afterOpened;
            }
            get _afterAllClosed() {
              const t = this._parentDialog;
              return t ? t._afterAllClosed : this._afterAllClosedAtThisLevel;
            }
            open(t, e) {
              if (
                (e = (function(t, e) {
                  return Object.assign({}, e, t);
                })(e, this._defaultOptions || new Fo())).id &&
                this.getDialogById(e.id)
              )
                throw Error(`Dialog with id "${e.id}" exists already. The dialog id must be unique.`);
              const n = this._createOverlay(e),
                s = this._attachDialogContainer(n, e),
                i = this._attachDialogContent(t, s, n, e);
              return (
                this.openDialogs.length || this._hideNonDialogContentFromAssistiveTechnology(),
                this.openDialogs.push(i),
                i.afterClosed().subscribe(() => this._removeOpenDialog(i)),
                this.afterOpened.next(i),
                i
              );
            }
            closeAll() {
              this._closeDialogs(this.openDialogs);
            }
            getDialogById(t) {
              return this.openDialogs.find(e => e.id === t);
            }
            ngOnDestroy() {
              this._closeDialogs(this._openDialogsAtThisLevel),
                this._afterAllClosedAtThisLevel.complete(),
                this._afterOpenedAtThisLevel.complete();
            }
            _createOverlay(t) {
              const e = this._getOverlayConfig(t);
              return this._overlay.create(e);
            }
            _getOverlayConfig(t) {
              const e = new _o({
                positionStrategy: this._overlay.position().global(),
                scrollStrategy: t.scrollStrategy || this._scrollStrategy(),
                panelClass: t.panelClass,
                hasBackdrop: t.hasBackdrop,
                direction: t.direction,
                minWidth: t.minWidth,
                minHeight: t.minHeight,
                maxWidth: t.maxWidth,
                maxHeight: t.maxHeight,
                disposeOnNavigation: t.closeOnNavigation
              });
              return t.backdropClass && (e.backdropClass = t.backdropClass), e;
            }
            _attachDialogContainer(t, e) {
              const n = new ar(
                  (e && e.viewContainerRef && e.viewContainerRef.injector) || this._injector,
                  new WeakMap([[Fo, e]])
                ),
                s = new er(Vo, e.viewContainerRef, n);
              return t.attach(s).instance;
            }
            _attachDialogContent(t, e, n, i) {
              const r = new Ho(n, e, this._location, i.id);
              if (
                (i.hasBackdrop &&
                  n.backdropClick().subscribe(() => {
                    r.disableClose || r.close();
                  }),
                t instanceof s.L)
              )
                e.attachTemplatePortal(new nr(t, null, { $implicit: i.data, dialogRef: r }));
              else {
                const n = this._createInjector(i, r, e),
                  s = e.attachComponentPortal(new er(t, void 0, n));
                r.componentInstance = s.instance;
              }
              return r.updateSize(i.width, i.height).updatePosition(i.position), r;
            }
            _createInjector(t, e, n) {
              const s = t && t.viewContainerRef && t.viewContainerRef.injector,
                i = new WeakMap([[Vo, n], [zo, t.data], [Ho, e]]);
              return (
                !t.direction || (s && s.get(vr, null)) || i.set(vr, { value: t.direction, change: c() }),
                new ar(s || this._injector, i)
              );
            }
            _removeOpenDialog(t) {
              const e = this.openDialogs.indexOf(t);
              e > -1 &&
                (this.openDialogs.splice(e, 1),
                this.openDialogs.length ||
                  (this._ariaHiddenElements.forEach((t, e) => {
                    t ? e.setAttribute('aria-hidden', t) : e.removeAttribute('aria-hidden');
                  }),
                  this._ariaHiddenElements.clear(),
                  this._afterAllClosed.next()));
            }
            _hideNonDialogContentFromAssistiveTechnology() {
              const t = this._overlayContainer.getContainerElement();
              if (t.parentElement) {
                const e = t.parentElement.children;
                for (let n = e.length - 1; n > -1; n--) {
                  let s = e[n];
                  s === t ||
                    'SCRIPT' === s.nodeName ||
                    'STYLE' === s.nodeName ||
                    s.hasAttribute('aria-live') ||
                    (this._ariaHiddenElements.set(s, s.getAttribute('aria-hidden')),
                    s.setAttribute('aria-hidden', 'true'));
                }
              }
            }
            _closeDialogs(t) {
              let e = t.length;
              for (; e--; ) t[e].close();
            }
          })(),
        Yo = (() => class {})();
      const Qo = new s.N('8.1.2');
      function Go(t, e = Vr) {
        return n => n.lift(new Zo(t, e));
      }
      class Zo {
        constructor(t, e) {
          (this.dueTime = t), (this.scheduler = e);
        }
        call(t, e) {
          return e.subscribe(new Xo(t, this.dueTime, this.scheduler));
        }
      }
      class Xo extends O.a {
        constructor(t, e, n) {
          super(t),
            (this.dueTime = e),
            (this.scheduler = n),
            (this.debouncedSubscription = null),
            (this.lastValue = null),
            (this.hasValue = !1);
        }
        _next(t) {
          this.clearDebounce(),
            (this.lastValue = t),
            (this.hasValue = !0),
            this.add((this.debouncedSubscription = this.scheduler.schedule(Jo, this.dueTime, this)));
        }
        _complete() {
          this.debouncedNext(), this.destination.complete();
        }
        debouncedNext() {
          if ((this.clearDebounce(), this.hasValue)) {
            const { lastValue: t } = this;
            (this.lastValue = null), (this.hasValue = !1), this.destination.next(t);
          }
        }
        clearDebounce() {
          const t = this.debouncedSubscription;
          null !== t && (this.remove(t), t.unsubscribe(), (this.debouncedSubscription = null));
        }
      }
      function Jo(t) {
        t.debouncedNext();
      }
      class ta {
        constructor(t) {
          (this._items = t),
            (this._activeItemIndex = -1),
            (this._activeItem = null),
            (this._wrap = !1),
            (this._letterKeyStream = new u.a()),
            (this._typeaheadSubscription = vt.a.EMPTY),
            (this._vertical = !0),
            (this._allowedModifierKeys = []),
            (this._skipPredicateFn = t => t.disabled),
            (this._pressedLetters = []),
            (this.tabOut = new u.a()),
            (this.change = new u.a()),
            t instanceof s.C &&
              t.changes.subscribe(t => {
                if (this._activeItem) {
                  const e = t.toArray().indexOf(this._activeItem);
                  e > -1 && e !== this._activeItemIndex && (this._activeItemIndex = e);
                }
              });
        }
        skipPredicate(t) {
          return (this._skipPredicateFn = t), this;
        }
        withWrap(t = !0) {
          return (this._wrap = t), this;
        }
        withVerticalOrientation(t = !0) {
          return (this._vertical = t), this;
        }
        withHorizontalOrientation(t) {
          return (this._horizontal = t), this;
        }
        withAllowedModifierKeys(t) {
          return (this._allowedModifierKeys = t), this;
        }
        withTypeAhead(t = 200) {
          if (this._items.length && this._items.some(t => 'function' != typeof t.getLabel))
            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');
          return (
            this._typeaheadSubscription.unsubscribe(),
            (this._typeaheadSubscription = this._letterKeyStream
              .pipe(
                bt(t => this._pressedLetters.push(t)),
                Go(t),
                I(() => this._pressedLetters.length > 0),
                Object(D.a)(() => this._pressedLetters.join(''))
              )
              .subscribe(t => {
                const e = this._getItemsArray();
                for (let n = 1; n < e.length + 1; n++) {
                  const s = (this._activeItemIndex + n) % e.length,
                    i = e[s];
                  if (
                    !this._skipPredicateFn(i) &&
                    0 ===
                      i
                        .getLabel()
                        .toUpperCase()
                        .trim()
                        .indexOf(t)
                  ) {
                    this.setActiveItem(s);
                    break;
                  }
                }
                this._pressedLetters = [];
              })),
            this
          );
        }
        setActiveItem(t) {
          const e = this._activeItemIndex;
          this.updateActiveItem(t), this._activeItemIndex !== e && this.change.next(this._activeItemIndex);
        }
        onKeydown(t) {
          const e = t.keyCode,
            n = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].every(
              e => !t[e] || this._allowedModifierKeys.indexOf(e) > -1
            );
          switch (e) {
            case lr:
              return void this.tabOut.next();
            case pr:
              if (this._vertical && n) {
                this.setNextItemActive();
                break;
              }
              return;
            case ur:
              if (this._vertical && n) {
                this.setPreviousItemActive();
                break;
              }
              return;
            case dr:
              if (this._horizontal && n) {
                'rtl' === this._horizontal ? this.setPreviousItemActive() : this.setNextItemActive();
                break;
              }
              return;
            case hr:
              if (this._horizontal && n) {
                'rtl' === this._horizontal ? this.setNextItemActive() : this.setPreviousItemActive();
                break;
              }
              return;
            default:
              return void (
                (n || _r(t, 'shiftKey')) &&
                (t.key && 1 === t.key.length
                  ? this._letterKeyStream.next(t.key.toLocaleUpperCase())
                  : ((e >= gr && e <= br) || (e >= mr && e <= fr)) &&
                    this._letterKeyStream.next(String.fromCharCode(e)))
              );
          }
          (this._pressedLetters = []), t.preventDefault();
        }
        get activeItemIndex() {
          return this._activeItemIndex;
        }
        get activeItem() {
          return this._activeItem;
        }
        setFirstItemActive() {
          this._setActiveItemByIndex(0, 1);
        }
        setLastItemActive() {
          this._setActiveItemByIndex(this._items.length - 1, -1);
        }
        setNextItemActive() {
          this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);
        }
        setPreviousItemActive() {
          this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);
        }
        updateActiveItem(t) {
          const e = this._getItemsArray(),
            n = 'number' == typeof t ? t : e.indexOf(t),
            s = e[n];
          (this._activeItem = null == s ? null : s), (this._activeItemIndex = n);
        }
        updateActiveItemIndex(t) {
          this.updateActiveItem(t);
        }
        _setActiveItemByDelta(t) {
          this._wrap ? this._setActiveInWrapMode(t) : this._setActiveInDefaultMode(t);
        }
        _setActiveInWrapMode(t) {
          const e = this._getItemsArray();
          for (let n = 1; n <= e.length; n++) {
            const s = (this._activeItemIndex + t * n + e.length) % e.length;
            if (!this._skipPredicateFn(e[s])) return void this.setActiveItem(s);
          }
        }
        _setActiveInDefaultMode(t) {
          this._setActiveItemByIndex(this._activeItemIndex + t, t);
        }
        _setActiveItemByIndex(t, e) {
          const n = this._getItemsArray();
          if (n[t]) {
            for (; this._skipPredicateFn(n[t]); ) if (!n[(t += e)]) return;
            this.setActiveItem(t);
          }
        }
        _getItemsArray() {
          return this._items instanceof s.C ? this._items.toArray() : this._items;
        }
      }
      class ea extends ta {
        constructor() {
          super(...arguments), (this._origin = 'program');
        }
        setFocusOrigin(t) {
          return (this._origin = t), this;
        }
        setActiveItem(t) {
          super.setActiveItem(t), this.activeItem && this.activeItem.focus(this._origin);
        }
      }
      let na = (() => {
        class t {
          constructor(t) {
            this._platform = t;
          }
          isDisabled(t) {
            return t.hasAttribute('disabled');
          }
          isVisible(t) {
            return (
              (function(t) {
                return !!(
                  t.offsetWidth ||
                  t.offsetHeight ||
                  ('function' == typeof t.getClientRects && t.getClientRects().length)
                );
              })(t) && 'visible' === getComputedStyle(t).visibility
            );
          }
          isTabbable(t) {
            if (!this._platform.isBrowser) return !1;
            const e = (function(t) {
              try {
                return t.frameElement;
              } catch (kb) {
                return null;
              }
            })(((n = t).ownerDocument && n.ownerDocument.defaultView) || window);
            var n;
            if (e) {
              const t = e && e.nodeName.toLowerCase();
              if (-1 === ia(e)) return !1;
              if ((this._platform.BLINK || this._platform.WEBKIT) && 'object' === t) return !1;
              if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(e)) return !1;
            }
            let s = t.nodeName.toLowerCase(),
              i = ia(t);
            if (t.hasAttribute('contenteditable')) return -1 !== i;
            if ('iframe' === s) return !1;
            if ('audio' === s) {
              if (!t.hasAttribute('controls')) return !1;
              if (this._platform.BLINK) return !0;
            }
            if ('video' === s) {
              if (!t.hasAttribute('controls') && this._platform.TRIDENT) return !1;
              if (this._platform.BLINK || this._platform.FIREFOX) return !0;
            }
            return (
              ('object' !== s || (!this._platform.BLINK && !this._platform.WEBKIT)) &&
              !(
                this._platform.WEBKIT &&
                this._platform.IOS &&
                !(function(t) {
                  let e = t.nodeName.toLowerCase(),
                    n = 'input' === e && t.type;
                  return 'text' === n || 'password' === n || 'select' === e || 'textarea' === e;
                })(t)
              ) &&
              t.tabIndex >= 0
            );
          }
          isFocusable(t) {
            return (
              (function(t) {
                return (
                  !(function(t) {
                    return (
                      (function(t) {
                        return 'input' == t.nodeName.toLowerCase();
                      })(t) && 'hidden' == t.type
                    );
                  })(t) &&
                  ((function(t) {
                    let e = t.nodeName.toLowerCase();
                    return 'input' === e || 'select' === e || 'button' === e || 'textarea' === e;
                  })(t) ||
                    (function(t) {
                      return (
                        (function(t) {
                          return 'a' == t.nodeName.toLowerCase();
                        })(t) && t.hasAttribute('href')
                      );
                    })(t) ||
                    t.hasAttribute('contenteditable') ||
                    sa(t))
                );
              })(t) &&
              !this.isDisabled(t) &&
              this.isVisible(t)
            );
          }
        }
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            factory: function() {
              return new t(Object(s.Pb)(Zr));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      function sa(t) {
        if (!t.hasAttribute('tabindex') || void 0 === t.tabIndex) return !1;
        let e = t.getAttribute('tabindex');
        return '-32768' != e && !(!e || isNaN(parseInt(e, 10)));
      }
      function ia(t) {
        if (!sa(t)) return null;
        const e = parseInt(t.getAttribute('tabindex') || '', 10);
        return isNaN(e) ? -1 : e;
      }
      class ra {
        constructor(t, e, n, s, i = !1) {
          (this._element = t),
            (this._checker = e),
            (this._ngZone = n),
            (this._document = s),
            (this._hasAttached = !1),
            (this.startAnchorListener = () => this.focusLastTabbableElement()),
            (this.endAnchorListener = () => this.focusFirstTabbableElement()),
            (this._enabled = !0),
            i || this.attachAnchors();
        }
        get enabled() {
          return this._enabled;
        }
        set enabled(t) {
          (this._enabled = t),
            this._startAnchor &&
              this._endAnchor &&
              (this._toggleAnchorTabIndex(t, this._startAnchor), this._toggleAnchorTabIndex(t, this._endAnchor));
        }
        destroy() {
          const t = this._startAnchor,
            e = this._endAnchor;
          t && (t.removeEventListener('focus', this.startAnchorListener), t.parentNode && t.parentNode.removeChild(t)),
            e && (e.removeEventListener('focus', this.endAnchorListener), e.parentNode && e.parentNode.removeChild(e)),
            (this._startAnchor = this._endAnchor = null);
        }
        attachAnchors() {
          return (
            !!this._hasAttached ||
            (this._ngZone.runOutsideAngular(() => {
              this._startAnchor ||
                ((this._startAnchor = this._createAnchor()),
                this._startAnchor.addEventListener('focus', this.startAnchorListener)),
                this._endAnchor ||
                  ((this._endAnchor = this._createAnchor()),
                  this._endAnchor.addEventListener('focus', this.endAnchorListener));
            }),
            this._element.parentNode &&
              (this._element.parentNode.insertBefore(this._startAnchor, this._element),
              this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling),
              (this._hasAttached = !0)),
            this._hasAttached)
          );
        }
        focusInitialElementWhenReady() {
          return new Promise(t => {
            this._executeOnStable(() => t(this.focusInitialElement()));
          });
        }
        focusFirstTabbableElementWhenReady() {
          return new Promise(t => {
            this._executeOnStable(() => t(this.focusFirstTabbableElement()));
          });
        }
        focusLastTabbableElementWhenReady() {
          return new Promise(t => {
            this._executeOnStable(() => t(this.focusLastTabbableElement()));
          });
        }
        _getRegionBoundary(t) {
          let e = this._element.querySelectorAll(
            `[cdk-focus-region-${t}], ` + `[cdkFocusRegion${t}], ` + `[cdk-focus-${t}]`
          );
          for (let n = 0; n < e.length; n++)
            e[n].hasAttribute(`cdk-focus-${t}`)
              ? console.warn(
                  `Found use of deprecated attribute 'cdk-focus-${t}', ` +
                    `use 'cdkFocusRegion${t}' instead. The deprecated ` +
                    'attribute will be removed in 8.0.0.',
                  e[n]
                )
              : e[n].hasAttribute(`cdk-focus-region-${t}`) &&
                console.warn(
                  `Found use of deprecated attribute 'cdk-focus-region-${t}', ` +
                    `use 'cdkFocusRegion${t}' instead. The deprecated attribute ` +
                    'will be removed in 8.0.0.',
                  e[n]
                );
          return 'start' == t
            ? e.length
              ? e[0]
              : this._getFirstTabbableElement(this._element)
            : e.length
            ? e[e.length - 1]
            : this._getLastTabbableElement(this._element);
        }
        focusInitialElement() {
          const t = this._element.querySelector('[cdk-focus-initial], [cdkFocusInitial]');
          return t
            ? (t.hasAttribute('cdk-focus-initial') &&
                console.warn(
                  "Found use of deprecated attribute 'cdk-focus-initial', use 'cdkFocusInitial' instead. The deprecated attribute will be removed in 8.0.0",
                  t
                ),
              Object(s.W)() &&
                !this._checker.isFocusable(t) &&
                console.warn("Element matching '[cdkFocusInitial]' is not focusable.", t),
              t.focus(),
              !0)
            : this.focusFirstTabbableElement();
        }
        focusFirstTabbableElement() {
          const t = this._getRegionBoundary('start');
          return t && t.focus(), !!t;
        }
        focusLastTabbableElement() {
          const t = this._getRegionBoundary('end');
          return t && t.focus(), !!t;
        }
        hasAttached() {
          return this._hasAttached;
        }
        _getFirstTabbableElement(t) {
          if (this._checker.isFocusable(t) && this._checker.isTabbable(t)) return t;
          let e = t.children || t.childNodes;
          for (let n = 0; n < e.length; n++) {
            let t = e[n].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(e[n]) : null;
            if (t) return t;
          }
          return null;
        }
        _getLastTabbableElement(t) {
          if (this._checker.isFocusable(t) && this._checker.isTabbable(t)) return t;
          let e = t.children || t.childNodes;
          for (let n = e.length - 1; n >= 0; n--) {
            let t = e[n].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(e[n]) : null;
            if (t) return t;
          }
          return null;
        }
        _createAnchor() {
          const t = this._document.createElement('div');
          return (
            this._toggleAnchorTabIndex(this._enabled, t),
            t.classList.add('cdk-visually-hidden'),
            t.classList.add('cdk-focus-trap-anchor'),
            t.setAttribute('aria-hidden', 'true'),
            t
          );
        }
        _toggleAnchorTabIndex(t, e) {
          t ? e.setAttribute('tabindex', '0') : e.removeAttribute('tabindex');
        }
        _executeOnStable(t) {
          this._ngZone.isStable
            ? t()
            : this._ngZone.onStable
                .asObservable()
                .pipe(Z(1))
                .subscribe(t);
        }
      }
      let oa = (() => {
          class t {
            constructor(t, e, n) {
              (this._checker = t), (this._ngZone = e), (this._document = n);
            }
            create(t, e = !1) {
              return new ra(t, this._checker, this._ngZone, this._document, e);
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(na), Object(s.Pb)(s.y), Object(s.Pb)(r.d));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        aa = (() =>
          class {
            constructor(t, e, n) {
              (this._elementRef = t),
                (this._focusTrapFactory = e),
                (this._previouslyFocusedElement = null),
                (this._document = n),
                (this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, !0));
            }
            get enabled() {
              return this.focusTrap.enabled;
            }
            set enabled(t) {
              this.focusTrap.enabled = Cr(t);
            }
            get autoCapture() {
              return this._autoCapture;
            }
            set autoCapture(t) {
              this._autoCapture = Cr(t);
            }
            ngOnDestroy() {
              this.focusTrap.destroy(),
                this._previouslyFocusedElement &&
                  (this._previouslyFocusedElement.focus(), (this._previouslyFocusedElement = null));
            }
            ngAfterContentInit() {
              this.focusTrap.attachAnchors(),
                this.autoCapture &&
                  ((this._previouslyFocusedElement = this._document.activeElement),
                  this.focusTrap.focusInitialElementWhenReady());
            }
            ngDoCheck() {
              this.focusTrap.hasAttached() || this.focusTrap.attachAnchors();
            }
          })();
      const la = new s.p('liveAnnouncerElement', {
          providedIn: 'root',
          factory: function() {
            return null;
          }
        }),
        ca = new s.p('LIVE_ANNOUNCER_DEFAULT_OPTIONS');
      let ha = (() => {
          class t {
            constructor(t, e, n, s) {
              (this._ngZone = e),
                (this._defaultOptions = s),
                (this._document = n),
                (this._liveElement = t || this._createLiveElement());
            }
            announce(t, ...e) {
              const n = this._defaultOptions;
              let s, i;
              return (
                1 === e.length && 'number' == typeof e[0] ? (i = e[0]) : ([s, i] = e),
                this.clear(),
                clearTimeout(this._previousTimeout),
                s || (s = n && n.politeness ? n.politeness : 'polite'),
                null == i && n && (i = n.duration),
                this._liveElement.setAttribute('aria-live', s),
                this._ngZone.runOutsideAngular(
                  () =>
                    new Promise(e => {
                      clearTimeout(this._previousTimeout),
                        (this._previousTimeout = setTimeout(() => {
                          (this._liveElement.textContent = t),
                            e(),
                            'number' == typeof i && (this._previousTimeout = setTimeout(() => this.clear(), i));
                        }, 100));
                    })
                )
              );
            }
            clear() {
              this._liveElement && (this._liveElement.textContent = '');
            }
            ngOnDestroy() {
              clearTimeout(this._previousTimeout),
                this._liveElement &&
                  this._liveElement.parentNode &&
                  (this._liveElement.parentNode.removeChild(this._liveElement), (this._liveElement = null));
            }
            _createLiveElement() {
              const t = this._document.getElementsByClassName('cdk-live-announcer-element'),
                e = this._document.createElement('div');
              for (let n = 0; n < t.length; n++) t[n].parentNode.removeChild(t[n]);
              return (
                e.classList.add('cdk-live-announcer-element'),
                e.classList.add('cdk-visually-hidden'),
                e.setAttribute('aria-atomic', 'true'),
                e.setAttribute('aria-live', 'polite'),
                this._document.body.appendChild(e),
                e
              );
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(la, 8), Object(s.Pb)(s.y), Object(s.Pb)(r.d), Object(s.Pb)(ca, 8));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        ua = (() =>
          class {
            constructor(t, e, n, s) {
              (this._elementRef = t),
                (this._liveAnnouncer = e),
                (this._contentObserver = n),
                (this._ngZone = s),
                (this._politeness = 'off');
            }
            get politeness() {
              return this._politeness;
            }
            set politeness(t) {
              (this._politeness = 'polite' === t || 'assertive' === t ? t : 'off'),
                'off' === this._politeness
                  ? this._subscription && (this._subscription.unsubscribe(), (this._subscription = null))
                  : this._subscription ||
                    (this._subscription = this._ngZone.runOutsideAngular(() =>
                      this._contentObserver.observe(this._elementRef).subscribe(() => {
                        const t = this._elementRef.nativeElement.textContent;
                        t !== this._previousAnnouncedText &&
                          (this._liveAnnouncer.announce(t, this._politeness), (this._previousAnnouncedText = t));
                      })
                    ));
            }
            ngOnDestroy() {
              this._subscription && this._subscription.unsubscribe();
            }
          })();
      const da = 650,
        pa = Jr({ passive: !0, capture: !0 });
      let ma = (() => {
          class t {
            constructor(t, e) {
              (this._ngZone = t),
                (this._platform = e),
                (this._origin = null),
                (this._windowFocused = !1),
                (this._elementInfo = new Map()),
                (this._monitoredElementCount = 0),
                (this._documentKeydownListener = () => {
                  (this._lastTouchTarget = null), this._setOriginForCurrentEventQueue('keyboard');
                }),
                (this._documentMousedownListener = () => {
                  this._lastTouchTarget || this._setOriginForCurrentEventQueue('mouse');
                }),
                (this._documentTouchstartListener = t => {
                  null != this._touchTimeoutId && clearTimeout(this._touchTimeoutId),
                    (this._lastTouchTarget = t.target),
                    (this._touchTimeoutId = setTimeout(() => (this._lastTouchTarget = null), da));
                }),
                (this._windowFocusListener = () => {
                  (this._windowFocused = !0),
                    (this._windowFocusTimeoutId = setTimeout(() => (this._windowFocused = !1)));
                });
            }
            monitor(t, e = !1) {
              if (!this._platform.isBrowser) return c(null);
              const n = kr(t);
              if (this._elementInfo.has(n)) {
                let t = this._elementInfo.get(n);
                return (t.checkChildren = e), t.subject.asObservable();
              }
              let s = { unlisten: () => {}, checkChildren: e, subject: new u.a() };
              this._elementInfo.set(n, s), this._incrementMonitoredElementCount();
              let i = t => this._onFocus(t, n),
                r = t => this._onBlur(t, n);
              return (
                this._ngZone.runOutsideAngular(() => {
                  n.addEventListener('focus', i, !0), n.addEventListener('blur', r, !0);
                }),
                (s.unlisten = () => {
                  n.removeEventListener('focus', i, !0), n.removeEventListener('blur', r, !0);
                }),
                s.subject.asObservable()
              );
            }
            stopMonitoring(t) {
              const e = kr(t),
                n = this._elementInfo.get(e);
              n &&
                (n.unlisten(),
                n.subject.complete(),
                this._setClasses(e),
                this._elementInfo.delete(e),
                this._decrementMonitoredElementCount());
            }
            focusVia(t, e, n) {
              const s = kr(t);
              this._setOriginForCurrentEventQueue(e), 'function' == typeof s.focus && s.focus(n);
            }
            ngOnDestroy() {
              this._elementInfo.forEach((t, e) => this.stopMonitoring(e));
            }
            _toggleClass(t, e, n) {
              n ? t.classList.add(e) : t.classList.remove(e);
            }
            _setClasses(t, e) {
              this._elementInfo.get(t) &&
                (this._toggleClass(t, 'cdk-focused', !!e),
                this._toggleClass(t, 'cdk-touch-focused', 'touch' === e),
                this._toggleClass(t, 'cdk-keyboard-focused', 'keyboard' === e),
                this._toggleClass(t, 'cdk-mouse-focused', 'mouse' === e),
                this._toggleClass(t, 'cdk-program-focused', 'program' === e));
            }
            _setOriginForCurrentEventQueue(t) {
              this._ngZone.runOutsideAngular(() => {
                (this._origin = t), (this._originTimeoutId = setTimeout(() => (this._origin = null), 1));
              });
            }
            _wasCausedByTouch(t) {
              let e = t.target;
              return (
                this._lastTouchTarget instanceof Node &&
                e instanceof Node &&
                (e === this._lastTouchTarget || e.contains(this._lastTouchTarget))
              );
            }
            _onFocus(t, e) {
              const n = this._elementInfo.get(e);
              if (!n || (!n.checkChildren && e !== t.target)) return;
              let s = this._origin;
              s ||
                (s =
                  this._windowFocused && this._lastFocusOrigin
                    ? this._lastFocusOrigin
                    : this._wasCausedByTouch(t)
                    ? 'touch'
                    : 'program'),
                this._setClasses(e, s),
                this._emitOrigin(n.subject, s),
                (this._lastFocusOrigin = s);
            }
            _onBlur(t, e) {
              const n = this._elementInfo.get(e);
              !n ||
                (n.checkChildren && t.relatedTarget instanceof Node && e.contains(t.relatedTarget)) ||
                (this._setClasses(e), this._emitOrigin(n.subject, null));
            }
            _emitOrigin(t, e) {
              this._ngZone.run(() => t.next(e));
            }
            _incrementMonitoredElementCount() {
              1 == ++this._monitoredElementCount &&
                this._platform.isBrowser &&
                this._ngZone.runOutsideAngular(() => {
                  document.addEventListener('keydown', this._documentKeydownListener, pa),
                    document.addEventListener('mousedown', this._documentMousedownListener, pa),
                    document.addEventListener('touchstart', this._documentTouchstartListener, pa),
                    window.addEventListener('focus', this._windowFocusListener);
                });
            }
            _decrementMonitoredElementCount() {
              --this._monitoredElementCount ||
                (document.removeEventListener('keydown', this._documentKeydownListener, pa),
                document.removeEventListener('mousedown', this._documentMousedownListener, pa),
                document.removeEventListener('touchstart', this._documentTouchstartListener, pa),
                window.removeEventListener('focus', this._windowFocusListener),
                clearTimeout(this._windowFocusTimeoutId),
                clearTimeout(this._touchTimeoutId),
                clearTimeout(this._originTimeoutId));
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(s.y), Object(s.Pb)(Zr));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        fa = (() =>
          class {
            constructor(t, e) {
              (this._elementRef = t),
                (this._focusMonitor = e),
                (this.cdkFocusChange = new s.m()),
                (this._monitorSubscription = this._focusMonitor
                  .monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))
                  .subscribe(t => this.cdkFocusChange.emit(t)));
            }
            ngOnDestroy() {
              this._focusMonitor.stopMonitoring(this._elementRef), this._monitorSubscription.unsubscribe();
            }
          })();
      function ga(t) {
        return 0 === t.buttons;
      }
      let ba = (() => class {})();
      const _a = new s.N('8.1.2'),
        ya = new s.p('mat-sanity-checks', {
          providedIn: 'root',
          factory: function() {
            return !0;
          }
        });
      let va = (() =>
        class {
          constructor(t, e) {
            (this._sanityChecksEnabled = t),
              (this._hammerLoader = e),
              (this._hasDoneGlobalChecks = !1),
              (this._hasCheckedHammer = !1),
              (this._document = 'object' == typeof document && document ? document : null),
              (this._window = 'object' == typeof window && window ? window : null),
              this._areChecksEnabled() &&
                !this._hasDoneGlobalChecks &&
                (this._checkDoctypeIsDefined(),
                this._checkThemeIsPresent(),
                this._checkCdkVersionMatch(),
                (this._hasDoneGlobalChecks = !0));
          }
          _areChecksEnabled() {
            return this._sanityChecksEnabled && Object(s.W)() && !this._isTestEnv();
          }
          _isTestEnv() {
            const t = this._window;
            return t && (t.__karma__ || t.jasmine);
          }
          _checkDoctypeIsDefined() {
            this._document &&
              !this._document.doctype &&
              console.warn(
                'Current document does not have a doctype. This may cause some Angular Material components not to behave as expected.'
              );
          }
          _checkThemeIsPresent() {
            if (!this._document || !this._document.body || 'function' != typeof getComputedStyle) return;
            const t = this._document.createElement('div');
            t.classList.add('mat-theme-loaded-marker'), this._document.body.appendChild(t);
            const e = getComputedStyle(t);
            e &&
              'none' !== e.display &&
              console.warn(
                'Could not find Angular Material core theme. Most Material components may not work as expected. For more info refer to the theming guide: https://material.angular.io/guide/theming'
              ),
              this._document.body.removeChild(t);
          }
          _checkCdkVersionMatch() {
            _a.full !== Qo.full &&
              console.warn(
                'The Angular Material version (' +
                  _a.full +
                  ') does not match the Angular CDK version (' +
                  Qo.full +
                  ').\nPlease ensure the versions of these two packages exactly match.'
              );
          }
          _checkHammerIsAvailable() {
            !this._hasCheckedHammer &&
              this._window &&
              (!this._areChecksEnabled() ||
                this._window.Hammer ||
                this._hammerLoader ||
                console.warn('Could not find HammerJS. Certain Angular Material components may not work correctly.'),
              (this._hasCheckedHammer = !0));
          }
        })();
      function wa(t) {
        return class extends t {
          constructor(...t) {
            super(...t), (this._disabled = !1);
          }
          get disabled() {
            return this._disabled;
          }
          set disabled(t) {
            this._disabled = Cr(t);
          }
        };
      }
      function Ca(t, e) {
        return class extends t {
          get color() {
            return this._color;
          }
          set color(t) {
            const n = t || e;
            n !== this._color &&
              (this._color && this._elementRef.nativeElement.classList.remove(`mat-${this._color}`),
              n && this._elementRef.nativeElement.classList.add(`mat-${n}`),
              (this._color = n));
          }
          constructor(...t) {
            super(...t), (this.color = e);
          }
        };
      }
      function xa(t) {
        return class extends t {
          constructor(...t) {
            super(...t), (this._disableRipple = !1);
          }
          get disableRipple() {
            return this._disableRipple;
          }
          set disableRipple(t) {
            this._disableRipple = Cr(t);
          }
        };
      }
      const Ea = new s.p('MAT_DATE_LOCALE', {
        providedIn: 'root',
        factory: function() {
          return Object(s.V)(s.t);
        }
      });
      class Sa {
        constructor() {
          this._localeChanges = new u.a();
        }
        get localeChanges() {
          return this._localeChanges;
        }
        deserialize(t) {
          return null == t || (this.isDateInstance(t) && this.isValid(t)) ? t : this.invalid();
        }
        setLocale(t) {
          (this.locale = t), this._localeChanges.next();
        }
        compareDate(t, e) {
          return (
            this.getYear(t) - this.getYear(e) ||
            this.getMonth(t) - this.getMonth(e) ||
            this.getDate(t) - this.getDate(e)
          );
        }
        sameDate(t, e) {
          if (t && e) {
            let n = this.isValid(t),
              s = this.isValid(e);
            return n && s ? !this.compareDate(t, e) : n == s;
          }
          return t == e;
        }
        clampDate(t, e, n) {
          return e && this.compareDate(t, e) < 0 ? e : n && this.compareDate(t, n) > 0 ? n : t;
        }
      }
      const ka = new s.p('mat-date-formats');
      let Da;
      try {
        Da = 'undefined' != typeof Intl;
      } catch (kb) {
        Da = !1;
      }
      const Aa = {
          long: [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December'
          ],
          short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
          narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
        },
        Ta = Ra(31, t => String(t + 1)),
        Oa = {
          long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
          short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
          narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
        },
        Ia = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
      function Ra(t, e) {
        const n = Array(t);
        for (let s = 0; s < t; s++) n[s] = e(s);
        return n;
      }
      let Pa = (() =>
        class extends Sa {
          constructor(t, e) {
            super(),
              (this.useUtcForDisplay = !0),
              super.setLocale(t),
              (this.useUtcForDisplay = !e.TRIDENT),
              (this._clampDate = e.TRIDENT || e.EDGE);
          }
          getYear(t) {
            return t.getFullYear();
          }
          getMonth(t) {
            return t.getMonth();
          }
          getDate(t) {
            return t.getDate();
          }
          getDayOfWeek(t) {
            return t.getDay();
          }
          getMonthNames(t) {
            if (Da) {
              const e = new Intl.DateTimeFormat(this.locale, { month: t, timeZone: 'utc' });
              return Ra(12, t => this._stripDirectionalityCharacters(this._format(e, new Date(2017, t, 1))));
            }
            return Aa[t];
          }
          getDateNames() {
            if (Da) {
              const t = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });
              return Ra(31, e => this._stripDirectionalityCharacters(this._format(t, new Date(2017, 0, e + 1))));
            }
            return Ta;
          }
          getDayOfWeekNames(t) {
            if (Da) {
              const e = new Intl.DateTimeFormat(this.locale, { weekday: t, timeZone: 'utc' });
              return Ra(7, t => this._stripDirectionalityCharacters(this._format(e, new Date(2017, 0, t + 1))));
            }
            return Oa[t];
          }
          getYearName(t) {
            if (Da) {
              const e = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });
              return this._stripDirectionalityCharacters(this._format(e, t));
            }
            return String(this.getYear(t));
          }
          getFirstDayOfWeek() {
            return 0;
          }
          getNumDaysInMonth(t) {
            return this.getDate(this._createDateWithOverflow(this.getYear(t), this.getMonth(t) + 1, 0));
          }
          clone(t) {
            return new Date(t.getTime());
          }
          createDate(t, e, n) {
            if (e < 0 || e > 11) throw Error(`Invalid month index "${e}". Month index has to be between 0 and 11.`);
            if (n < 1) throw Error(`Invalid date "${n}". Date has to be greater than 0.`);
            let s = this._createDateWithOverflow(t, e, n);
            if (s.getMonth() != e) throw Error(`Invalid date "${n}" for month with index "${e}".`);
            return s;
          }
          today() {
            return new Date();
          }
          parse(t) {
            return 'number' == typeof t ? new Date(t) : t ? new Date(Date.parse(t)) : null;
          }
          format(t, e) {
            if (!this.isValid(t)) throw Error('NativeDateAdapter: Cannot format invalid date.');
            if (Da) {
              this._clampDate &&
                (t.getFullYear() < 1 || t.getFullYear() > 9999) &&
                (t = this.clone(t)).setFullYear(Math.max(1, Math.min(9999, t.getFullYear()))),
                (e = Object.assign({}, e, { timeZone: 'utc' }));
              const n = new Intl.DateTimeFormat(this.locale, e);
              return this._stripDirectionalityCharacters(this._format(n, t));
            }
            return this._stripDirectionalityCharacters(t.toDateString());
          }
          addCalendarYears(t, e) {
            return this.addCalendarMonths(t, 12 * e);
          }
          addCalendarMonths(t, e) {
            let n = this._createDateWithOverflow(this.getYear(t), this.getMonth(t) + e, this.getDate(t));
            return (
              this.getMonth(n) != (((this.getMonth(t) + e) % 12) + 12) % 12 &&
                (n = this._createDateWithOverflow(this.getYear(n), this.getMonth(n), 0)),
              n
            );
          }
          addCalendarDays(t, e) {
            return this._createDateWithOverflow(this.getYear(t), this.getMonth(t), this.getDate(t) + e);
          }
          toIso8601(t) {
            return [t.getUTCFullYear(), this._2digit(t.getUTCMonth() + 1), this._2digit(t.getUTCDate())].join('-');
          }
          deserialize(t) {
            if ('string' == typeof t) {
              if (!t) return null;
              if (Ia.test(t)) {
                let e = new Date(t);
                if (this.isValid(e)) return e;
              }
            }
            return super.deserialize(t);
          }
          isDateInstance(t) {
            return t instanceof Date;
          }
          isValid(t) {
            return !isNaN(t.getTime());
          }
          invalid() {
            return new Date(NaN);
          }
          _createDateWithOverflow(t, e, n) {
            const s = new Date(t, e, n);
            return t >= 0 && t < 100 && s.setFullYear(this.getYear(s) - 1900), s;
          }
          _2digit(t) {
            return ('00' + t).slice(-2);
          }
          _stripDirectionalityCharacters(t) {
            return t.replace(/[\u200e\u200f]/g, '');
          }
          _format(t, e) {
            const n = new Date(
              Date.UTC(
                e.getFullYear(),
                e.getMonth(),
                e.getDate(),
                e.getHours(),
                e.getMinutes(),
                e.getSeconds(),
                e.getMilliseconds()
              )
            );
            return t.format(n);
          }
        })();
      const Na = {
        parse: { dateInput: null },
        display: {
          dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },
          monthYearLabel: { year: 'numeric', month: 'short' },
          dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
          monthYearA11yLabel: { year: 'numeric', month: 'long' }
        }
      };
      let Ma = (() => class {})(),
        La = (() => class {})(),
        ja = (() => {
          class t {
            isErrorState(t, e) {
              return !!(t && t.invalid && (t.touched || (e && e.submitted)));
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t();
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })();
      const Fa = new s.p('MAT_HAMMER_OPTIONS'),
        Ba = ['longpress', 'slide', 'slidestart', 'slideend', 'slideright', 'slideleft'],
        Va = { on: () => {}, off: () => {} };
      let Ua = (() =>
        class extends Et.g {
          constructor(t, e) {
            super(), (this._hammerOptions = t), (this.events = Ba), e && e._checkHammerIsAvailable();
          }
          buildHammer(t) {
            const e = 'undefined' != typeof window ? window.Hammer : null;
            if (!e) return Va;
            const n = new e(t, this._hammerOptions || void 0),
              s = new e.Pan(),
              i = new e.Swipe(),
              r = new e.Press(),
              o = this._createRecognizer(s, { event: 'slide', threshold: 0 }, i),
              a = this._createRecognizer(r, { event: 'longpress', time: 500 });
            return s.recognizeWith(i), a.recognizeWith(o), n.add([i, r, s, o, a]), n;
          }
          _createRecognizer(t, e, ...n) {
            let s = new t.constructor(e);
            return n.push(t), n.forEach(t => s.recognizeWith(t)), s;
          }
        })();
      function Ha(t, e, n) {
        const s = t.nativeElement.classList;
        n ? s.add(e) : s.remove(e);
      }
      let za = (() => class {})();
      const $a = (function() {
        var t = { FADING_IN: 0, VISIBLE: 1, FADING_OUT: 2, HIDDEN: 3 };
        return (
          (t[t.FADING_IN] = 'FADING_IN'),
          (t[t.VISIBLE] = 'VISIBLE'),
          (t[t.FADING_OUT] = 'FADING_OUT'),
          (t[t.HIDDEN] = 'HIDDEN'),
          t
        );
      })();
      class qa {
        constructor(t, e, n) {
          (this._renderer = t), (this.element = e), (this.config = n), (this.state = $a.HIDDEN);
        }
        fadeOut() {
          this._renderer.fadeOutRipple(this);
        }
      }
      const Wa = { enterDuration: 450, exitDuration: 400 },
        Ka = 800,
        Ya = Jr({ passive: !0 });
      class Qa {
        constructor(t, e, n, s) {
          (this._target = t),
            (this._ngZone = e),
            (this._isPointerDown = !1),
            (this._triggerEvents = new Map()),
            (this._activeRipples = new Set()),
            (this._onMousedown = t => {
              const e = ga(t),
                n = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + Ka;
              this._target.rippleDisabled ||
                e ||
                n ||
                ((this._isPointerDown = !0), this.fadeInRipple(t.clientX, t.clientY, this._target.rippleConfig));
            }),
            (this._onTouchStart = t => {
              if (!this._target.rippleDisabled) {
                (this._lastTouchStartEvent = Date.now()), (this._isPointerDown = !0);
                const e = t.changedTouches;
                for (let t = 0; t < e.length; t++)
                  this.fadeInRipple(e[t].clientX, e[t].clientY, this._target.rippleConfig);
              }
            }),
            (this._onPointerUp = () => {
              this._isPointerDown &&
                ((this._isPointerDown = !1),
                this._activeRipples.forEach(t => {
                  !t.config.persistent &&
                    (t.state === $a.VISIBLE || (t.config.terminateOnPointerUp && t.state === $a.FADING_IN)) &&
                    t.fadeOut();
                }));
            }),
            s.isBrowser &&
              ((this._containerElement = n.nativeElement),
              this._triggerEvents
                .set('mousedown', this._onMousedown)
                .set('mouseup', this._onPointerUp)
                .set('mouseleave', this._onPointerUp)
                .set('touchstart', this._onTouchStart)
                .set('touchend', this._onPointerUp)
                .set('touchcancel', this._onPointerUp));
        }
        fadeInRipple(t, e, n = {}) {
          const s = (this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect()),
            i = Object.assign({}, Wa, n.animation);
          n.centered && ((t = s.left + s.width / 2), (e = s.top + s.height / 2));
          const r =
              n.radius ||
              (function(t, e, n) {
                const s = Math.max(Math.abs(t - n.left), Math.abs(t - n.right)),
                  i = Math.max(Math.abs(e - n.top), Math.abs(e - n.bottom));
                return Math.sqrt(s * s + i * i);
              })(t, e, s),
            o = t - s.left,
            a = e - s.top,
            l = i.enterDuration,
            c = document.createElement('div');
          c.classList.add('mat-ripple-element'),
            (c.style.left = `${o - r}px`),
            (c.style.top = `${a - r}px`),
            (c.style.height = `${2 * r}px`),
            (c.style.width = `${2 * r}px`),
            (c.style.backgroundColor = n.color || null),
            (c.style.transitionDuration = `${l}ms`),
            this._containerElement.appendChild(c),
            window.getComputedStyle(c).getPropertyValue('opacity'),
            (c.style.transform = 'scale(1)');
          const h = new qa(this, c, n);
          return (
            (h.state = $a.FADING_IN),
            this._activeRipples.add(h),
            n.persistent || (this._mostRecentTransientRipple = h),
            this._runTimeoutOutsideZone(() => {
              const t = h === this._mostRecentTransientRipple;
              (h.state = $a.VISIBLE), n.persistent || (t && this._isPointerDown) || h.fadeOut();
            }, l),
            h
          );
        }
        fadeOutRipple(t) {
          const e = this._activeRipples.delete(t);
          if (
            (t === this._mostRecentTransientRipple && (this._mostRecentTransientRipple = null),
            this._activeRipples.size || (this._containerRect = null),
            !e)
          )
            return;
          const n = t.element,
            s = Object.assign({}, Wa, t.config.animation);
          (n.style.transitionDuration = `${s.exitDuration}ms`),
            (n.style.opacity = '0'),
            (t.state = $a.FADING_OUT),
            this._runTimeoutOutsideZone(() => {
              (t.state = $a.HIDDEN), n.parentNode.removeChild(n);
            }, s.exitDuration);
        }
        fadeOutAll() {
          this._activeRipples.forEach(t => t.fadeOut());
        }
        setupTriggerEvents(t) {
          t &&
            t !== this._triggerElement &&
            (this._removeTriggerEvents(),
            this._ngZone.runOutsideAngular(() => {
              this._triggerEvents.forEach((e, n) => {
                t.addEventListener(n, e, Ya);
              });
            }),
            (this._triggerElement = t));
        }
        _runTimeoutOutsideZone(t, e = 0) {
          this._ngZone.runOutsideAngular(() => setTimeout(t, e));
        }
        _removeTriggerEvents() {
          this._triggerElement &&
            this._triggerEvents.forEach((t, e) => {
              this._triggerElement.removeEventListener(e, t, Ya);
            });
        }
      }
      const Ga = new s.p('mat-ripple-global-options');
      let Za = (() =>
          class {
            constructor(t, e, n, s, i) {
              (this._elementRef = t),
                (this.radius = 0),
                (this._disabled = !1),
                (this._isInitialized = !1),
                (this._globalOptions = s || {}),
                (this._rippleRenderer = new Qa(this, e, t, n)),
                'NoopAnimations' === i && (this._globalOptions.animation = { enterDuration: 0, exitDuration: 0 });
            }
            get disabled() {
              return this._disabled;
            }
            set disabled(t) {
              (this._disabled = t), this._setupTriggerEventsIfEnabled();
            }
            get trigger() {
              return this._trigger || this._elementRef.nativeElement;
            }
            set trigger(t) {
              (this._trigger = t), this._setupTriggerEventsIfEnabled();
            }
            ngOnInit() {
              (this._isInitialized = !0), this._setupTriggerEventsIfEnabled();
            }
            ngOnDestroy() {
              this._rippleRenderer._removeTriggerEvents();
            }
            fadeOutAll() {
              this._rippleRenderer.fadeOutAll();
            }
            get rippleConfig() {
              return {
                centered: this.centered,
                radius: this.radius,
                color: this.color,
                animation: Object.assign({}, this._globalOptions.animation, this.animation),
                terminateOnPointerUp: this._globalOptions.terminateOnPointerUp
              };
            }
            get rippleDisabled() {
              return this.disabled || !!this._globalOptions.disabled;
            }
            _setupTriggerEventsIfEnabled() {
              !this.disabled && this._isInitialized && this._rippleRenderer.setupTriggerEvents(this.trigger);
            }
            launch(t, e = 0, n) {
              return 'number' == typeof t
                ? this._rippleRenderer.fadeInRipple(t, e, Object.assign({}, this.rippleConfig, n))
                : this._rippleRenderer.fadeInRipple(0, 0, Object.assign({}, this.rippleConfig, t));
            }
          })(),
        Xa = (() => class {})(),
        Ja = (() => class {})(),
        tl = (() => class {})();
      var el = s.qb({
        encapsulation: 2,
        styles: [
          '.mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}'
        ],
        data: {
          animation: [
            {
              type: 7,
              name: 'dialogContainer',
              definitions: [
                {
                  type: 0,
                  name: 'void, exit',
                  styles: { type: 6, styles: { opacity: 0, transform: 'scale(0.7)' }, offset: null },
                  options: void 0
                },
                {
                  type: 0,
                  name: 'enter',
                  styles: { type: 6, styles: { transform: 'none' }, offset: null },
                  options: void 0
                },
                {
                  type: 1,
                  expr: '* => enter',
                  animation: {
                    type: 4,
                    styles: { type: 6, styles: { transform: 'none', opacity: 1 }, offset: null },
                    timings: '150ms cubic-bezier(0, 0, 0.2, 1)'
                  },
                  options: null
                },
                {
                  type: 1,
                  expr: '* => void, * => exit',
                  animation: {
                    type: 4,
                    styles: { type: 6, styles: { opacity: 0 }, offset: null },
                    timings: '75ms cubic-bezier(0.4, 0.0, 0.2, 1)'
                  },
                  options: null
                }
              ],
              options: {}
            }
          ]
        }
      });
      function nl(t) {
        return s.Kb(0, [(t()(), s.hb(0, null, null, 0))], null, null);
      }
      function sl(t) {
        return s.Kb(
          0,
          [
            s.Gb(402653184, 1, { _portalOutlet: 0 }),
            (t()(), s.hb(16777216, null, null, 1, null, nl)),
            s.rb(2, 212992, [[1, 4]], 0, rr, [s.j, s.O], { portal: [0, 'portal'] }, null)
          ],
          function(t, e) {
            t(e, 2, 0, '');
          },
          null
        );
      }
      function il(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              1,
              'mat-dialog-container',
              [['aria-modal', 'true'], ['class', 'mat-dialog-container'], ['tabindex', '-1']],
              [
                [1, 'id', 0],
                [1, 'role', 0],
                [1, 'aria-labelledby', 0],
                [1, 'aria-label', 0],
                [1, 'aria-describedby', 0],
                [40, '@dialogContainer', 0]
              ],
              [['component', '@dialogContainer.start'], ['component', '@dialogContainer.done']],
              function(t, e, n) {
                var i = !0;
                return (
                  'component:@dialogContainer.start' === e && (i = !1 !== s.Db(t, 1)._onAnimationStart(n) && i),
                  'component:@dialogContainer.done' === e && (i = !1 !== s.Db(t, 1)._onAnimationDone(n) && i),
                  i
                );
              },
              sl,
              el
            )),
            s.rb(1, 49152, null, 0, Vo, [s.k, oa, s.h, [2, r.d], Fo], null, null)
          ],
          null,
          function(t, e) {
            t(
              e,
              0,
              0,
              s.Db(e, 1)._id,
              s.Db(e, 1)._config.role,
              s.Db(e, 1)._config.ariaLabel ? null : s.Db(e, 1)._ariaLabelledBy,
              s.Db(e, 1)._config.ariaLabel,
              s.Db(e, 1)._config.ariaDescribedBy || null,
              s.Db(e, 1)._state
            );
          }
        );
      }
      var rl = s.ob('mat-dialog-container', Vo, il, {}, {}, []),
        ol = n('XoHu');
      function al(t, e) {
        return new m.a(n => {
          const s = t.length;
          if (0 === s) return void n.complete();
          const i = new Array(s);
          let r = 0,
            o = 0;
          for (let a = 0; a < s; a++) {
            const l = Object(h.a)(t[a]);
            let c = !1;
            n.add(
              l.subscribe({
                next: t => {
                  c || ((c = !0), o++), (i[a] = t);
                },
                error: t => n.error(t),
                complete: () => {
                  (++r !== s && c) ||
                    (o === s && n.next(e ? e.reduce((t, e, n) => ((t[e] = i[n]), t), {}) : i), n.complete());
                }
              })
            );
          }
        });
      }
      let ll = (() =>
        class {
          constructor() {
            this._accessors = [];
          }
          add(t, e) {
            this._accessors.push([t, e]);
          }
          remove(t) {
            for (let e = this._accessors.length - 1; e >= 0; --e)
              if (this._accessors[e][1] === t) return void this._accessors.splice(e, 1);
          }
          select(t) {
            this._accessors.forEach(e => {
              this._isSameGroup(e, t) && e[1] !== t && e[1].fireUncheck(t.value);
            });
          }
          _isSameGroup(t, e) {
            return !!t[0].control && t[0]._parent === e._control._parent && t[1].name === e.name;
          }
        })();
      const cl = new s.p('NgFormSelectorWarning');
      let hl = (() => class {})(),
        ul = (() => {
          class t {
            static withConfig(e) {
              return { ngModule: t, providers: [{ provide: cl, useValue: e.warnOnDeprecatedNgFormSelector }] };
            }
          }
          return t;
        })();
      function dl(t) {
        return Error(
          `MatDatepicker: No provider found for ${t}. You must import one of the following ` +
            'modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a custom implementation.'
        );
      }
      let pl = (() => {
        class t {
          constructor() {
            (this.changes = new u.a()),
              (this.calendarLabel = 'Calendar'),
              (this.openCalendarLabel = 'Open calendar'),
              (this.prevMonthLabel = 'Previous month'),
              (this.nextMonthLabel = 'Next month'),
              (this.prevYearLabel = 'Previous year'),
              (this.nextYearLabel = 'Next year'),
              (this.prevMultiYearLabel = 'Previous 20 years'),
              (this.nextMultiYearLabel = 'Next 20 years'),
              (this.switchToMonthViewLabel = 'Choose date'),
              (this.switchToMultiYearViewLabel = 'Choose month and year');
          }
        }
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            factory: function() {
              return new t();
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      class ml {
        constructor(t, e, n, s, i) {
          (this.value = t), (this.displayValue = e), (this.ariaLabel = n), (this.enabled = s), (this.cssClasses = i);
        }
      }
      let fl = (() =>
          class {
            constructor(t, e) {
              (this._elementRef = t),
                (this._ngZone = e),
                (this.numCols = 7),
                (this.activeCell = 0),
                (this.cellAspectRatio = 1),
                (this.selectedValueChange = new s.m());
            }
            _cellClicked(t) {
              t.enabled && this.selectedValueChange.emit(t.value);
            }
            ngOnChanges(t) {
              const e = t.numCols,
                { rows: n, numCols: s } = this;
              (t.rows || e) && (this._firstRowOffset = n && n.length && n[0].length ? s - n[0].length : 0),
                (t.cellAspectRatio || e || !this._cellPadding) &&
                  (this._cellPadding = `${(50 * this.cellAspectRatio) / s}%`),
                (!e && this._cellWidth) || (this._cellWidth = `${100 / s}%`);
            }
            _isActiveCell(t, e) {
              let n = t * this.numCols + e;
              return t && (n -= this._firstRowOffset), n == this.activeCell;
            }
            _focusActiveCell() {
              this._ngZone.runOutsideAngular(() => {
                this._ngZone.onStable
                  .asObservable()
                  .pipe(Z(1))
                  .subscribe(() => {
                    const t = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');
                    t && t.focus();
                  });
              });
            }
          })(),
        gl = (() =>
          class {
            constructor(t, e, n, i) {
              if (
                ((this._changeDetectorRef = t),
                (this._dateFormats = e),
                (this._dateAdapter = n),
                (this._dir = i),
                (this.selectedChange = new s.m()),
                (this._userSelection = new s.m()),
                (this.activeDateChange = new s.m()),
                !this._dateAdapter)
              )
                throw dl('DateAdapter');
              if (!this._dateFormats) throw dl('MAT_DATE_FORMATS');
              const r = this._dateAdapter.getFirstDayOfWeek(),
                o = this._dateAdapter.getDayOfWeekNames('narrow');
              let a = this._dateAdapter.getDayOfWeekNames('long').map((t, e) => ({ long: t, narrow: o[e] }));
              (this._weekdays = a.slice(r).concat(a.slice(0, r))), (this._activeDate = this._dateAdapter.today());
            }
            get activeDate() {
              return this._activeDate;
            }
            set activeDate(t) {
              const e = this._activeDate,
                n = this._getValidDateOrNull(this._dateAdapter.deserialize(t)) || this._dateAdapter.today();
              (this._activeDate = this._dateAdapter.clampDate(n, this.minDate, this.maxDate)),
                this._hasSameMonthAndYear(e, this._activeDate) || this._init();
            }
            get selected() {
              return this._selected;
            }
            set selected(t) {
              (this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(t))),
                (this._selectedDate = this._getDateInCurrentMonth(this._selected));
            }
            get minDate() {
              return this._minDate;
            }
            set minDate(t) {
              this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(t));
            }
            get maxDate() {
              return this._maxDate;
            }
            set maxDate(t) {
              this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(t));
            }
            ngAfterContentInit() {
              this._init();
            }
            _dateSelected(t) {
              if (this._selectedDate != t) {
                const e = this._dateAdapter.getYear(this.activeDate),
                  n = this._dateAdapter.getMonth(this.activeDate),
                  s = this._dateAdapter.createDate(e, n, t);
                this.selectedChange.emit(s);
              }
              this._userSelection.emit();
            }
            _handleCalendarBodyKeydown(t) {
              const e = this._activeDate,
                n = this._isRtl();
              switch (t.keyCode) {
                case hr:
                  this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, n ? 1 : -1);
                  break;
                case dr:
                  this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, n ? -1 : 1);
                  break;
                case ur:
                  this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);
                  break;
                case pr:
                  this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);
                  break;
                case 36:
                  this.activeDate = this._dateAdapter.addCalendarDays(
                    this._activeDate,
                    1 - this._dateAdapter.getDate(this._activeDate)
                  );
                  break;
                case 35:
                  this.activeDate = this._dateAdapter.addCalendarDays(
                    this._activeDate,
                    this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate)
                  );
                  break;
                case 33:
                  this.activeDate = t.altKey
                    ? this._dateAdapter.addCalendarYears(this._activeDate, -1)
                    : this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                  break;
                case 34:
                  this.activeDate = t.altKey
                    ? this._dateAdapter.addCalendarYears(this._activeDate, 1)
                    : this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                  break;
                case 13:
                case 32:
                  return void (
                    (this.dateFilter && !this.dateFilter(this._activeDate)) ||
                    (this._dateSelected(this._dateAdapter.getDate(this._activeDate)),
                    this._userSelection.emit(),
                    t.preventDefault())
                  );
                default:
                  return;
              }
              this._dateAdapter.compareDate(e, this.activeDate) && this.activeDateChange.emit(this.activeDate),
                this._focusActiveCell(),
                t.preventDefault();
            }
            _init() {
              (this._selectedDate = this._getDateInCurrentMonth(this.selected)),
                (this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today())),
                (this._monthLabel = this._dateAdapter
                  .getMonthNames('short')
                  [this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase());
              let t = this._dateAdapter.createDate(
                this._dateAdapter.getYear(this.activeDate),
                this._dateAdapter.getMonth(this.activeDate),
                1
              );
              (this._firstWeekOffset =
                (7 + this._dateAdapter.getDayOfWeek(t) - this._dateAdapter.getFirstDayOfWeek()) % 7),
                this._createWeekCells(),
                this._changeDetectorRef.markForCheck();
            }
            _focusActiveCell() {
              this._matCalendarBody._focusActiveCell();
            }
            _createWeekCells() {
              const t = this._dateAdapter.getNumDaysInMonth(this.activeDate),
                e = this._dateAdapter.getDateNames();
              this._weeks = [[]];
              for (let n = 0, s = this._firstWeekOffset; n < t; n++, s++) {
                7 == s && (this._weeks.push([]), (s = 0));
                const t = this._dateAdapter.createDate(
                    this._dateAdapter.getYear(this.activeDate),
                    this._dateAdapter.getMonth(this.activeDate),
                    n + 1
                  ),
                  i = this._shouldEnableDate(t),
                  r = this._dateAdapter.format(t, this._dateFormats.display.dateA11yLabel),
                  o = this.dateClass ? this.dateClass(t) : void 0;
                this._weeks[this._weeks.length - 1].push(new ml(n + 1, e[n], r, i, o));
              }
            }
            _shouldEnableDate(t) {
              return (
                !!t &&
                (!this.dateFilter || this.dateFilter(t)) &&
                (!this.minDate || this._dateAdapter.compareDate(t, this.minDate) >= 0) &&
                (!this.maxDate || this._dateAdapter.compareDate(t, this.maxDate) <= 0)
              );
            }
            _getDateInCurrentMonth(t) {
              return t && this._hasSameMonthAndYear(t, this.activeDate) ? this._dateAdapter.getDate(t) : null;
            }
            _hasSameMonthAndYear(t, e) {
              return !(
                !t ||
                !e ||
                this._dateAdapter.getMonth(t) != this._dateAdapter.getMonth(e) ||
                this._dateAdapter.getYear(t) != this._dateAdapter.getYear(e)
              );
            }
            _getValidDateOrNull(t) {
              return this._dateAdapter.isDateInstance(t) && this._dateAdapter.isValid(t) ? t : null;
            }
            _isRtl() {
              return this._dir && 'rtl' === this._dir.value;
            }
          })();
      const bl = 24;
      let _l = (() =>
        class {
          constructor(t, e, n) {
            if (
              ((this._changeDetectorRef = t),
              (this._dateAdapter = e),
              (this._dir = n),
              (this.selectedChange = new s.m()),
              (this.yearSelected = new s.m()),
              (this.activeDateChange = new s.m()),
              !this._dateAdapter)
            )
              throw dl('DateAdapter');
            this._activeDate = this._dateAdapter.today();
          }
          get activeDate() {
            return this._activeDate;
          }
          set activeDate(t) {
            let e = this._activeDate;
            const n = this._getValidDateOrNull(this._dateAdapter.deserialize(t)) || this._dateAdapter.today();
            (this._activeDate = this._dateAdapter.clampDate(n, this.minDate, this.maxDate)),
              yl(this._dateAdapter, e, this._activeDate, this.minDate, this.maxDate) || this._init();
          }
          get selected() {
            return this._selected;
          }
          set selected(t) {
            (this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(t))),
              (this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected));
          }
          get minDate() {
            return this._minDate;
          }
          set minDate(t) {
            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(t));
          }
          get maxDate() {
            return this._maxDate;
          }
          set maxDate(t) {
            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(t));
          }
          ngAfterContentInit() {
            this._init();
          }
          _init() {
            this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());
            const t =
              this._dateAdapter.getYear(this._activeDate) -
              vl(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);
            this._years = [];
            for (let e = 0, n = []; e < bl; e++)
              n.push(t + e), 4 == n.length && (this._years.push(n.map(t => this._createCellForYear(t))), (n = []));
            this._changeDetectorRef.markForCheck();
          }
          _yearSelected(t) {
            this.yearSelected.emit(this._dateAdapter.createDate(t, 0, 1));
            let e = this._dateAdapter.getMonth(this.activeDate),
              n = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(t, e, 1));
            this.selectedChange.emit(
              this._dateAdapter.createDate(t, e, Math.min(this._dateAdapter.getDate(this.activeDate), n))
            );
          }
          _handleCalendarBodyKeydown(t) {
            const e = this._activeDate,
              n = this._isRtl();
            switch (t.keyCode) {
              case hr:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, n ? 1 : -1);
                break;
              case dr:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, n ? -1 : 1);
                break;
              case ur:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -4);
                break;
              case pr:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 4);
                break;
              case 36:
                this.activeDate = this._dateAdapter.addCalendarYears(
                  this._activeDate,
                  -vl(this._dateAdapter, this.activeDate, this.minDate, this.maxDate)
                );
                break;
              case 35:
                this.activeDate = this._dateAdapter.addCalendarYears(
                  this._activeDate,
                  bl - vl(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1
                );
                break;
              case 33:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, t.altKey ? 10 * -bl : -bl);
                break;
              case 34:
                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, t.altKey ? 10 * bl : bl);
                break;
              case 13:
              case 32:
                this._yearSelected(this._dateAdapter.getYear(this._activeDate));
                break;
              default:
                return;
            }
            this._dateAdapter.compareDate(e, this.activeDate) && this.activeDateChange.emit(this.activeDate),
              this._focusActiveCell(),
              t.preventDefault();
          }
          _getActiveCell() {
            return vl(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);
          }
          _focusActiveCell() {
            this._matCalendarBody._focusActiveCell();
          }
          _createCellForYear(t) {
            let e = this._dateAdapter.getYearName(this._dateAdapter.createDate(t, 0, 1));
            return new ml(t, e, e, this._shouldEnableYear(t));
          }
          _shouldEnableYear(t) {
            if (
              null == t ||
              (this.maxDate && t > this._dateAdapter.getYear(this.maxDate)) ||
              (this.minDate && t < this._dateAdapter.getYear(this.minDate))
            )
              return !1;
            if (!this.dateFilter) return !0;
            for (
              let e = this._dateAdapter.createDate(t, 0, 1);
              this._dateAdapter.getYear(e) == t;
              e = this._dateAdapter.addCalendarDays(e, 1)
            )
              if (this.dateFilter(e)) return !0;
            return !1;
          }
          _getValidDateOrNull(t) {
            return this._dateAdapter.isDateInstance(t) && this._dateAdapter.isValid(t) ? t : null;
          }
          _isRtl() {
            return this._dir && 'rtl' === this._dir.value;
          }
        })();
      function yl(t, e, n, s, i) {
        const r = t.getYear(e),
          o = t.getYear(n),
          a = wl(t, s, i);
        return Math.floor((r - a) / bl) === Math.floor((o - a) / bl);
      }
      function vl(t, e, n, s) {
        return (((t.getYear(e) - wl(t, n, s)) % (i = bl)) + i) % i;
        var i;
      }
      function wl(t, e, n) {
        let s = 0;
        return n ? (s = t.getYear(n) - bl + 1) : e && (s = t.getYear(e)), s;
      }
      let Cl = (() =>
          class {
            constructor(t, e, n, i) {
              if (
                ((this._changeDetectorRef = t),
                (this._dateFormats = e),
                (this._dateAdapter = n),
                (this._dir = i),
                (this.selectedChange = new s.m()),
                (this.monthSelected = new s.m()),
                (this.activeDateChange = new s.m()),
                !this._dateAdapter)
              )
                throw dl('DateAdapter');
              if (!this._dateFormats) throw dl('MAT_DATE_FORMATS');
              this._activeDate = this._dateAdapter.today();
            }
            get activeDate() {
              return this._activeDate;
            }
            set activeDate(t) {
              let e = this._activeDate;
              const n = this._getValidDateOrNull(this._dateAdapter.deserialize(t)) || this._dateAdapter.today();
              (this._activeDate = this._dateAdapter.clampDate(n, this.minDate, this.maxDate)),
                this._dateAdapter.getYear(e) !== this._dateAdapter.getYear(this._activeDate) && this._init();
            }
            get selected() {
              return this._selected;
            }
            set selected(t) {
              (this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(t))),
                (this._selectedMonth = this._getMonthInCurrentYear(this._selected));
            }
            get minDate() {
              return this._minDate;
            }
            set minDate(t) {
              this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(t));
            }
            get maxDate() {
              return this._maxDate;
            }
            set maxDate(t) {
              this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(t));
            }
            ngAfterContentInit() {
              this._init();
            }
            _monthSelected(t) {
              const e = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), t, 1);
              this.monthSelected.emit(e);
              const n = this._dateAdapter.getNumDaysInMonth(e);
              this.selectedChange.emit(
                this._dateAdapter.createDate(
                  this._dateAdapter.getYear(this.activeDate),
                  t,
                  Math.min(this._dateAdapter.getDate(this.activeDate), n)
                )
              );
            }
            _handleCalendarBodyKeydown(t) {
              const e = this._activeDate,
                n = this._isRtl();
              switch (t.keyCode) {
                case hr:
                  this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, n ? 1 : -1);
                  break;
                case dr:
                  this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, n ? -1 : 1);
                  break;
                case ur:
                  this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);
                  break;
                case pr:
                  this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);
                  break;
                case 36:
                  this.activeDate = this._dateAdapter.addCalendarMonths(
                    this._activeDate,
                    -this._dateAdapter.getMonth(this._activeDate)
                  );
                  break;
                case 35:
                  this.activeDate = this._dateAdapter.addCalendarMonths(
                    this._activeDate,
                    11 - this._dateAdapter.getMonth(this._activeDate)
                  );
                  break;
                case 33:
                  this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, t.altKey ? -10 : -1);
                  break;
                case 34:
                  this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, t.altKey ? 10 : 1);
                  break;
                case 13:
                case 32:
                  this._monthSelected(this._dateAdapter.getMonth(this._activeDate));
                  break;
                default:
                  return;
              }
              this._dateAdapter.compareDate(e, this.activeDate) && this.activeDateChange.emit(this.activeDate),
                this._focusActiveCell(),
                t.preventDefault();
            }
            _init() {
              (this._selectedMonth = this._getMonthInCurrentYear(this.selected)),
                (this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today())),
                (this._yearLabel = this._dateAdapter.getYearName(this.activeDate));
              let t = this._dateAdapter.getMonthNames('short');
              (this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(e =>
                e.map(e => this._createCellForMonth(e, t[e]))
              )),
                this._changeDetectorRef.markForCheck();
            }
            _focusActiveCell() {
              this._matCalendarBody._focusActiveCell();
            }
            _getMonthInCurrentYear(t) {
              return t && this._dateAdapter.getYear(t) == this._dateAdapter.getYear(this.activeDate)
                ? this._dateAdapter.getMonth(t)
                : null;
            }
            _createCellForMonth(t, e) {
              let n = this._dateAdapter.format(
                this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), t, 1),
                this._dateFormats.display.monthYearA11yLabel
              );
              return new ml(t, e.toLocaleUpperCase(), n, this._shouldEnableMonth(t));
            }
            _shouldEnableMonth(t) {
              const e = this._dateAdapter.getYear(this.activeDate);
              if (null == t || this._isYearAndMonthAfterMaxDate(e, t) || this._isYearAndMonthBeforeMinDate(e, t))
                return !1;
              if (!this.dateFilter) return !0;
              for (
                let n = this._dateAdapter.createDate(e, t, 1);
                this._dateAdapter.getMonth(n) == t;
                n = this._dateAdapter.addCalendarDays(n, 1)
              )
                if (this.dateFilter(n)) return !0;
              return !1;
            }
            _isYearAndMonthAfterMaxDate(t, e) {
              if (this.maxDate) {
                const n = this._dateAdapter.getYear(this.maxDate),
                  s = this._dateAdapter.getMonth(this.maxDate);
                return t > n || (t === n && e > s);
              }
              return !1;
            }
            _isYearAndMonthBeforeMinDate(t, e) {
              if (this.minDate) {
                const n = this._dateAdapter.getYear(this.minDate),
                  s = this._dateAdapter.getMonth(this.minDate);
                return t < n || (t === n && e < s);
              }
              return !1;
            }
            _getValidDateOrNull(t) {
              return this._dateAdapter.isDateInstance(t) && this._dateAdapter.isValid(t) ? t : null;
            }
            _isRtl() {
              return this._dir && 'rtl' === this._dir.value;
            }
          })(),
        xl = (() =>
          class {
            constructor(t, e, n, s, i) {
              (this._intl = t),
                (this.calendar = e),
                (this._dateAdapter = n),
                (this._dateFormats = s),
                this.calendar.stateChanges.subscribe(() => i.markForCheck());
            }
            get periodButtonText() {
              if ('month' == this.calendar.currentView)
                return this._dateAdapter
                  .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)
                  .toLocaleUpperCase();
              if ('year' == this.calendar.currentView) return this._dateAdapter.getYearName(this.calendar.activeDate);
              const t =
                this._dateAdapter.getYear(this.calendar.activeDate) -
                vl(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);
              return `${t} \u2013 ${t + bl - 1}`;
            }
            get periodButtonLabel() {
              return 'month' == this.calendar.currentView
                ? this._intl.switchToMultiYearViewLabel
                : this._intl.switchToMonthViewLabel;
            }
            get prevButtonLabel() {
              return {
                month: this._intl.prevMonthLabel,
                year: this._intl.prevYearLabel,
                'multi-year': this._intl.prevMultiYearLabel
              }[this.calendar.currentView];
            }
            get nextButtonLabel() {
              return {
                month: this._intl.nextMonthLabel,
                year: this._intl.nextYearLabel,
                'multi-year': this._intl.nextMultiYearLabel
              }[this.calendar.currentView];
            }
            currentPeriodClicked() {
              this.calendar.currentView = 'month' == this.calendar.currentView ? 'multi-year' : 'month';
            }
            previousClicked() {
              this.calendar.activeDate =
                'month' == this.calendar.currentView
                  ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1)
                  : this._dateAdapter.addCalendarYears(
                      this.calendar.activeDate,
                      'year' == this.calendar.currentView ? -1 : -bl
                    );
            }
            nextClicked() {
              this.calendar.activeDate =
                'month' == this.calendar.currentView
                  ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1)
                  : this._dateAdapter.addCalendarYears(
                      this.calendar.activeDate,
                      'year' == this.calendar.currentView ? 1 : bl
                    );
            }
            previousEnabled() {
              return (
                !this.calendar.minDate ||
                !this.calendar.minDate ||
                !this._isSameView(this.calendar.activeDate, this.calendar.minDate)
              );
            }
            nextEnabled() {
              return !this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);
            }
            _isSameView(t, e) {
              return 'month' == this.calendar.currentView
                ? this._dateAdapter.getYear(t) == this._dateAdapter.getYear(e) &&
                    this._dateAdapter.getMonth(t) == this._dateAdapter.getMonth(e)
                : 'year' == this.calendar.currentView
                ? this._dateAdapter.getYear(t) == this._dateAdapter.getYear(e)
                : yl(this._dateAdapter, t, e, this.calendar.minDate, this.calendar.maxDate);
            }
          })(),
        El = (() =>
          class {
            constructor(t, e, n, i) {
              if (
                ((this._dateAdapter = e),
                (this._dateFormats = n),
                (this._changeDetectorRef = i),
                (this._moveFocusOnNextTick = !1),
                (this.startView = 'month'),
                (this.selectedChange = new s.m()),
                (this.yearSelected = new s.m()),
                (this.monthSelected = new s.m()),
                (this._userSelection = new s.m()),
                (this.stateChanges = new u.a()),
                !this._dateAdapter)
              )
                throw dl('DateAdapter');
              if (!this._dateFormats) throw dl('MAT_DATE_FORMATS');
              this._intlChanges = t.changes.subscribe(() => {
                i.markForCheck(), this.stateChanges.next();
              });
            }
            get startAt() {
              return this._startAt;
            }
            set startAt(t) {
              this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(t));
            }
            get selected() {
              return this._selected;
            }
            set selected(t) {
              this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(t));
            }
            get minDate() {
              return this._minDate;
            }
            set minDate(t) {
              this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(t));
            }
            get maxDate() {
              return this._maxDate;
            }
            set maxDate(t) {
              this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(t));
            }
            get activeDate() {
              return this._clampedActiveDate;
            }
            set activeDate(t) {
              (this._clampedActiveDate = this._dateAdapter.clampDate(t, this.minDate, this.maxDate)),
                this.stateChanges.next(),
                this._changeDetectorRef.markForCheck();
            }
            get currentView() {
              return this._currentView;
            }
            set currentView(t) {
              (this._currentView = t), (this._moveFocusOnNextTick = !0), this._changeDetectorRef.markForCheck();
            }
            ngAfterContentInit() {
              (this._calendarHeaderPortal = new er(this.headerComponent || xl)),
                (this.activeDate = this.startAt || this._dateAdapter.today()),
                (this._currentView = this.startView);
            }
            ngAfterViewChecked() {
              this._moveFocusOnNextTick && ((this._moveFocusOnNextTick = !1), this.focusActiveCell());
            }
            ngOnDestroy() {
              this._intlChanges.unsubscribe(), this.stateChanges.complete();
            }
            ngOnChanges(t) {
              const e = t.minDate || t.maxDate || t.dateFilter;
              if (e && !e.firstChange) {
                const t = this._getCurrentViewComponent();
                t && (this._changeDetectorRef.detectChanges(), t._init());
              }
              this.stateChanges.next();
            }
            focusActiveCell() {
              this._getCurrentViewComponent()._focusActiveCell();
            }
            updateTodaysDate() {
              ('month' == this.currentView
                ? this.monthView
                : 'year' == this.currentView
                ? this.yearView
                : this.multiYearView
              ).ngAfterContentInit();
            }
            _dateSelected(t) {
              this._dateAdapter.sameDate(t, this.selected) || this.selectedChange.emit(t);
            }
            _yearSelectedInMultiYearView(t) {
              this.yearSelected.emit(t);
            }
            _monthSelectedInYearView(t) {
              this.monthSelected.emit(t);
            }
            _userSelected() {
              this._userSelection.emit();
            }
            _goToDateInView(t, e) {
              (this.activeDate = t), (this.currentView = e);
            }
            _getValidDateOrNull(t) {
              return this._dateAdapter.isDateInstance(t) && this._dateAdapter.isValid(t) ? t : null;
            }
            _getCurrentViewComponent() {
              return this.monthView || this.yearView || this.multiYearView;
            }
          })();
      const Sl = new s.p('mat-datepicker-scroll-strategy');
      function kl(t) {
        return () => t.scrollStrategies.reposition();
      }
      class Dl {
        constructor(t) {
          this._elementRef = t;
        }
      }
      const Al = Ca(Dl);
      let Tl = (() =>
          class extends Al {
            constructor(t) {
              super(t);
            }
            ngAfterViewInit() {
              this._calendar.focusActiveCell();
            }
          })(),
        Ol = (() => class {})(),
        Il = (() => {
          class t {
            create(t) {
              return 'undefined' == typeof MutationObserver ? null : new MutationObserver(t);
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t();
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        Rl = (() => {
          class t {
            constructor(t) {
              (this._mutationObserverFactory = t), (this._observedElements = new Map());
            }
            ngOnDestroy() {
              this._observedElements.forEach((t, e) => this._cleanupObserver(e));
            }
            observe(t) {
              const e = kr(t);
              return new m.a(t => {
                const n = this._observeElement(e).subscribe(t);
                return () => {
                  n.unsubscribe(), this._unobserveElement(e);
                };
              });
            }
            _observeElement(t) {
              if (this._observedElements.has(t)) this._observedElements.get(t).count++;
              else {
                const e = new u.a(),
                  n = this._mutationObserverFactory.create(t => e.next(t));
                n && n.observe(t, { characterData: !0, childList: !0, subtree: !0 }),
                  this._observedElements.set(t, { observer: n, stream: e, count: 1 });
              }
              return this._observedElements.get(t).stream;
            }
            _unobserveElement(t) {
              this._observedElements.has(t) &&
                (this._observedElements.get(t).count--,
                this._observedElements.get(t).count || this._cleanupObserver(t));
            }
            _cleanupObserver(t) {
              if (this._observedElements.has(t)) {
                const { observer: e, stream: n } = this._observedElements.get(t);
                e && e.disconnect(), n.complete(), this._observedElements.delete(t);
              }
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(Il));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        Pl = (() => class {})();
      const Nl = [
        'mat-button',
        'mat-flat-button',
        'mat-icon-button',
        'mat-raised-button',
        'mat-stroked-button',
        'mat-mini-fab',
        'mat-fab'
      ];
      class Ml {
        constructor(t) {
          this._elementRef = t;
        }
      }
      const Ll = Ca(wa(xa(Ml)));
      let jl = (() =>
          class extends Ll {
            constructor(t, e, n) {
              super(t),
                (this._focusMonitor = e),
                (this._animationMode = n),
                (this.isRoundButton = this._hasHostAttributes('mat-fab', 'mat-mini-fab')),
                (this.isIconButton = this._hasHostAttributes('mat-icon-button'));
              for (const s of Nl) this._hasHostAttributes(s) && this._getHostElement().classList.add(s);
              this._focusMonitor.monitor(this._elementRef, !0), this.isRoundButton && (this.color = 'accent');
            }
            ngOnDestroy() {
              this._focusMonitor.stopMonitoring(this._elementRef);
            }
            focus() {
              this._getHostElement().focus();
            }
            _getHostElement() {
              return this._elementRef.nativeElement;
            }
            _isRippleDisabled() {
              return this.disableRipple || this.disabled;
            }
            _hasHostAttributes(...t) {
              return t.some(t => this._getHostElement().hasAttribute(t));
            }
          })(),
        Fl = (() => class {})();
      function Bl() {
        return 'undefined' != typeof process;
      }
      function Vl(t) {
        switch (t.length) {
          case 0:
            return new Gi();
          case 1:
            return t[0];
          default:
            return new Zi(t);
        }
      }
      function Ul(t, e, n, s, i = {}, r = {}) {
        const o = [],
          a = [];
        let l = -1,
          c = null;
        if (
          (s.forEach(t => {
            const n = t.offset,
              s = n == l,
              h = (s && c) || {};
            Object.keys(t).forEach(n => {
              let s = n,
                a = t[n];
              if ('offset' !== n)
                switch (((s = e.normalizePropertyName(s, o)), a)) {
                  case Xi:
                    a = i[n];
                    break;
                  case Wi:
                    a = r[n];
                    break;
                  default:
                    a = e.normalizeStyleValue(n, s, a, o);
                }
              h[s] = a;
            }),
              s || a.push(h),
              (c = h),
              (l = n);
          }),
          o.length)
        ) {
          const t = '\n - ';
          throw new Error(`Unable to animate due to the following errors:${t}${o.join(t)}`);
        }
        return a;
      }
      function Hl(t, e, n, s) {
        switch (e) {
          case 'start':
            t.onStart(() => s(n && zl(n, 'start', t)));
            break;
          case 'done':
            t.onDone(() => s(n && zl(n, 'done', t)));
            break;
          case 'destroy':
            t.onDestroy(() => s(n && zl(n, 'destroy', t)));
        }
      }
      function zl(t, e, n) {
        const s = n.totalTime,
          i = $l(
            t.element,
            t.triggerName,
            t.fromState,
            t.toState,
            e || t.phaseName,
            null == s ? t.totalTime : s,
            !!n.disabled
          ),
          r = t._data;
        return null != r && (i._data = r), i;
      }
      function $l(t, e, n, s, i = '', r = 0, o) {
        return { element: t, triggerName: e, fromState: n, toState: s, phaseName: i, totalTime: r, disabled: !!o };
      }
      function ql(t, e, n) {
        let s;
        return t instanceof Map ? (s = t.get(e)) || t.set(e, (s = n)) : (s = t[e]) || (s = t[e] = n), s;
      }
      function Wl(t) {
        const e = t.indexOf(':');
        return [t.substring(1, e), t.substr(e + 1)];
      }
      let Kl = (t, e) => !1,
        Yl = (t, e) => !1,
        Ql = (t, e, n) => [];
      const Gl = Bl();
      (Gl || 'undefined' != typeof Element) &&
        ((Kl = (t, e) => t.contains(e)),
        (Yl = (() => {
          if (Gl || Element.prototype.matches) return (t, e) => t.matches(e);
          {
            const t = Element.prototype,
              e =
                t.matchesSelector ||
                t.mozMatchesSelector ||
                t.msMatchesSelector ||
                t.oMatchesSelector ||
                t.webkitMatchesSelector;
            return e ? (t, n) => e.apply(t, [n]) : Yl;
          }
        })()),
        (Ql = (t, e, n) => {
          let s = [];
          if (n) s.push(...t.querySelectorAll(e));
          else {
            const n = t.querySelector(e);
            n && s.push(n);
          }
          return s;
        }));
      let Zl = null,
        Xl = !1;
      function Jl(t) {
        Zl ||
          ((Zl = ('undefined' != typeof document ? document.body : null) || {}),
          (Xl = !!Zl.style && 'WebkitAppearance' in Zl.style));
        let e = !0;
        return (
          Zl.style &&
            !(function(t) {
              return 'ebkit' == t.substring(1, 6);
            })(t) &&
            !(e = t in Zl.style) &&
            Xl &&
            (e = 'Webkit' + t.charAt(0).toUpperCase() + t.substr(1) in Zl.style),
          e
        );
      }
      const tc = Yl,
        ec = Kl,
        nc = Ql;
      function sc(t) {
        const e = {};
        return (
          Object.keys(t).forEach(n => {
            const s = n.replace(/([a-z])([A-Z])/g, '$1-$2');
            e[s] = t[n];
          }),
          e
        );
      }
      let ic = (() =>
          class {
            validateStyleProperty(t) {
              return Jl(t);
            }
            matchesElement(t, e) {
              return tc(t, e);
            }
            containsElement(t, e) {
              return ec(t, e);
            }
            query(t, e, n) {
              return nc(t, e, n);
            }
            computeStyle(t, e, n) {
              return n || '';
            }
            animate(t, e, n, s, i, r = [], o) {
              return new Gi(n, s);
            }
          })(),
        rc = (() => {
          class t {}
          return (t.NOOP = new ic()), t;
        })();
      const oc = 1e3,
        ac = '{{',
        lc = 'ng-enter',
        cc = 'ng-leave',
        hc = 'ng-trigger',
        uc = '.ng-trigger',
        dc = 'ng-animating',
        pc = '.ng-animating';
      function mc(t) {
        if ('number' == typeof t) return t;
        const e = t.match(/^(-?[\.\d]+)(m?s)/);
        return !e || e.length < 2 ? 0 : fc(parseFloat(e[1]), e[2]);
      }
      function fc(t, e) {
        switch (e) {
          case 's':
            return t * oc;
          default:
            return t;
        }
      }
      function gc(t, e, n) {
        return t.hasOwnProperty('duration')
          ? t
          : (function(t, e, n) {
              let s,
                i = 0,
                r = '';
              if ('string' == typeof t) {
                const n = t.match(/^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i);
                if (null === n)
                  return e.push(`The provided timing value "${t}" is invalid.`), { duration: 0, delay: 0, easing: '' };
                s = fc(parseFloat(n[1]), n[2]);
                const o = n[3];
                null != o && (i = fc(parseFloat(o), n[4]));
                const a = n[5];
                a && (r = a);
              } else s = t;
              if (!n) {
                let n = !1,
                  r = e.length;
                s < 0 && (e.push('Duration values below 0 are not allowed for this animation step.'), (n = !0)),
                  i < 0 && (e.push('Delay values below 0 are not allowed for this animation step.'), (n = !0)),
                  n && e.splice(r, 0, `The provided timing value "${t}" is invalid.`);
              }
              return { duration: s, delay: i, easing: r };
            })(t, e, n);
      }
      function bc(t, e = {}) {
        return (
          Object.keys(t).forEach(n => {
            e[n] = t[n];
          }),
          e
        );
      }
      function _c(t, e, n = {}) {
        if (e) for (let s in t) n[s] = t[s];
        else bc(t, n);
        return n;
      }
      function yc(t, e, n) {
        return n ? e + ':' + n + ';' : '';
      }
      function vc(t) {
        let e = '';
        for (let n = 0; n < t.style.length; n++) {
          const s = t.style.item(n);
          e += yc(0, s, t.style.getPropertyValue(s));
        }
        for (const n in t.style)
          t.style.hasOwnProperty(n) &&
            !n.startsWith('_') &&
            (e += yc(0, n.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase(), t.style[n]));
        t.setAttribute('style', e);
      }
      function wc(t, e, n) {
        t.style &&
          (Object.keys(e).forEach(s => {
            const i = Tc(s);
            n && !n.hasOwnProperty(s) && (n[s] = t.style[i]), (t.style[i] = e[s]);
          }),
          Bl() && vc(t));
      }
      function Cc(t, e) {
        t.style &&
          (Object.keys(e).forEach(e => {
            const n = Tc(e);
            t.style[n] = '';
          }),
          Bl() && vc(t));
      }
      function xc(t) {
        return Array.isArray(t) ? (1 == t.length ? t[0] : Ki(t)) : t;
      }
      const Ec = new RegExp(`${ac}\\s*(.+?)\\s*}}`, 'g');
      function Sc(t) {
        let e = [];
        if ('string' == typeof t) {
          const n = t.toString();
          let s;
          for (; (s = Ec.exec(n)); ) e.push(s[1]);
          Ec.lastIndex = 0;
        }
        return e;
      }
      function kc(t, e, n) {
        const s = t.toString(),
          i = s.replace(Ec, (t, s) => {
            let i = e[s];
            return (
              e.hasOwnProperty(s) || (n.push(`Please provide a value for the animation param ${s}`), (i = '')),
              i.toString()
            );
          });
        return i == s ? t : i;
      }
      function Dc(t) {
        const e = [];
        let n = t.next();
        for (; !n.done; ) e.push(n.value), (n = t.next());
        return e;
      }
      const Ac = /-+([a-z0-9])/g;
      function Tc(t) {
        return t.replace(Ac, (...t) => t[1].toUpperCase());
      }
      function Oc(t, e) {
        return 0 === t || 0 === e;
      }
      function Ic(t, e, n) {
        const s = Object.keys(n);
        if (s.length && e.length) {
          let r = e[0],
            o = [];
          if (
            (s.forEach(t => {
              r.hasOwnProperty(t) || o.push(t), (r[t] = n[t]);
            }),
            o.length)
          )
            for (var i = 1; i < e.length; i++) {
              let n = e[i];
              o.forEach(function(e) {
                n[e] = Pc(t, e);
              });
            }
        }
        return e;
      }
      function Rc(t, e, n) {
        switch (e.type) {
          case 7:
            return t.visitTrigger(e, n);
          case 0:
            return t.visitState(e, n);
          case 1:
            return t.visitTransition(e, n);
          case 2:
            return t.visitSequence(e, n);
          case 3:
            return t.visitGroup(e, n);
          case 4:
            return t.visitAnimate(e, n);
          case 5:
            return t.visitKeyframes(e, n);
          case 6:
            return t.visitStyle(e, n);
          case 8:
            return t.visitReference(e, n);
          case 9:
            return t.visitAnimateChild(e, n);
          case 10:
            return t.visitAnimateRef(e, n);
          case 11:
            return t.visitQuery(e, n);
          case 12:
            return t.visitStagger(e, n);
          default:
            throw new Error(`Unable to resolve animation metadata node #${e.type}`);
        }
      }
      function Pc(t, e) {
        return window.getComputedStyle(t)[e];
      }
      const Nc = '*';
      function Mc(t, e) {
        const n = [];
        return (
          'string' == typeof t
            ? t.split(/\s*,\s*/).forEach(t =>
                (function(t, e, n) {
                  if (':' == t[0]) {
                    const s = (function(t, e) {
                      switch (t) {
                        case ':enter':
                          return 'void => *';
                        case ':leave':
                          return '* => void';
                        case ':increment':
                          return (t, e) => parseFloat(e) > parseFloat(t);
                        case ':decrement':
                          return (t, e) => parseFloat(e) < parseFloat(t);
                        default:
                          return e.push(`The transition alias value "${t}" is not supported`), '* => *';
                      }
                    })(t, n);
                    if ('function' == typeof s) return void e.push(s);
                    t = s;
                  }
                  const s = t.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
                  if (null == s || s.length < 4)
                    return n.push(`The provided transition expression "${t}" is not supported`), e;
                  const i = s[1],
                    r = s[2],
                    o = s[3];
                  e.push(Fc(i, o)), '<' != r[0] || (i == Nc && o == Nc) || e.push(Fc(o, i));
                })(t, n, e)
              )
            : n.push(t),
          n
        );
      }
      const Lc = new Set(['true', '1']),
        jc = new Set(['false', '0']);
      function Fc(t, e) {
        const n = Lc.has(t) || jc.has(t),
          s = Lc.has(e) || jc.has(e);
        return (i, r) => {
          let o = t == Nc || t == i,
            a = e == Nc || e == r;
          return (
            !o && n && 'boolean' == typeof i && (o = i ? Lc.has(t) : jc.has(t)),
            !a && s && 'boolean' == typeof r && (a = r ? Lc.has(e) : jc.has(e)),
            o && a
          );
        };
      }
      const Bc = ':self',
        Vc = new RegExp(`s*${Bc}s*,?`, 'g');
      function Uc(t, e, n) {
        return new zc(t).build(e, n);
      }
      const Hc = '';
      class zc {
        constructor(t) {
          this._driver = t;
        }
        build(t, e) {
          const n = new $c(e);
          return this._resetContextStyleTimingState(n), Rc(this, xc(t), n);
        }
        _resetContextStyleTimingState(t) {
          (t.currentQuerySelector = Hc), (t.collectedStyles = {}), (t.collectedStyles[Hc] = {}), (t.currentTime = 0);
        }
        visitTrigger(t, e) {
          let n = (e.queryCount = 0),
            s = (e.depCount = 0);
          const i = [],
            r = [];
          return (
            '@' == t.name.charAt(0) &&
              e.errors.push("animation triggers cannot be prefixed with an `@` sign (e.g. trigger('@foo', [...]))"),
            t.definitions.forEach(t => {
              if ((this._resetContextStyleTimingState(e), 0 == t.type)) {
                const n = t,
                  s = n.name;
                s
                  .toString()
                  .split(/\s*,\s*/)
                  .forEach(t => {
                    (n.name = t), i.push(this.visitState(n, e));
                  }),
                  (n.name = s);
              } else if (1 == t.type) {
                const i = this.visitTransition(t, e);
                (n += i.queryCount), (s += i.depCount), r.push(i);
              } else e.errors.push('only state() and transition() definitions can sit inside of a trigger()');
            }),
            { type: 7, name: t.name, states: i, transitions: r, queryCount: n, depCount: s, options: null }
          );
        }
        visitState(t, e) {
          const n = this.visitStyle(t.styles, e),
            s = (t.options && t.options.params) || null;
          if (n.containsDynamicStyles) {
            const i = new Set(),
              r = s || {};
            if (
              (n.styles.forEach(t => {
                if (qc(t)) {
                  const e = t;
                  Object.keys(e).forEach(t => {
                    Sc(e[t]).forEach(t => {
                      r.hasOwnProperty(t) || i.add(t);
                    });
                  });
                }
              }),
              i.size)
            ) {
              const n = Dc(i.values());
              e.errors.push(
                `state("${t.name}", ...) must define default values for all the following style substitutions: ${n.join(
                  ', '
                )}`
              );
            }
          }
          return { type: 0, name: t.name, style: n, options: s ? { params: s } : null };
        }
        visitTransition(t, e) {
          (e.queryCount = 0), (e.depCount = 0);
          const n = Rc(this, xc(t.animation), e);
          return {
            type: 1,
            matchers: Mc(t.expr, e.errors),
            animation: n,
            queryCount: e.queryCount,
            depCount: e.depCount,
            options: Wc(t.options)
          };
        }
        visitSequence(t, e) {
          return { type: 2, steps: t.steps.map(t => Rc(this, t, e)), options: Wc(t.options) };
        }
        visitGroup(t, e) {
          const n = e.currentTime;
          let s = 0;
          const i = t.steps.map(t => {
            e.currentTime = n;
            const i = Rc(this, t, e);
            return (s = Math.max(s, e.currentTime)), i;
          });
          return (e.currentTime = s), { type: 3, steps: i, options: Wc(t.options) };
        }
        visitAnimate(t, e) {
          const n = (function(t, e) {
            let n = null;
            if (t.hasOwnProperty('duration')) n = t;
            else if ('number' == typeof t) return Kc(gc(t, e).duration, 0, '');
            const s = t;
            if (s.split(/\s+/).some(t => '{' == t.charAt(0) && '{' == t.charAt(1))) {
              const t = Kc(0, 0, '');
              return (t.dynamic = !0), (t.strValue = s), t;
            }
            return Kc((n = n || gc(s, e)).duration, n.delay, n.easing);
          })(t.timings, e.errors);
          let s;
          e.currentAnimateTimings = n;
          let i = t.styles ? t.styles : Yi({});
          if (5 == i.type) s = this.visitKeyframes(i, e);
          else {
            let i = t.styles,
              r = !1;
            if (!i) {
              r = !0;
              const t = {};
              n.easing && (t.easing = n.easing), (i = Yi(t));
            }
            e.currentTime += n.duration + n.delay;
            const o = this.visitStyle(i, e);
            (o.isEmptyStep = r), (s = o);
          }
          return (e.currentAnimateTimings = null), { type: 4, timings: n, style: s, options: null };
        }
        visitStyle(t, e) {
          const n = this._makeStyleAst(t, e);
          return this._validateStyleAst(n, e), n;
        }
        _makeStyleAst(t, e) {
          const n = [];
          Array.isArray(t.styles)
            ? t.styles.forEach(t => {
                'string' == typeof t
                  ? t == Wi
                    ? n.push(t)
                    : e.errors.push(`The provided style string value ${t} is not allowed.`)
                  : n.push(t);
              })
            : n.push(t.styles);
          let s = !1,
            i = null;
          return (
            n.forEach(t => {
              if (qc(t)) {
                const e = t,
                  n = e.easing;
                if ((n && ((i = n), delete e.easing), !s))
                  for (let t in e)
                    if (e[t].toString().indexOf(ac) >= 0) {
                      s = !0;
                      break;
                    }
              }
            }),
            { type: 6, styles: n, easing: i, offset: t.offset, containsDynamicStyles: s, options: null }
          );
        }
        _validateStyleAst(t, e) {
          const n = e.currentAnimateTimings;
          let s = e.currentTime,
            i = e.currentTime;
          n && i > 0 && (i -= n.duration + n.delay),
            t.styles.forEach(t => {
              'string' != typeof t &&
                Object.keys(t).forEach(n => {
                  if (!this._driver.validateStyleProperty(n))
                    return void e.errors.push(
                      `The provided animation property "${n}" is not a supported CSS property for animations`
                    );
                  const r = e.collectedStyles[e.currentQuerySelector],
                    o = r[n];
                  let a = !0;
                  o &&
                    (i != s &&
                      i >= o.startTime &&
                      s <= o.endTime &&
                      (e.errors.push(
                        `The CSS property "${n}" that exists between the times of "${o.startTime}ms" and "${o.endTime}ms" is also being animated in a parallel animation between the times of "${i}ms" and "${s}ms"`
                      ),
                      (a = !1)),
                    (i = o.startTime)),
                    a && (r[n] = { startTime: i, endTime: s }),
                    e.options &&
                      (function(s, i, r) {
                        const o = e.options.params || {},
                          a = Sc(t[n]);
                        a.length &&
                          a.forEach(t => {
                            o.hasOwnProperty(t) ||
                              r.push(`Unable to resolve the local animation param ${t} in the given list of values`);
                          });
                      })(0, 0, e.errors);
                });
            });
        }
        visitKeyframes(t, e) {
          const n = { type: 5, styles: [], options: null };
          if (!e.currentAnimateTimings)
            return e.errors.push('keyframes() must be placed inside of a call to animate()'), n;
          let s = 0;
          const i = [];
          let r = !1,
            o = !1,
            a = 0;
          const l = t.steps.map(t => {
            const n = this._makeStyleAst(t, e);
            let l =
                null != n.offset
                  ? n.offset
                  : (function(t) {
                      if ('string' == typeof t) return null;
                      let e = null;
                      if (Array.isArray(t))
                        t.forEach(t => {
                          if (qc(t) && t.hasOwnProperty('offset')) {
                            const n = t;
                            (e = parseFloat(n.offset)), delete n.offset;
                          }
                        });
                      else if (qc(t) && t.hasOwnProperty('offset')) {
                        const n = t;
                        (e = parseFloat(n.offset)), delete n.offset;
                      }
                      return e;
                    })(n.styles),
              c = 0;
            return (
              null != l && (s++, (c = n.offset = l)), (o = o || c < 0 || c > 1), (r = r || c < a), (a = c), i.push(c), n
            );
          });
          o && e.errors.push('Please ensure that all keyframe offsets are between 0 and 1'),
            r && e.errors.push('Please ensure that all keyframe offsets are in order');
          const c = t.steps.length;
          let h = 0;
          s > 0 && s < c
            ? e.errors.push('Not all style() steps within the declared keyframes() contain offsets')
            : 0 == s && (h = 1 / (c - 1));
          const u = c - 1,
            d = e.currentTime,
            p = e.currentAnimateTimings,
            m = p.duration;
          return (
            l.forEach((t, s) => {
              const r = h > 0 ? (s == u ? 1 : h * s) : i[s],
                o = r * m;
              (e.currentTime = d + p.delay + o),
                (p.duration = o),
                this._validateStyleAst(t, e),
                (t.offset = r),
                n.styles.push(t);
            }),
            n
          );
        }
        visitReference(t, e) {
          return { type: 8, animation: Rc(this, xc(t.animation), e), options: Wc(t.options) };
        }
        visitAnimateChild(t, e) {
          return e.depCount++, { type: 9, options: Wc(t.options) };
        }
        visitAnimateRef(t, e) {
          return { type: 10, animation: this.visitReference(t.animation, e), options: Wc(t.options) };
        }
        visitQuery(t, e) {
          const n = e.currentQuerySelector,
            s = t.options || {};
          e.queryCount++, (e.currentQuery = t);
          const [i, r] = (function(t) {
            const e = !!t.split(/\s*,\s*/).find(t => t == Bc);
            return (
              e && (t = t.replace(Vc, '')),
              [
                (t = t
                  .replace(/@\*/g, uc)
                  .replace(/@\w+/g, t => uc + '-' + t.substr(1))
                  .replace(/:animating/g, pc)),
                e
              ]
            );
          })(t.selector);
          (e.currentQuerySelector = n.length ? n + ' ' + i : i), ql(e.collectedStyles, e.currentQuerySelector, {});
          const o = Rc(this, xc(t.animation), e);
          return (
            (e.currentQuery = null),
            (e.currentQuerySelector = n),
            {
              type: 11,
              selector: i,
              limit: s.limit || 0,
              optional: !!s.optional,
              includeSelf: r,
              animation: o,
              originalSelector: t.selector,
              options: Wc(t.options)
            }
          );
        }
        visitStagger(t, e) {
          e.currentQuery || e.errors.push('stagger() can only be used inside of query()');
          const n = 'full' === t.timings ? { duration: 0, delay: 0, easing: 'full' } : gc(t.timings, e.errors, !0);
          return { type: 12, animation: Rc(this, xc(t.animation), e), timings: n, options: null };
        }
      }
      class $c {
        constructor(t) {
          (this.errors = t),
            (this.queryCount = 0),
            (this.depCount = 0),
            (this.currentTransition = null),
            (this.currentQuery = null),
            (this.currentQuerySelector = null),
            (this.currentAnimateTimings = null),
            (this.currentTime = 0),
            (this.collectedStyles = {}),
            (this.options = null);
        }
      }
      function qc(t) {
        return !Array.isArray(t) && 'object' == typeof t;
      }
      function Wc(t) {
        var e;
        return t ? (t = bc(t)).params && (t.params = (e = t.params) ? bc(e) : null) : (t = {}), t;
      }
      function Kc(t, e, n) {
        return { duration: t, delay: e, easing: n };
      }
      function Yc(t, e, n, s, i, r, o = null, a = !1) {
        return {
          type: 1,
          element: t,
          keyframes: e,
          preStyleProps: n,
          postStyleProps: s,
          duration: i,
          delay: r,
          totalTime: i + r,
          easing: o,
          subTimeline: a
        };
      }
      class Qc {
        constructor() {
          this._map = new Map();
        }
        consume(t) {
          let e = this._map.get(t);
          return e ? this._map.delete(t) : (e = []), e;
        }
        append(t, e) {
          let n = this._map.get(t);
          n || this._map.set(t, (n = [])), n.push(...e);
        }
        has(t) {
          return this._map.has(t);
        }
        clear() {
          this._map.clear();
        }
      }
      const Gc = 1,
        Zc = new RegExp(':enter', 'g'),
        Xc = new RegExp(':leave', 'g');
      function Jc(t, e, n, s, i, r = {}, o = {}, a, l, c = []) {
        return new th().buildKeyframes(t, e, n, s, i, r, o, a, l, c);
      }
      class th {
        buildKeyframes(t, e, n, s, i, r, o, a, l, c = []) {
          l = l || new Qc();
          const h = new nh(t, e, l, s, i, c, []);
          (h.options = a), h.currentTimeline.setStyles([r], null, h.errors, a), Rc(this, n, h);
          const u = h.timelines.filter(t => t.containsAnimation());
          if (u.length && Object.keys(o).length) {
            const t = u[u.length - 1];
            t.allowOnlyTimelineStyles() || t.setStyles([o], null, h.errors, a);
          }
          return u.length ? u.map(t => t.buildKeyframes()) : [Yc(e, [], [], [], 0, 0, '', !1)];
        }
        visitTrigger(t, e) {}
        visitState(t, e) {}
        visitTransition(t, e) {}
        visitAnimateChild(t, e) {
          const n = e.subInstructions.consume(e.element);
          if (n) {
            const s = e.createSubContext(t.options),
              i = e.currentTimeline.currentTime,
              r = this._visitSubInstructions(n, s, s.options);
            i != r && e.transformIntoNewTimeline(r);
          }
          e.previousNode = t;
        }
        visitAnimateRef(t, e) {
          const n = e.createSubContext(t.options);
          n.transformIntoNewTimeline(),
            this.visitReference(t.animation, n),
            e.transformIntoNewTimeline(n.currentTimeline.currentTime),
            (e.previousNode = t);
        }
        _visitSubInstructions(t, e, n) {
          let s = e.currentTimeline.currentTime;
          const i = null != n.duration ? mc(n.duration) : null,
            r = null != n.delay ? mc(n.delay) : null;
          return (
            0 !== i &&
              t.forEach(t => {
                const n = e.appendInstructionToTimeline(t, i, r);
                s = Math.max(s, n.duration + n.delay);
              }),
            s
          );
        }
        visitReference(t, e) {
          e.updateOptions(t.options, !0), Rc(this, t.animation, e), (e.previousNode = t);
        }
        visitSequence(t, e) {
          const n = e.subContextCount;
          let s = e;
          const i = t.options;
          if (i && (i.params || i.delay) && ((s = e.createSubContext(i)).transformIntoNewTimeline(), null != i.delay)) {
            6 == s.previousNode.type && (s.currentTimeline.snapshotCurrentStyles(), (s.previousNode = eh));
            const t = mc(i.delay);
            s.delayNextStep(t);
          }
          t.steps.length &&
            (t.steps.forEach(t => Rc(this, t, s)),
            s.currentTimeline.applyStylesToKeyframe(),
            s.subContextCount > n && s.transformIntoNewTimeline()),
            (e.previousNode = t);
        }
        visitGroup(t, e) {
          const n = [];
          let s = e.currentTimeline.currentTime;
          const i = t.options && t.options.delay ? mc(t.options.delay) : 0;
          t.steps.forEach(r => {
            const o = e.createSubContext(t.options);
            i && o.delayNextStep(i),
              Rc(this, r, o),
              (s = Math.max(s, o.currentTimeline.currentTime)),
              n.push(o.currentTimeline);
          }),
            n.forEach(t => e.currentTimeline.mergeTimelineCollectedStyles(t)),
            e.transformIntoNewTimeline(s),
            (e.previousNode = t);
        }
        _visitTiming(t, e) {
          if (t.dynamic) {
            const n = t.strValue;
            return gc(e.params ? kc(n, e.params, e.errors) : n, e.errors);
          }
          return { duration: t.duration, delay: t.delay, easing: t.easing };
        }
        visitAnimate(t, e) {
          const n = (e.currentAnimateTimings = this._visitTiming(t.timings, e)),
            s = e.currentTimeline;
          n.delay && (e.incrementTime(n.delay), s.snapshotCurrentStyles());
          const i = t.style;
          5 == i.type
            ? this.visitKeyframes(i, e)
            : (e.incrementTime(n.duration), this.visitStyle(i, e), s.applyStylesToKeyframe()),
            (e.currentAnimateTimings = null),
            (e.previousNode = t);
        }
        visitStyle(t, e) {
          const n = e.currentTimeline,
            s = e.currentAnimateTimings;
          !s && n.getCurrentStyleProperties().length && n.forwardFrame();
          const i = (s && s.easing) || t.easing;
          t.isEmptyStep ? n.applyEmptyStep(i) : n.setStyles(t.styles, i, e.errors, e.options), (e.previousNode = t);
        }
        visitKeyframes(t, e) {
          const n = e.currentAnimateTimings,
            s = e.currentTimeline.duration,
            i = n.duration,
            r = e.createSubContext().currentTimeline;
          (r.easing = n.easing),
            t.styles.forEach(t => {
              r.forwardTime((t.offset || 0) * i),
                r.setStyles(t.styles, t.easing, e.errors, e.options),
                r.applyStylesToKeyframe();
            }),
            e.currentTimeline.mergeTimelineCollectedStyles(r),
            e.transformIntoNewTimeline(s + i),
            (e.previousNode = t);
        }
        visitQuery(t, e) {
          const n = e.currentTimeline.currentTime,
            s = t.options || {},
            i = s.delay ? mc(s.delay) : 0;
          i &&
            (6 === e.previousNode.type || (0 == n && e.currentTimeline.getCurrentStyleProperties().length)) &&
            (e.currentTimeline.snapshotCurrentStyles(), (e.previousNode = eh));
          let r = n;
          const o = e.invokeQuery(t.selector, t.originalSelector, t.limit, t.includeSelf, !!s.optional, e.errors);
          e.currentQueryTotal = o.length;
          let a = null;
          o.forEach((n, s) => {
            e.currentQueryIndex = s;
            const o = e.createSubContext(t.options, n);
            i && o.delayNextStep(i),
              n === e.element && (a = o.currentTimeline),
              Rc(this, t.animation, o),
              o.currentTimeline.applyStylesToKeyframe(),
              (r = Math.max(r, o.currentTimeline.currentTime));
          }),
            (e.currentQueryIndex = 0),
            (e.currentQueryTotal = 0),
            e.transformIntoNewTimeline(r),
            a && (e.currentTimeline.mergeTimelineCollectedStyles(a), e.currentTimeline.snapshotCurrentStyles()),
            (e.previousNode = t);
        }
        visitStagger(t, e) {
          const n = e.parentContext,
            s = e.currentTimeline,
            i = t.timings,
            r = Math.abs(i.duration),
            o = r * (e.currentQueryTotal - 1);
          let a = r * e.currentQueryIndex;
          switch (i.duration < 0 ? 'reverse' : i.easing) {
            case 'reverse':
              a = o - a;
              break;
            case 'full':
              a = n.currentStaggerTime;
          }
          const l = e.currentTimeline;
          a && l.delayNextStep(a);
          const c = l.currentTime;
          Rc(this, t.animation, e),
            (e.previousNode = t),
            (n.currentStaggerTime = s.currentTime - c + (s.startTime - n.currentTimeline.startTime));
        }
      }
      const eh = {};
      class nh {
        constructor(t, e, n, s, i, r, o, a) {
          (this._driver = t),
            (this.element = e),
            (this.subInstructions = n),
            (this._enterClassName = s),
            (this._leaveClassName = i),
            (this.errors = r),
            (this.timelines = o),
            (this.parentContext = null),
            (this.currentAnimateTimings = null),
            (this.previousNode = eh),
            (this.subContextCount = 0),
            (this.options = {}),
            (this.currentQueryIndex = 0),
            (this.currentQueryTotal = 0),
            (this.currentStaggerTime = 0),
            (this.currentTimeline = a || new sh(this._driver, e, 0)),
            o.push(this.currentTimeline);
        }
        get params() {
          return this.options.params;
        }
        updateOptions(t, e) {
          if (!t) return;
          const n = t;
          let s = this.options;
          null != n.duration && (s.duration = mc(n.duration)), null != n.delay && (s.delay = mc(n.delay));
          const i = n.params;
          if (i) {
            let t = s.params;
            t || (t = this.options.params = {}),
              Object.keys(i).forEach(n => {
                (e && t.hasOwnProperty(n)) || (t[n] = kc(i[n], t, this.errors));
              });
          }
        }
        _copyOptions() {
          const t = {};
          if (this.options) {
            const e = this.options.params;
            if (e) {
              const n = (t.params = {});
              Object.keys(e).forEach(t => {
                n[t] = e[t];
              });
            }
          }
          return t;
        }
        createSubContext(t = null, e, n) {
          const s = e || this.element,
            i = new nh(
              this._driver,
              s,
              this.subInstructions,
              this._enterClassName,
              this._leaveClassName,
              this.errors,
              this.timelines,
              this.currentTimeline.fork(s, n || 0)
            );
          return (
            (i.previousNode = this.previousNode),
            (i.currentAnimateTimings = this.currentAnimateTimings),
            (i.options = this._copyOptions()),
            i.updateOptions(t),
            (i.currentQueryIndex = this.currentQueryIndex),
            (i.currentQueryTotal = this.currentQueryTotal),
            (i.parentContext = this),
            this.subContextCount++,
            i
          );
        }
        transformIntoNewTimeline(t) {
          return (
            (this.previousNode = eh),
            (this.currentTimeline = this.currentTimeline.fork(this.element, t)),
            this.timelines.push(this.currentTimeline),
            this.currentTimeline
          );
        }
        appendInstructionToTimeline(t, e, n) {
          const s = {
              duration: null != e ? e : t.duration,
              delay: this.currentTimeline.currentTime + (null != n ? n : 0) + t.delay,
              easing: ''
            },
            i = new ih(
              this._driver,
              t.element,
              t.keyframes,
              t.preStyleProps,
              t.postStyleProps,
              s,
              t.stretchStartingKeyframe
            );
          return this.timelines.push(i), s;
        }
        incrementTime(t) {
          this.currentTimeline.forwardTime(this.currentTimeline.duration + t);
        }
        delayNextStep(t) {
          t > 0 && this.currentTimeline.delayNextStep(t);
        }
        invokeQuery(t, e, n, s, i, r) {
          let o = [];
          if ((s && o.push(this.element), t.length > 0)) {
            t = (t = t.replace(Zc, '.' + this._enterClassName)).replace(Xc, '.' + this._leaveClassName);
            let e = this._driver.query(this.element, t, 1 != n);
            0 !== n && (e = n < 0 ? e.slice(e.length + n, e.length) : e.slice(0, n)), o.push(...e);
          }
          return (
            i ||
              0 != o.length ||
              r.push(
                `\`query("${e}")\` returned zero elements. (Use \`query("${e}", { optional: true })\` if you wish to allow this.)`
              ),
            o
          );
        }
      }
      class sh {
        constructor(t, e, n, s) {
          (this._driver = t),
            (this.element = e),
            (this.startTime = n),
            (this._elementTimelineStylesLookup = s),
            (this.duration = 0),
            (this._previousKeyframe = {}),
            (this._currentKeyframe = {}),
            (this._keyframes = new Map()),
            (this._styleSummary = {}),
            (this._pendingStyles = {}),
            (this._backFill = {}),
            (this._currentEmptyStepKeyframe = null),
            this._elementTimelineStylesLookup || (this._elementTimelineStylesLookup = new Map()),
            (this._localTimelineStyles = Object.create(this._backFill, {})),
            (this._globalTimelineStyles = this._elementTimelineStylesLookup.get(e)),
            this._globalTimelineStyles ||
              ((this._globalTimelineStyles = this._localTimelineStyles),
              this._elementTimelineStylesLookup.set(e, this._localTimelineStyles)),
            this._loadKeyframe();
        }
        containsAnimation() {
          switch (this._keyframes.size) {
            case 0:
              return !1;
            case 1:
              return this.getCurrentStyleProperties().length > 0;
            default:
              return !0;
          }
        }
        getCurrentStyleProperties() {
          return Object.keys(this._currentKeyframe);
        }
        get currentTime() {
          return this.startTime + this.duration;
        }
        delayNextStep(t) {
          const e = 1 == this._keyframes.size && Object.keys(this._pendingStyles).length;
          this.duration || e
            ? (this.forwardTime(this.currentTime + t), e && this.snapshotCurrentStyles())
            : (this.startTime += t);
        }
        fork(t, e) {
          return (
            this.applyStylesToKeyframe(),
            new sh(this._driver, t, e || this.currentTime, this._elementTimelineStylesLookup)
          );
        }
        _loadKeyframe() {
          this._currentKeyframe && (this._previousKeyframe = this._currentKeyframe),
            (this._currentKeyframe = this._keyframes.get(this.duration)),
            this._currentKeyframe ||
              ((this._currentKeyframe = Object.create(this._backFill, {})),
              this._keyframes.set(this.duration, this._currentKeyframe));
        }
        forwardFrame() {
          (this.duration += Gc), this._loadKeyframe();
        }
        forwardTime(t) {
          this.applyStylesToKeyframe(), (this.duration = t), this._loadKeyframe();
        }
        _updateStyle(t, e) {
          (this._localTimelineStyles[t] = e),
            (this._globalTimelineStyles[t] = e),
            (this._styleSummary[t] = { time: this.currentTime, value: e });
        }
        allowOnlyTimelineStyles() {
          return this._currentEmptyStepKeyframe !== this._currentKeyframe;
        }
        applyEmptyStep(t) {
          t && (this._previousKeyframe.easing = t),
            Object.keys(this._globalTimelineStyles).forEach(t => {
              (this._backFill[t] = this._globalTimelineStyles[t] || Wi), (this._currentKeyframe[t] = Wi);
            }),
            (this._currentEmptyStepKeyframe = this._currentKeyframe);
        }
        setStyles(t, e, n, s) {
          e && (this._previousKeyframe.easing = e);
          const i = (s && s.params) || {},
            r = (function(t, e) {
              const n = {};
              let s;
              return (
                t.forEach(t => {
                  '*' === t
                    ? (s = s || Object.keys(e)).forEach(t => {
                        n[t] = Wi;
                      })
                    : _c(t, !1, n);
                }),
                n
              );
            })(t, this._globalTimelineStyles);
          Object.keys(r).forEach(t => {
            const e = kc(r[t], i, n);
            (this._pendingStyles[t] = e),
              this._localTimelineStyles.hasOwnProperty(t) ||
                (this._backFill[t] = this._globalTimelineStyles.hasOwnProperty(t) ? this._globalTimelineStyles[t] : Wi),
              this._updateStyle(t, e);
          });
        }
        applyStylesToKeyframe() {
          const t = this._pendingStyles,
            e = Object.keys(t);
          0 != e.length &&
            ((this._pendingStyles = {}),
            e.forEach(e => {
              this._currentKeyframe[e] = t[e];
            }),
            Object.keys(this._localTimelineStyles).forEach(t => {
              this._currentKeyframe.hasOwnProperty(t) || (this._currentKeyframe[t] = this._localTimelineStyles[t]);
            }));
        }
        snapshotCurrentStyles() {
          Object.keys(this._localTimelineStyles).forEach(t => {
            const e = this._localTimelineStyles[t];
            (this._pendingStyles[t] = e), this._updateStyle(t, e);
          });
        }
        getFinalKeyframe() {
          return this._keyframes.get(this.duration);
        }
        get properties() {
          const t = [];
          for (let e in this._currentKeyframe) t.push(e);
          return t;
        }
        mergeTimelineCollectedStyles(t) {
          Object.keys(t._styleSummary).forEach(e => {
            const n = this._styleSummary[e],
              s = t._styleSummary[e];
            (!n || s.time > n.time) && this._updateStyle(e, s.value);
          });
        }
        buildKeyframes() {
          this.applyStylesToKeyframe();
          const t = new Set(),
            e = new Set(),
            n = 1 === this._keyframes.size && 0 === this.duration;
          let s = [];
          this._keyframes.forEach((i, r) => {
            const o = _c(i, !0);
            Object.keys(o).forEach(n => {
              const s = o[n];
              s == Xi ? t.add(n) : s == Wi && e.add(n);
            }),
              n || (o.offset = r / this.duration),
              s.push(o);
          });
          const i = t.size ? Dc(t.values()) : [],
            r = e.size ? Dc(e.values()) : [];
          if (n) {
            const t = s[0],
              e = bc(t);
            (t.offset = 0), (e.offset = 1), (s = [t, e]);
          }
          return Yc(this.element, s, i, r, this.duration, this.startTime, this.easing, !1);
        }
      }
      class ih extends sh {
        constructor(t, e, n, s, i, r, o = !1) {
          super(t, e, r.delay),
            (this.element = e),
            (this.keyframes = n),
            (this.preStyleProps = s),
            (this.postStyleProps = i),
            (this._stretchStartingKeyframe = o),
            (this.timings = { duration: r.duration, delay: r.delay, easing: r.easing });
        }
        containsAnimation() {
          return this.keyframes.length > 1;
        }
        buildKeyframes() {
          let t = this.keyframes,
            { delay: e, duration: n, easing: s } = this.timings;
          if (this._stretchStartingKeyframe && e) {
            const i = [],
              r = n + e,
              o = e / r,
              a = _c(t[0], !1);
            (a.offset = 0), i.push(a);
            const l = _c(t[0], !1);
            (l.offset = rh(o)), i.push(l);
            const c = t.length - 1;
            for (let s = 1; s <= c; s++) {
              let o = _c(t[s], !1);
              (o.offset = rh((e + o.offset * n) / r)), i.push(o);
            }
            (n = r), (e = 0), (s = ''), (t = i);
          }
          return Yc(this.element, t, this.preStyleProps, this.postStyleProps, n, e, s, !0);
        }
      }
      function rh(t, e = 3) {
        const n = Math.pow(10, e - 1);
        return Math.round(t * n) / n;
      }
      class oh {}
      class ah extends oh {
        normalizePropertyName(t, e) {
          return Tc(t);
        }
        normalizeStyleValue(t, e, n, s) {
          let i = '';
          const r = n.toString().trim();
          if (lh[e] && 0 !== n && '0' !== n)
            if ('number' == typeof n) i = 'px';
            else {
              const e = n.match(/^[+-]?[\d\.]+([a-z]*)$/);
              e && 0 == e[1].length && s.push(`Please provide a CSS unit value for ${t}:${n}`);
            }
          return r + i;
        }
      }
      const lh = (() =>
        (function(t) {
          const e = {};
          return t.forEach(t => (e[t] = !0)), e;
        })(
          'width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'.split(
            ','
          )
        ))();
      function ch(t, e, n, s, i, r, o, a, l, c, h, u, d) {
        return {
          type: 0,
          element: t,
          triggerName: e,
          isRemovalTransition: i,
          fromState: n,
          fromStyles: r,
          toState: s,
          toStyles: o,
          timelines: a,
          queriedElements: l,
          preStyleProps: c,
          postStyleProps: h,
          totalTime: u,
          errors: d
        };
      }
      const hh = {};
      class uh {
        constructor(t, e, n) {
          (this._triggerName = t), (this.ast = e), (this._stateStyles = n);
        }
        match(t, e, n, s) {
          return (function(t, e, n, s, i) {
            return t.some(t => t(e, n, s, i));
          })(this.ast.matchers, t, e, n, s);
        }
        buildStyles(t, e, n) {
          const s = this._stateStyles['*'],
            i = this._stateStyles[t],
            r = s ? s.buildStyles(e, n) : {};
          return i ? i.buildStyles(e, n) : r;
        }
        build(t, e, n, s, i, r, o, a, l, c) {
          const h = [],
            u = (this.ast.options && this.ast.options.params) || hh,
            d = this.buildStyles(n, (o && o.params) || hh, h),
            p = (a && a.params) || hh,
            m = this.buildStyles(s, p, h),
            f = new Set(),
            g = new Map(),
            b = new Map(),
            _ = 'void' === s,
            y = { params: Object.assign({}, u, p) },
            v = c ? [] : Jc(t, e, this.ast.animation, i, r, d, m, y, l, h);
          let w = 0;
          if (
            (v.forEach(t => {
              w = Math.max(t.duration + t.delay, w);
            }),
            h.length)
          )
            return ch(e, this._triggerName, n, s, _, d, m, [], [], g, b, w, h);
          v.forEach(t => {
            const n = t.element,
              s = ql(g, n, {});
            t.preStyleProps.forEach(t => (s[t] = !0));
            const i = ql(b, n, {});
            t.postStyleProps.forEach(t => (i[t] = !0)), n !== e && f.add(n);
          });
          const C = Dc(f.values());
          return ch(e, this._triggerName, n, s, _, d, m, v, C, g, b, w);
        }
      }
      class dh {
        constructor(t, e) {
          (this.styles = t), (this.defaultParams = e);
        }
        buildStyles(t, e) {
          const n = {},
            s = bc(this.defaultParams);
          return (
            Object.keys(t).forEach(e => {
              const n = t[e];
              null != n && (s[e] = n);
            }),
            this.styles.styles.forEach(t => {
              if ('string' != typeof t) {
                const i = t;
                Object.keys(i).forEach(t => {
                  let r = i[t];
                  r.length > 1 && (r = kc(r, s, e)), (n[t] = r);
                });
              }
            }),
            n
          );
        }
      }
      class ph {
        constructor(t, e) {
          (this.name = t),
            (this.ast = e),
            (this.transitionFactories = []),
            (this.states = {}),
            e.states.forEach(t => {
              this.states[t.name] = new dh(t.style, (t.options && t.options.params) || {});
            }),
            mh(this.states, 'true', '1'),
            mh(this.states, 'false', '0'),
            e.transitions.forEach(e => {
              this.transitionFactories.push(new uh(t, e, this.states));
            }),
            (this.fallbackTransition = new uh(
              t,
              {
                type: 1,
                animation: { type: 2, steps: [], options: null },
                matchers: [(t, e) => !0],
                options: null,
                queryCount: 0,
                depCount: 0
              },
              this.states
            ));
        }
        get containsQueries() {
          return this.ast.queryCount > 0;
        }
        matchTransition(t, e, n, s) {
          return this.transitionFactories.find(i => i.match(t, e, n, s)) || null;
        }
        matchStyles(t, e, n) {
          return this.fallbackTransition.buildStyles(t, e, n);
        }
      }
      function mh(t, e, n) {
        t.hasOwnProperty(e) ? t.hasOwnProperty(n) || (t[n] = t[e]) : t.hasOwnProperty(n) && (t[e] = t[n]);
      }
      const fh = new Qc();
      class gh {
        constructor(t, e, n) {
          (this.bodyNode = t),
            (this._driver = e),
            (this._normalizer = n),
            (this._animations = {}),
            (this._playersById = {}),
            (this.players = []);
        }
        register(t, e) {
          const n = [],
            s = Uc(this._driver, e, n);
          if (n.length) throw new Error(`Unable to build the animation due to the following errors: ${n.join('\n')}`);
          this._animations[t] = s;
        }
        _buildPlayer(t, e, n) {
          const s = t.element,
            i = Ul(0, this._normalizer, 0, t.keyframes, e, n);
          return this._driver.animate(s, i, t.duration, t.delay, t.easing, [], !0);
        }
        create(t, e, n = {}) {
          const s = [],
            i = this._animations[t];
          let r;
          const o = new Map();
          if (
            (i
              ? (r = Jc(this._driver, e, i, lc, cc, {}, {}, n, fh, s)).forEach(t => {
                  const e = ql(o, t.element, {});
                  t.postStyleProps.forEach(t => (e[t] = null));
                })
              : (s.push("The requested animation doesn't exist or has already been destroyed"), (r = [])),
            s.length)
          )
            throw new Error(`Unable to create the animation due to the following errors: ${s.join('\n')}`);
          o.forEach((t, e) => {
            Object.keys(t).forEach(n => {
              t[n] = this._driver.computeStyle(e, n, Wi);
            });
          });
          const a = Vl(
            r.map(t => {
              const e = o.get(t.element);
              return this._buildPlayer(t, {}, e);
            })
          );
          return (this._playersById[t] = a), a.onDestroy(() => this.destroy(t)), this.players.push(a), a;
        }
        destroy(t) {
          const e = this._getPlayer(t);
          e.destroy(), delete this._playersById[t];
          const n = this.players.indexOf(e);
          n >= 0 && this.players.splice(n, 1);
        }
        _getPlayer(t) {
          const e = this._playersById[t];
          if (!e) throw new Error(`Unable to find the timeline player referenced by ${t}`);
          return e;
        }
        listen(t, e, n, s) {
          const i = $l(e, '', '', '');
          return Hl(this._getPlayer(t), n, i, s), () => {};
        }
        command(t, e, n, s) {
          if ('register' == n) return void this.register(t, s[0]);
          if ('create' == n) return void this.create(t, e, s[0] || {});
          const i = this._getPlayer(t);
          switch (n) {
            case 'play':
              i.play();
              break;
            case 'pause':
              i.pause();
              break;
            case 'reset':
              i.reset();
              break;
            case 'restart':
              i.restart();
              break;
            case 'finish':
              i.finish();
              break;
            case 'init':
              i.init();
              break;
            case 'setPosition':
              i.setPosition(parseFloat(s[0]));
              break;
            case 'destroy':
              this.destroy(t);
          }
        }
      }
      const bh = 'ng-animate-queued',
        _h = '.ng-animate-queued',
        yh = 'ng-animate-disabled',
        vh = '.ng-animate-disabled',
        wh = 'ng-star-inserted',
        Ch = '.ng-star-inserted',
        xh = [],
        Eh = { namespaceId: '', setForRemoval: !1, setForMove: !1, hasAnimation: !1, removedBeforeQueried: !1 },
        Sh = { namespaceId: '', setForMove: !1, setForRemoval: !1, hasAnimation: !1, removedBeforeQueried: !0 },
        kh = '__ng_removed';
      class Dh {
        constructor(t, e = '') {
          this.namespaceId = e;
          const n = t && t.hasOwnProperty('value');
          if (
            ((this.value = (function(t) {
              return null != t ? t : null;
            })(n ? t.value : t)),
            n)
          ) {
            const e = bc(t);
            delete e.value, (this.options = e);
          } else this.options = {};
          this.options.params || (this.options.params = {});
        }
        get params() {
          return this.options.params;
        }
        absorbOptions(t) {
          const e = t.params;
          if (e) {
            const t = this.options.params;
            Object.keys(e).forEach(n => {
              null == t[n] && (t[n] = e[n]);
            });
          }
        }
      }
      const Ah = 'void',
        Th = new Dh(Ah);
      class Oh {
        constructor(t, e, n) {
          (this.id = t),
            (this.hostElement = e),
            (this._engine = n),
            (this.players = []),
            (this._triggers = {}),
            (this._queue = []),
            (this._elementListeners = new Map()),
            (this._hostClassName = 'ng-tns-' + t),
            Fh(e, this._hostClassName);
        }
        listen(t, e, n, s) {
          if (!this._triggers.hasOwnProperty(e))
            throw new Error(
              `Unable to listen on the animation trigger event "${n}" because the animation trigger "${e}" doesn't exist!`
            );
          if (null == n || 0 == n.length)
            throw new Error(
              `Unable to listen on the animation trigger "${e}" because the provided event is undefined!`
            );
          if ('start' != (i = n) && 'done' != i)
            throw new Error(
              `The provided animation trigger event "${n}" for the animation trigger "${e}" is not supported!`
            );
          var i;
          const r = ql(this._elementListeners, t, []),
            o = { name: e, phase: n, callback: s };
          r.push(o);
          const a = ql(this._engine.statesByElement, t, {});
          return (
            a.hasOwnProperty(e) || (Fh(t, hc), Fh(t, hc + '-' + e), (a[e] = Th)),
            () => {
              this._engine.afterFlush(() => {
                const t = r.indexOf(o);
                t >= 0 && r.splice(t, 1), this._triggers[e] || delete a[e];
              });
            }
          );
        }
        register(t, e) {
          return !this._triggers[t] && ((this._triggers[t] = e), !0);
        }
        _getTrigger(t) {
          const e = this._triggers[t];
          if (!e) throw new Error(`The provided animation trigger "${t}" has not been registered!`);
          return e;
        }
        trigger(t, e, n, s = !0) {
          const i = this._getTrigger(e),
            r = new Rh(this.id, e, t);
          let o = this._engine.statesByElement.get(t);
          o || (Fh(t, hc), Fh(t, hc + '-' + e), this._engine.statesByElement.set(t, (o = {})));
          let a = o[e];
          const l = new Dh(n, this.id);
          if (
            (!(n && n.hasOwnProperty('value')) && a && l.absorbOptions(a.options),
            (o[e] = l),
            a || (a = Th),
            l.value !== Ah && a.value === l.value)
          ) {
            if (
              !(function(t, e) {
                const n = Object.keys(t),
                  s = Object.keys(e);
                if (n.length != s.length) return !1;
                for (let i = 0; i < n.length; i++) {
                  const s = n[i];
                  if (!e.hasOwnProperty(s) || t[s] !== e[s]) return !1;
                }
                return !0;
              })(a.params, l.params)
            ) {
              const e = [],
                n = i.matchStyles(a.value, a.params, e),
                s = i.matchStyles(l.value, l.params, e);
              e.length
                ? this._engine.reportError(e)
                : this._engine.afterFlush(() => {
                    Cc(t, n), wc(t, s);
                  });
            }
            return;
          }
          const c = ql(this._engine.playersByElement, t, []);
          c.forEach(t => {
            t.namespaceId == this.id && t.triggerName == e && t.queued && t.destroy();
          });
          let h = i.matchTransition(a.value, l.value, t, l.params),
            u = !1;
          if (!h) {
            if (!s) return;
            (h = i.fallbackTransition), (u = !0);
          }
          return (
            this._engine.totalQueuedPlayers++,
            this._queue.push({
              element: t,
              triggerName: e,
              transition: h,
              fromState: a,
              toState: l,
              player: r,
              isFallbackTransition: u
            }),
            u ||
              (Fh(t, bh),
              r.onStart(() => {
                Bh(t, bh);
              })),
            r.onDone(() => {
              let e = this.players.indexOf(r);
              e >= 0 && this.players.splice(e, 1);
              const n = this._engine.playersByElement.get(t);
              if (n) {
                let t = n.indexOf(r);
                t >= 0 && n.splice(t, 1);
              }
            }),
            this.players.push(r),
            c.push(r),
            r
          );
        }
        deregister(t) {
          delete this._triggers[t],
            this._engine.statesByElement.forEach((e, n) => {
              delete e[t];
            }),
            this._elementListeners.forEach((e, n) => {
              this._elementListeners.set(n, e.filter(e => e.name != t));
            });
        }
        clearElementCache(t) {
          this._engine.statesByElement.delete(t), this._elementListeners.delete(t);
          const e = this._engine.playersByElement.get(t);
          e && (e.forEach(t => t.destroy()), this._engine.playersByElement.delete(t));
        }
        _signalRemovalForInnerTriggers(t, e, n = !1) {
          this._engine.driver.query(t, uc, !0).forEach(t => {
            if (t[kh]) return;
            const n = this._engine.fetchNamespacesByElement(t);
            n.size ? n.forEach(n => n.triggerLeaveAnimation(t, e, !1, !0)) : this.clearElementCache(t);
          });
        }
        triggerLeaveAnimation(t, e, n, s) {
          const i = this._engine.statesByElement.get(t);
          if (i) {
            const r = [];
            if (
              (Object.keys(i).forEach(e => {
                if (this._triggers[e]) {
                  const n = this.trigger(t, e, Ah, s);
                  n && r.push(n);
                }
              }),
              r.length)
            )
              return (
                this._engine.markElementAsRemoved(this.id, t, !0, e),
                n && Vl(r).onDone(() => this._engine.processLeaveNode(t)),
                !0
              );
          }
          return !1;
        }
        prepareLeaveAnimationListeners(t) {
          const e = this._elementListeners.get(t);
          if (e) {
            const n = new Set();
            e.forEach(e => {
              const s = e.name;
              if (n.has(s)) return;
              n.add(s);
              const i = this._triggers[s].fallbackTransition,
                r = this._engine.statesByElement.get(t)[s] || Th,
                o = new Dh(Ah),
                a = new Rh(this.id, s, t);
              this._engine.totalQueuedPlayers++,
                this._queue.push({
                  element: t,
                  triggerName: s,
                  transition: i,
                  fromState: r,
                  toState: o,
                  player: a,
                  isFallbackTransition: !0
                });
            });
          }
        }
        removeNode(t, e) {
          const n = this._engine;
          if (
            (t.childElementCount && this._signalRemovalForInnerTriggers(t, e, !0), this.triggerLeaveAnimation(t, e, !0))
          )
            return;
          let s = !1;
          if (n.totalAnimations) {
            const e = n.players.length ? n.playersByQueriedElement.get(t) : [];
            if (e && e.length) s = !0;
            else {
              let e = t;
              for (; (e = e.parentNode); )
                if (n.statesByElement.get(e)) {
                  s = !0;
                  break;
                }
            }
          }
          this.prepareLeaveAnimationListeners(t),
            s
              ? n.markElementAsRemoved(this.id, t, !1, e)
              : (n.afterFlush(() => this.clearElementCache(t)),
                n.destroyInnerAnimations(t),
                n._onRemovalComplete(t, e));
        }
        insertNode(t, e) {
          Fh(t, this._hostClassName);
        }
        drainQueuedTransitions(t) {
          const e = [];
          return (
            this._queue.forEach(n => {
              const s = n.player;
              if (s.destroyed) return;
              const i = n.element,
                r = this._elementListeners.get(i);
              r &&
                r.forEach(e => {
                  if (e.name == n.triggerName) {
                    const s = $l(i, n.triggerName, n.fromState.value, n.toState.value);
                    (s._data = t), Hl(n.player, e.phase, s, e.callback);
                  }
                }),
                s.markedForDestroy
                  ? this._engine.afterFlush(() => {
                      s.destroy();
                    })
                  : e.push(n);
            }),
            (this._queue = []),
            e.sort((t, e) => {
              const n = t.transition.ast.depCount,
                s = e.transition.ast.depCount;
              return 0 == n || 0 == s ? n - s : this._engine.driver.containsElement(t.element, e.element) ? 1 : -1;
            })
          );
        }
        destroy(t) {
          this.players.forEach(t => t.destroy()), this._signalRemovalForInnerTriggers(this.hostElement, t);
        }
        elementContainsData(t) {
          let e = !1;
          return this._elementListeners.has(t) && (e = !0), !!this._queue.find(e => e.element === t) || e;
        }
      }
      class Ih {
        constructor(t, e, n) {
          (this.bodyNode = t),
            (this.driver = e),
            (this._normalizer = n),
            (this.players = []),
            (this.newHostElements = new Map()),
            (this.playersByElement = new Map()),
            (this.playersByQueriedElement = new Map()),
            (this.statesByElement = new Map()),
            (this.disabledNodes = new Set()),
            (this.totalAnimations = 0),
            (this.totalQueuedPlayers = 0),
            (this._namespaceLookup = {}),
            (this._namespaceList = []),
            (this._flushFns = []),
            (this._whenQuietFns = []),
            (this.namespacesByHostElement = new Map()),
            (this.collectedEnterElements = []),
            (this.collectedLeaveElements = []),
            (this.onRemovalComplete = (t, e) => {});
        }
        _onRemovalComplete(t, e) {
          this.onRemovalComplete(t, e);
        }
        get queuedPlayers() {
          const t = [];
          return (
            this._namespaceList.forEach(e => {
              e.players.forEach(e => {
                e.queued && t.push(e);
              });
            }),
            t
          );
        }
        createNamespace(t, e) {
          const n = new Oh(t, e, this);
          return (
            e.parentNode
              ? this._balanceNamespaceList(n, e)
              : (this.newHostElements.set(e, n), this.collectEnterElement(e)),
            (this._namespaceLookup[t] = n)
          );
        }
        _balanceNamespaceList(t, e) {
          const n = this._namespaceList.length - 1;
          if (n >= 0) {
            let s = !1;
            for (let i = n; i >= 0; i--)
              if (this.driver.containsElement(this._namespaceList[i].hostElement, e)) {
                this._namespaceList.splice(i + 1, 0, t), (s = !0);
                break;
              }
            s || this._namespaceList.splice(0, 0, t);
          } else this._namespaceList.push(t);
          return this.namespacesByHostElement.set(e, t), t;
        }
        register(t, e) {
          let n = this._namespaceLookup[t];
          return n || (n = this.createNamespace(t, e)), n;
        }
        registerTrigger(t, e, n) {
          let s = this._namespaceLookup[t];
          s && s.register(e, n) && this.totalAnimations++;
        }
        destroy(t, e) {
          if (!t) return;
          const n = this._fetchNamespace(t);
          this.afterFlush(() => {
            this.namespacesByHostElement.delete(n.hostElement), delete this._namespaceLookup[t];
            const e = this._namespaceList.indexOf(n);
            e >= 0 && this._namespaceList.splice(e, 1);
          }),
            this.afterFlushAnimationsDone(() => n.destroy(e));
        }
        _fetchNamespace(t) {
          return this._namespaceLookup[t];
        }
        fetchNamespacesByElement(t) {
          const e = new Set(),
            n = this.statesByElement.get(t);
          if (n) {
            const t = Object.keys(n);
            for (let s = 0; s < t.length; s++) {
              const i = n[t[s]].namespaceId;
              if (i) {
                const t = this._fetchNamespace(i);
                t && e.add(t);
              }
            }
          }
          return e;
        }
        trigger(t, e, n, s) {
          if (Ph(e)) {
            const i = this._fetchNamespace(t);
            if (i) return i.trigger(e, n, s), !0;
          }
          return !1;
        }
        insertNode(t, e, n, s) {
          if (!Ph(e)) return;
          const i = e[kh];
          if (i && i.setForRemoval) {
            (i.setForRemoval = !1), (i.setForMove = !0);
            const t = this.collectedLeaveElements.indexOf(e);
            t >= 0 && this.collectedLeaveElements.splice(t, 1);
          }
          if (t) {
            const s = this._fetchNamespace(t);
            s && s.insertNode(e, n);
          }
          s && this.collectEnterElement(e);
        }
        collectEnterElement(t) {
          this.collectedEnterElements.push(t);
        }
        markElementAsDisabled(t, e) {
          e
            ? this.disabledNodes.has(t) || (this.disabledNodes.add(t), Fh(t, yh))
            : this.disabledNodes.has(t) && (this.disabledNodes.delete(t), Bh(t, yh));
        }
        removeNode(t, e, n, s) {
          if (Ph(e)) {
            const i = t ? this._fetchNamespace(t) : null;
            if ((i ? i.removeNode(e, s) : this.markElementAsRemoved(t, e, !1, s), n)) {
              const n = this.namespacesByHostElement.get(e);
              n && n.id !== t && n.removeNode(e, s);
            }
          } else this._onRemovalComplete(e, s);
        }
        markElementAsRemoved(t, e, n, s) {
          this.collectedLeaveElements.push(e),
            (e[kh] = { namespaceId: t, setForRemoval: s, hasAnimation: n, removedBeforeQueried: !1 });
        }
        listen(t, e, n, s, i) {
          return Ph(e) ? this._fetchNamespace(t).listen(e, n, s, i) : () => {};
        }
        _buildInstruction(t, e, n, s, i) {
          return t.transition.build(
            this.driver,
            t.element,
            t.fromState.value,
            t.toState.value,
            n,
            s,
            t.fromState.options,
            t.toState.options,
            e,
            i
          );
        }
        destroyInnerAnimations(t) {
          let e = this.driver.query(t, uc, !0);
          e.forEach(t => this.destroyActiveAnimationsForElement(t)),
            0 != this.playersByQueriedElement.size &&
              (e = this.driver.query(t, pc, !0)).forEach(t => this.finishActiveQueriedAnimationOnElement(t));
        }
        destroyActiveAnimationsForElement(t) {
          const e = this.playersByElement.get(t);
          e &&
            e.forEach(t => {
              t.queued ? (t.markedForDestroy = !0) : t.destroy();
            });
        }
        finishActiveQueriedAnimationOnElement(t) {
          const e = this.playersByQueriedElement.get(t);
          e && e.forEach(t => t.finish());
        }
        whenRenderingDone() {
          return new Promise(t => {
            if (this.players.length) return Vl(this.players).onDone(() => t());
            t();
          });
        }
        processLeaveNode(t) {
          const e = t[kh];
          if (e && e.setForRemoval) {
            if (((t[kh] = Eh), e.namespaceId)) {
              this.destroyInnerAnimations(t);
              const n = this._fetchNamespace(e.namespaceId);
              n && n.clearElementCache(t);
            }
            this._onRemovalComplete(t, e.setForRemoval);
          }
          this.driver.matchesElement(t, vh) && this.markElementAsDisabled(t, !1),
            this.driver.query(t, vh, !0).forEach(t => {
              this.markElementAsDisabled(t, !1);
            });
        }
        flush(t = -1) {
          let e = [];
          if (
            (this.newHostElements.size &&
              (this.newHostElements.forEach((t, e) => this._balanceNamespaceList(t, e)), this.newHostElements.clear()),
            this.totalAnimations && this.collectedEnterElements.length)
          )
            for (let n = 0; n < this.collectedEnterElements.length; n++) Fh(this.collectedEnterElements[n], wh);
          if (this._namespaceList.length && (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
            const n = [];
            try {
              e = this._flushAnimations(n, t);
            } finally {
              for (let t = 0; t < n.length; t++) n[t]();
            }
          } else
            for (let n = 0; n < this.collectedLeaveElements.length; n++)
              this.processLeaveNode(this.collectedLeaveElements[n]);
          if (
            ((this.totalQueuedPlayers = 0),
            (this.collectedEnterElements.length = 0),
            (this.collectedLeaveElements.length = 0),
            this._flushFns.forEach(t => t()),
            (this._flushFns = []),
            this._whenQuietFns.length)
          ) {
            const t = this._whenQuietFns;
            (this._whenQuietFns = []),
              e.length
                ? Vl(e).onDone(() => {
                    t.forEach(t => t());
                  })
                : t.forEach(t => t());
          }
        }
        reportError(t) {
          throw new Error(
            `Unable to process animations due to the following failed trigger transitions\n ${t.join('\n')}`
          );
        }
        _flushAnimations(t, e) {
          const n = new Qc(),
            s = [],
            i = new Map(),
            r = [],
            o = new Map(),
            a = new Map(),
            l = new Map(),
            c = new Set();
          this.disabledNodes.forEach(t => {
            c.add(t);
            const e = this.driver.query(t, _h, !0);
            for (let n = 0; n < e.length; n++) c.add(e[n]);
          });
          const h = this.bodyNode,
            u = Array.from(this.statesByElement.keys()),
            d = Lh(u, this.collectedEnterElements),
            p = new Map();
          let m = 0;
          d.forEach((t, e) => {
            const n = lc + m++;
            p.set(e, n), t.forEach(t => Fh(t, n));
          });
          const f = [],
            g = new Set(),
            b = new Set();
          for (let O = 0; O < this.collectedLeaveElements.length; O++) {
            const t = this.collectedLeaveElements[O],
              e = t[kh];
            e &&
              e.setForRemoval &&
              (f.push(t), g.add(t), e.hasAnimation ? this.driver.query(t, Ch, !0).forEach(t => g.add(t)) : b.add(t));
          }
          const _ = new Map(),
            y = Lh(u, Array.from(g));
          y.forEach((t, e) => {
            const n = cc + m++;
            _.set(e, n), t.forEach(t => Fh(t, n));
          }),
            t.push(() => {
              d.forEach((t, e) => {
                const n = p.get(e);
                t.forEach(t => Bh(t, n));
              }),
                y.forEach((t, e) => {
                  const n = _.get(e);
                  t.forEach(t => Bh(t, n));
                }),
                f.forEach(t => {
                  this.processLeaveNode(t);
                });
            });
          const v = [],
            w = [];
          for (let O = this._namespaceList.length - 1; O >= 0; O--)
            this._namespaceList[O].drainQueuedTransitions(e).forEach(t => {
              const e = t.player,
                i = t.element;
              if ((v.push(e), this.collectedEnterElements.length)) {
                const t = i[kh];
                if (t && t.setForMove) return void e.destroy();
              }
              const c = !h || !this.driver.containsElement(h, i),
                u = _.get(i),
                d = p.get(i),
                m = this._buildInstruction(t, n, d, u, c);
              if (!m.errors || !m.errors.length)
                return c
                  ? (e.onStart(() => Cc(i, m.fromStyles)), e.onDestroy(() => wc(i, m.toStyles)), void s.push(e))
                  : t.isFallbackTransition
                  ? (e.onStart(() => Cc(i, m.fromStyles)), e.onDestroy(() => wc(i, m.toStyles)), void s.push(e))
                  : (m.timelines.forEach(t => (t.stretchStartingKeyframe = !0)),
                    n.append(i, m.timelines),
                    r.push({ instruction: m, player: e, element: i }),
                    m.queriedElements.forEach(t => ql(o, t, []).push(e)),
                    m.preStyleProps.forEach((t, e) => {
                      const n = Object.keys(t);
                      if (n.length) {
                        let t = a.get(e);
                        t || a.set(e, (t = new Set())), n.forEach(e => t.add(e));
                      }
                    }),
                    void m.postStyleProps.forEach((t, e) => {
                      const n = Object.keys(t);
                      let s = l.get(e);
                      s || l.set(e, (s = new Set())), n.forEach(t => s.add(t));
                    }));
              w.push(m);
            });
          if (w.length) {
            const t = [];
            w.forEach(e => {
              t.push(`@${e.triggerName} has failed due to:\n`), e.errors.forEach(e => t.push(`- ${e}\n`));
            }),
              v.forEach(t => t.destroy()),
              this.reportError(t);
          }
          const C = new Map(),
            x = new Map();
          r.forEach(t => {
            const e = t.element;
            n.has(e) && (x.set(e, e), this._beforeAnimationBuild(t.player.namespaceId, t.instruction, C));
          }),
            s.forEach(t => {
              const e = t.element;
              this._getPreviousPlayers(e, !1, t.namespaceId, t.triggerName, null).forEach(t => {
                ql(C, e, []).push(t), t.destroy();
              });
            });
          const E = f.filter(t => Uh(t, a, l)),
            S = new Map();
          Mh(S, this.driver, b, l, Wi).forEach(t => {
            Uh(t, a, l) && E.push(t);
          });
          const k = new Map();
          d.forEach((t, e) => {
            Mh(k, this.driver, new Set(t), a, Xi);
          }),
            E.forEach(t => {
              const e = S.get(t),
                n = k.get(t);
              S.set(t, Object.assign({}, e, n));
            });
          const D = [],
            A = [],
            T = {};
          r.forEach(t => {
            const { element: e, player: r, instruction: o } = t;
            if (n.has(e)) {
              if (c.has(e))
                return (
                  r.onDestroy(() => wc(e, o.toStyles)),
                  (r.disabled = !0),
                  r.overrideTotalTime(o.totalTime),
                  void s.push(r)
                );
              let t = T;
              if (x.size > 1) {
                let n = e;
                const s = [];
                for (; (n = n.parentNode); ) {
                  const e = x.get(n);
                  if (e) {
                    t = e;
                    break;
                  }
                  s.push(n);
                }
                s.forEach(e => x.set(e, t));
              }
              const n = this._buildAnimation(r.namespaceId, o, C, i, k, S);
              if ((r.setRealPlayer(n), t === T)) D.push(r);
              else {
                const e = this.playersByElement.get(t);
                e && e.length && (r.parentPlayer = Vl(e)), s.push(r);
              }
            } else Cc(e, o.fromStyles), r.onDestroy(() => wc(e, o.toStyles)), A.push(r), c.has(e) && s.push(r);
          }),
            A.forEach(t => {
              const e = i.get(t.element);
              if (e && e.length) {
                const n = Vl(e);
                t.setRealPlayer(n);
              }
            }),
            s.forEach(t => {
              t.parentPlayer ? t.syncPlayerEvents(t.parentPlayer) : t.destroy();
            });
          for (let O = 0; O < f.length; O++) {
            const t = f[O],
              e = t[kh];
            if ((Bh(t, cc), e && e.hasAnimation)) continue;
            let n = [];
            if (o.size) {
              let e = o.get(t);
              e && e.length && n.push(...e);
              let s = this.driver.query(t, pc, !0);
              for (let t = 0; t < s.length; t++) {
                let e = o.get(s[t]);
                e && e.length && n.push(...e);
              }
            }
            const s = n.filter(t => !t.destroyed);
            s.length ? Vh(this, t, s) : this.processLeaveNode(t);
          }
          return (
            (f.length = 0),
            D.forEach(t => {
              this.players.push(t),
                t.onDone(() => {
                  t.destroy();
                  const e = this.players.indexOf(t);
                  this.players.splice(e, 1);
                }),
                t.play();
            }),
            D
          );
        }
        elementContainsData(t, e) {
          let n = !1;
          const s = e[kh];
          return (
            s && s.setForRemoval && (n = !0),
            this.playersByElement.has(e) && (n = !0),
            this.playersByQueriedElement.has(e) && (n = !0),
            this.statesByElement.has(e) && (n = !0),
            this._fetchNamespace(t).elementContainsData(e) || n
          );
        }
        afterFlush(t) {
          this._flushFns.push(t);
        }
        afterFlushAnimationsDone(t) {
          this._whenQuietFns.push(t);
        }
        _getPreviousPlayers(t, e, n, s, i) {
          let r = [];
          if (e) {
            const e = this.playersByQueriedElement.get(t);
            e && (r = e);
          } else {
            const e = this.playersByElement.get(t);
            if (e) {
              const t = !i || i == Ah;
              e.forEach(e => {
                e.queued || ((t || e.triggerName == s) && r.push(e));
              });
            }
          }
          return (n || s) && (r = r.filter(t => !((n && n != t.namespaceId) || (s && s != t.triggerName)))), r;
        }
        _beforeAnimationBuild(t, e, n) {
          const s = e.element,
            i = e.isRemovalTransition ? void 0 : t,
            r = e.isRemovalTransition ? void 0 : e.triggerName;
          for (const o of e.timelines) {
            const t = o.element,
              a = t !== s,
              l = ql(n, t, []);
            this._getPreviousPlayers(t, a, i, r, e.toState).forEach(t => {
              const e = t.getRealPlayer();
              e.beforeDestroy && e.beforeDestroy(), t.destroy(), l.push(t);
            });
          }
          Cc(s, e.fromStyles);
        }
        _buildAnimation(t, e, n, s, i, r) {
          const o = e.triggerName,
            a = e.element,
            l = [],
            c = new Set(),
            h = new Set(),
            u = e.timelines.map(e => {
              const u = e.element;
              c.add(u);
              const d = u[kh];
              if (d && d.removedBeforeQueried) return new Gi(e.duration, e.delay);
              const p = u !== a,
                m = (function(t) {
                  const e = [];
                  return (
                    (function t(e, n) {
                      for (let s = 0; s < e.length; s++) {
                        const i = e[s];
                        i instanceof Zi ? t(i.players, n) : n.push(i);
                      }
                    })((n.get(u) || xh).map(t => t.getRealPlayer()), e),
                    e
                  );
                })().filter(t => !!t.element && t.element === u),
                f = i.get(u),
                g = r.get(u),
                b = Ul(0, this._normalizer, 0, e.keyframes, f, g),
                _ = this._buildPlayer(e, b, m);
              if ((e.subTimeline && s && h.add(u), p)) {
                const e = new Rh(t, o, u);
                e.setRealPlayer(_), l.push(e);
              }
              return _;
            });
          l.forEach(t => {
            ql(this.playersByQueriedElement, t.element, []).push(t),
              t.onDone(() =>
                (function(t, e, n) {
                  let s;
                  if (t instanceof Map) {
                    if ((s = t.get(e))) {
                      if (s.length) {
                        const t = s.indexOf(n);
                        s.splice(t, 1);
                      }
                      0 == s.length && t.delete(e);
                    }
                  } else if ((s = t[e])) {
                    if (s.length) {
                      const t = s.indexOf(n);
                      s.splice(t, 1);
                    }
                    0 == s.length && delete t[e];
                  }
                  return s;
                })(this.playersByQueriedElement, t.element, t)
              );
          }),
            c.forEach(t => Fh(t, dc));
          const d = Vl(u);
          return (
            d.onDestroy(() => {
              c.forEach(t => Bh(t, dc)), wc(a, e.toStyles);
            }),
            h.forEach(t => {
              ql(s, t, []).push(d);
            }),
            d
          );
        }
        _buildPlayer(t, e, n) {
          return e.length > 0
            ? this.driver.animate(t.element, e, t.duration, t.delay, t.easing, n)
            : new Gi(t.duration, t.delay);
        }
      }
      class Rh {
        constructor(t, e, n) {
          (this.namespaceId = t),
            (this.triggerName = e),
            (this.element = n),
            (this._player = new Gi()),
            (this._containsRealPlayer = !1),
            (this._queuedCallbacks = {}),
            (this.destroyed = !1),
            (this.markedForDestroy = !1),
            (this.disabled = !1),
            (this.queued = !0),
            (this.totalTime = 0);
        }
        setRealPlayer(t) {
          this._containsRealPlayer ||
            ((this._player = t),
            Object.keys(this._queuedCallbacks).forEach(e => {
              this._queuedCallbacks[e].forEach(n => Hl(t, e, void 0, n));
            }),
            (this._queuedCallbacks = {}),
            (this._containsRealPlayer = !0),
            this.overrideTotalTime(t.totalTime),
            (this.queued = !1));
        }
        getRealPlayer() {
          return this._player;
        }
        overrideTotalTime(t) {
          this.totalTime = t;
        }
        syncPlayerEvents(t) {
          const e = this._player;
          e.triggerCallback && t.onStart(() => e.triggerCallback('start')),
            t.onDone(() => this.finish()),
            t.onDestroy(() => this.destroy());
        }
        _queueEvent(t, e) {
          ql(this._queuedCallbacks, t, []).push(e);
        }
        onDone(t) {
          this.queued && this._queueEvent('done', t), this._player.onDone(t);
        }
        onStart(t) {
          this.queued && this._queueEvent('start', t), this._player.onStart(t);
        }
        onDestroy(t) {
          this.queued && this._queueEvent('destroy', t), this._player.onDestroy(t);
        }
        init() {
          this._player.init();
        }
        hasStarted() {
          return !this.queued && this._player.hasStarted();
        }
        play() {
          !this.queued && this._player.play();
        }
        pause() {
          !this.queued && this._player.pause();
        }
        restart() {
          !this.queued && this._player.restart();
        }
        finish() {
          this._player.finish();
        }
        destroy() {
          (this.destroyed = !0), this._player.destroy();
        }
        reset() {
          !this.queued && this._player.reset();
        }
        setPosition(t) {
          this.queued || this._player.setPosition(t);
        }
        getPosition() {
          return this.queued ? 0 : this._player.getPosition();
        }
        triggerCallback(t) {
          const e = this._player;
          e.triggerCallback && e.triggerCallback(t);
        }
      }
      function Ph(t) {
        return t && 1 === t.nodeType;
      }
      function Nh(t, e) {
        const n = t.style.display;
        return (t.style.display = null != e ? e : 'none'), n;
      }
      function Mh(t, e, n, s, i) {
        const r = [];
        n.forEach(t => r.push(Nh(t)));
        const o = [];
        s.forEach((n, s) => {
          const r = {};
          n.forEach(t => {
            const n = (r[t] = e.computeStyle(s, t, i));
            (n && 0 != n.length) || ((s[kh] = Sh), o.push(s));
          }),
            t.set(s, r);
        });
        let a = 0;
        return n.forEach(t => Nh(t, r[a++])), o;
      }
      function Lh(t, e) {
        const n = new Map();
        if ((t.forEach(t => n.set(t, [])), 0 == e.length)) return n;
        const s = new Set(e),
          i = new Map();
        return (
          e.forEach(t => {
            const e = (function t(e) {
              if (!e) return 1;
              let r = i.get(e);
              if (r) return r;
              const o = e.parentNode;
              return (r = n.has(o) ? o : s.has(o) ? 1 : t(o)), i.set(e, r), r;
            })(t);
            1 !== e && n.get(e).push(t);
          }),
          n
        );
      }
      const jh = '$$classes';
      function Fh(t, e) {
        if (t.classList) t.classList.add(e);
        else {
          let n = t[jh];
          n || (n = t[jh] = {}), (n[e] = !0);
        }
      }
      function Bh(t, e) {
        if (t.classList) t.classList.remove(e);
        else {
          let n = t[jh];
          n && delete n[e];
        }
      }
      function Vh(t, e, n) {
        Vl(n).onDone(() => t.processLeaveNode(e));
      }
      function Uh(t, e, n) {
        const s = n.get(t);
        if (!s) return !1;
        let i = e.get(t);
        return i ? s.forEach(t => i.add(t)) : e.set(t, s), n.delete(t), !0;
      }
      class Hh {
        constructor(t, e, n) {
          (this.bodyNode = t),
            (this._driver = e),
            (this._triggerCache = {}),
            (this.onRemovalComplete = (t, e) => {}),
            (this._transitionEngine = new Ih(t, e, n)),
            (this._timelineEngine = new gh(t, e, n)),
            (this._transitionEngine.onRemovalComplete = (t, e) => this.onRemovalComplete(t, e));
        }
        registerTrigger(t, e, n, s, i) {
          const r = t + '-' + s;
          let o = this._triggerCache[r];
          if (!o) {
            const t = [],
              e = Uc(this._driver, i, t);
            if (t.length)
              throw new Error(
                `The animation trigger "${s}" has failed to build due to the following errors:\n - ${t.join('\n - ')}`
              );
            (o = (function(t, e) {
              return new ph(t, e);
            })(s, e)),
              (this._triggerCache[r] = o);
          }
          this._transitionEngine.registerTrigger(e, s, o);
        }
        register(t, e) {
          this._transitionEngine.register(t, e);
        }
        destroy(t, e) {
          this._transitionEngine.destroy(t, e);
        }
        onInsert(t, e, n, s) {
          this._transitionEngine.insertNode(t, e, n, s);
        }
        onRemove(t, e, n, s) {
          this._transitionEngine.removeNode(t, e, s || !1, n);
        }
        disableAnimations(t, e) {
          this._transitionEngine.markElementAsDisabled(t, e);
        }
        process(t, e, n, s) {
          if ('@' == n.charAt(0)) {
            const [t, i] = Wl(n);
            this._timelineEngine.command(t, e, i, s);
          } else this._transitionEngine.trigger(t, e, n, s);
        }
        listen(t, e, n, s, i) {
          if ('@' == n.charAt(0)) {
            const [t, s] = Wl(n);
            return this._timelineEngine.listen(t, e, s, i);
          }
          return this._transitionEngine.listen(t, e, n, s, i);
        }
        flush(t = -1) {
          this._transitionEngine.flush(t);
        }
        get players() {
          return this._transitionEngine.players.concat(this._timelineEngine.players);
        }
        whenRenderingDone() {
          return this._transitionEngine.whenRenderingDone();
        }
      }
      function zh(t, e) {
        let n = null,
          s = null;
        return (
          Array.isArray(e) && e.length ? ((n = qh(e[0])), e.length > 1 && (s = qh(e[e.length - 1]))) : e && (n = qh(e)),
          n || s ? new $h(t, n, s) : null
        );
      }
      let $h = (() => {
        class t {
          constructor(e, n, s) {
            (this._element = e), (this._startStyles = n), (this._endStyles = s), (this._state = 0);
            let i = t.initialStylesByElement.get(e);
            i || t.initialStylesByElement.set(e, (i = {})), (this._initialStyles = i);
          }
          start() {
            this._state < 1 &&
              (this._startStyles && wc(this._element, this._startStyles, this._initialStyles), (this._state = 1));
          }
          finish() {
            this.start(),
              this._state < 2 &&
                (wc(this._element, this._initialStyles),
                this._endStyles && (wc(this._element, this._endStyles), (this._endStyles = null)),
                (this._state = 1));
          }
          destroy() {
            this.finish(),
              this._state < 3 &&
                (t.initialStylesByElement.delete(this._element),
                this._startStyles && (Cc(this._element, this._startStyles), (this._endStyles = null)),
                this._endStyles && (Cc(this._element, this._endStyles), (this._endStyles = null)),
                wc(this._element, this._initialStyles),
                (this._state = 3));
          }
        }
        return (t.initialStylesByElement = new WeakMap()), t;
      })();
      function qh(t) {
        let e = null;
        const n = Object.keys(t);
        for (let s = 0; s < n.length; s++) {
          const i = n[s];
          Wh(i) && ((e = e || {})[i] = t[i]);
        }
        return e;
      }
      function Wh(t) {
        return 'display' === t || 'position' === t;
      }
      const Kh = 3,
        Yh = 'animation',
        Qh = 'animationend',
        Gh = 1e3;
      class Zh {
        constructor(t, e, n, s, i, r, o) {
          (this._element = t),
            (this._name = e),
            (this._duration = n),
            (this._delay = s),
            (this._easing = i),
            (this._fillMode = r),
            (this._onDoneFn = o),
            (this._finished = !1),
            (this._destroyed = !1),
            (this._startTime = 0),
            (this._position = 0),
            (this._eventFn = t => this._handleCallback(t));
        }
        apply() {
          !(function(t, e) {
            const n = su(t, '').trim();
            n.length &&
              ((function(t, e) {
                let n = 0;
                for (let s = 0; s < t.length; s++) ',' === t.charAt(s) && n++;
              })(n),
              (e = `${n}, ${e}`)),
              nu(t, '', e);
          })(
            this._element,
            `${this._duration}ms ${this._easing} ${this._delay}ms 1 normal ${this._fillMode} ${this._name}`
          ),
            eu(this._element, this._eventFn, !1),
            (this._startTime = Date.now());
        }
        pause() {
          Xh(this._element, this._name, 'paused');
        }
        resume() {
          Xh(this._element, this._name, 'running');
        }
        setPosition(t) {
          const e = Jh(this._element, this._name);
          (this._position = t * this._duration), nu(this._element, 'Delay', `-${this._position}ms`, e);
        }
        getPosition() {
          return this._position;
        }
        _handleCallback(t) {
          const e = t._ngTestManualTimestamp || Date.now(),
            n = parseFloat(t.elapsedTime.toFixed(Kh)) * Gh;
          t.animationName == this._name &&
            Math.max(e - this._startTime, 0) >= this._delay &&
            n >= this._duration &&
            this.finish();
        }
        finish() {
          this._finished || ((this._finished = !0), this._onDoneFn(), eu(this._element, this._eventFn, !0));
        }
        destroy() {
          this._destroyed ||
            ((this._destroyed = !0),
            this.finish(),
            (function(t, e) {
              const n = su(t, '').split(','),
                s = tu(n, e);
              s >= 0 && (n.splice(s, 1), nu(t, '', n.join(',')));
            })(this._element, this._name));
        }
      }
      function Xh(t, e, n) {
        nu(t, 'PlayState', n, Jh(t, e));
      }
      function Jh(t, e) {
        const n = su(t, '');
        return n.indexOf(',') > 0 ? tu(n.split(','), e) : tu([n], e);
      }
      function tu(t, e) {
        for (let n = 0; n < t.length; n++) if (t[n].indexOf(e) >= 0) return n;
        return -1;
      }
      function eu(t, e, n) {
        n ? t.removeEventListener(Qh, e) : t.addEventListener(Qh, e);
      }
      function nu(t, e, n, s) {
        const i = Yh + e;
        if (null != s) {
          const e = t.style[i];
          if (e.length) {
            const t = e.split(',');
            (t[s] = n), (n = t.join(','));
          }
        }
        t.style[i] = n;
      }
      function su(t, e) {
        return t.style[Yh + e];
      }
      const iu = 'forwards',
        ru = 'linear';
      class ou {
        constructor(t, e, n, s, i, r, o, a) {
          (this.element = t),
            (this.keyframes = e),
            (this.animationName = n),
            (this._duration = s),
            (this._delay = i),
            (this._finalStyles = o),
            (this._specialStyles = a),
            (this._onDoneFns = []),
            (this._onStartFns = []),
            (this._onDestroyFns = []),
            (this._started = !1),
            (this.currentSnapshot = {}),
            (this._state = 0),
            (this.easing = r || ru),
            (this.totalTime = s + i),
            this._buildStyler();
        }
        onStart(t) {
          this._onStartFns.push(t);
        }
        onDone(t) {
          this._onDoneFns.push(t);
        }
        onDestroy(t) {
          this._onDestroyFns.push(t);
        }
        destroy() {
          this.init(),
            this._state >= 4 ||
              ((this._state = 4),
              this._styler.destroy(),
              this._flushStartFns(),
              this._flushDoneFns(),
              this._specialStyles && this._specialStyles.destroy(),
              this._onDestroyFns.forEach(t => t()),
              (this._onDestroyFns = []));
        }
        _flushDoneFns() {
          this._onDoneFns.forEach(t => t()), (this._onDoneFns = []);
        }
        _flushStartFns() {
          this._onStartFns.forEach(t => t()), (this._onStartFns = []);
        }
        finish() {
          this.init(),
            this._state >= 3 ||
              ((this._state = 3),
              this._styler.finish(),
              this._flushStartFns(),
              this._specialStyles && this._specialStyles.finish(),
              this._flushDoneFns());
        }
        setPosition(t) {
          this._styler.setPosition(t);
        }
        getPosition() {
          return this._styler.getPosition();
        }
        hasStarted() {
          return this._state >= 2;
        }
        init() {
          this._state >= 1 || ((this._state = 1), this._styler.apply(), this._delay && this._styler.pause());
        }
        play() {
          this.init(),
            this.hasStarted() ||
              (this._flushStartFns(), (this._state = 2), this._specialStyles && this._specialStyles.start()),
            this._styler.resume();
        }
        pause() {
          this.init(), this._styler.pause();
        }
        restart() {
          this.reset(), this.play();
        }
        reset() {
          this._styler.destroy(), this._buildStyler(), this._styler.apply();
        }
        _buildStyler() {
          this._styler = new Zh(this.element, this.animationName, this._duration, this._delay, this.easing, iu, () =>
            this.finish()
          );
        }
        triggerCallback(t) {
          const e = 'start' == t ? this._onStartFns : this._onDoneFns;
          e.forEach(t => t()), (e.length = 0);
        }
        beforeDestroy() {
          this.init();
          const t = {};
          if (this.hasStarted()) {
            const e = this._state >= 3;
            Object.keys(this._finalStyles).forEach(n => {
              'offset' != n && (t[n] = e ? this._finalStyles[n] : Pc(this.element, n));
            });
          }
          this.currentSnapshot = t;
        }
      }
      class au extends Gi {
        constructor(t, e) {
          super(), (this.element = t), (this._startingStyles = {}), (this.__initialized = !1), (this._styles = sc(e));
        }
        init() {
          !this.__initialized &&
            this._startingStyles &&
            ((this.__initialized = !0),
            Object.keys(this._styles).forEach(t => {
              this._startingStyles[t] = this.element.style[t];
            }),
            super.init());
        }
        play() {
          this._startingStyles &&
            (this.init(),
            Object.keys(this._styles).forEach(t => this.element.style.setProperty(t, this._styles[t])),
            super.play());
        }
        destroy() {
          this._startingStyles &&
            (Object.keys(this._startingStyles).forEach(t => {
              const e = this._startingStyles[t];
              e ? this.element.style.setProperty(t, e) : this.element.style.removeProperty(t);
            }),
            (this._startingStyles = null),
            super.destroy());
        }
      }
      const lu = 'gen_css_kf_',
        cu = ' ';
      class hu {
        constructor() {
          (this._count = 0), (this._head = document.querySelector('head')), (this._warningIssued = !1);
        }
        validateStyleProperty(t) {
          return Jl(t);
        }
        matchesElement(t, e) {
          return tc(t, e);
        }
        containsElement(t, e) {
          return ec(t, e);
        }
        query(t, e, n) {
          return nc(t, e, n);
        }
        computeStyle(t, e, n) {
          return window.getComputedStyle(t)[e];
        }
        buildKeyframeElement(t, e, n) {
          n = n.map(t => sc(t));
          let s = `@keyframes ${e} {\n`,
            i = '';
          n.forEach(t => {
            i = cu;
            const e = parseFloat(t.offset);
            (s += `${i}${100 * e}% {\n`),
              (i += cu),
              Object.keys(t).forEach(e => {
                const n = t[e];
                switch (e) {
                  case 'offset':
                    return;
                  case 'easing':
                    return void (n && (s += `${i}animation-timing-function: ${n};\n`));
                  default:
                    return void (s += `${i}${e}: ${n};\n`);
                }
              }),
              (s += `${i}}\n`);
          }),
            (s += '}\n');
          const r = document.createElement('style');
          return (r.innerHTML = s), r;
        }
        animate(t, e, n, s, i, r = [], o) {
          o && this._notifyFaultyScrubber();
          const a = r.filter(t => t instanceof ou),
            l = {};
          Oc(n, s) &&
            a.forEach(t => {
              let e = t.currentSnapshot;
              Object.keys(e).forEach(t => (l[t] = e[t]));
            });
          const c = (function(t) {
            let e = {};
            return (
              t &&
                (Array.isArray(t) ? t : [t]).forEach(t => {
                  Object.keys(t).forEach(n => {
                    'offset' != n && 'easing' != n && (e[n] = t[n]);
                  });
                }),
              e
            );
          })((e = Ic(t, e, l)));
          if (0 == n) return new au(t, c);
          const h = `${lu}${this._count++}`,
            u = this.buildKeyframeElement(t, h, e);
          document.querySelector('head').appendChild(u);
          const d = zh(t, e),
            p = new ou(t, e, h, n, s, i, c, d);
          return (
            p.onDestroy(() =>
              (function(t) {
                u.parentNode.removeChild(u);
              })()
            ),
            p
          );
        }
        _notifyFaultyScrubber() {
          this._warningIssued ||
            (console.warn(
              '@angular/animations: please load the web-animations.js polyfill to allow programmatic access...\n',
              '  visit http://bit.ly/IWukam to learn more about using the web-animation-js polyfill.'
            ),
            (this._warningIssued = !0));
        }
      }
      class uu {
        constructor(t, e, n, s) {
          (this.element = t),
            (this.keyframes = e),
            (this.options = n),
            (this._specialStyles = s),
            (this._onDoneFns = []),
            (this._onStartFns = []),
            (this._onDestroyFns = []),
            (this._initialized = !1),
            (this._finished = !1),
            (this._started = !1),
            (this._destroyed = !1),
            (this.time = 0),
            (this.parentPlayer = null),
            (this.currentSnapshot = {}),
            (this._duration = n.duration),
            (this._delay = n.delay || 0),
            (this.time = this._duration + this._delay);
        }
        _onFinish() {
          this._finished || ((this._finished = !0), this._onDoneFns.forEach(t => t()), (this._onDoneFns = []));
        }
        init() {
          this._buildPlayer(), this._preparePlayerBeforeStart();
        }
        _buildPlayer() {
          if (this._initialized) return;
          this._initialized = !0;
          const t = this.keyframes;
          (this.domPlayer = this._triggerWebAnimation(this.element, t, this.options)),
            (this._finalKeyframe = t.length ? t[t.length - 1] : {}),
            this.domPlayer.addEventListener('finish', () => this._onFinish());
        }
        _preparePlayerBeforeStart() {
          this._delay ? this._resetDomPlayerState() : this.domPlayer.pause();
        }
        _triggerWebAnimation(t, e, n) {
          return t.animate(e, n);
        }
        onStart(t) {
          this._onStartFns.push(t);
        }
        onDone(t) {
          this._onDoneFns.push(t);
        }
        onDestroy(t) {
          this._onDestroyFns.push(t);
        }
        play() {
          this._buildPlayer(),
            this.hasStarted() ||
              (this._onStartFns.forEach(t => t()),
              (this._onStartFns = []),
              (this._started = !0),
              this._specialStyles && this._specialStyles.start()),
            this.domPlayer.play();
        }
        pause() {
          this.init(), this.domPlayer.pause();
        }
        finish() {
          this.init(), this._specialStyles && this._specialStyles.finish(), this._onFinish(), this.domPlayer.finish();
        }
        reset() {
          this._resetDomPlayerState(), (this._destroyed = !1), (this._finished = !1), (this._started = !1);
        }
        _resetDomPlayerState() {
          this.domPlayer && this.domPlayer.cancel();
        }
        restart() {
          this.reset(), this.play();
        }
        hasStarted() {
          return this._started;
        }
        destroy() {
          this._destroyed ||
            ((this._destroyed = !0),
            this._resetDomPlayerState(),
            this._onFinish(),
            this._specialStyles && this._specialStyles.destroy(),
            this._onDestroyFns.forEach(t => t()),
            (this._onDestroyFns = []));
        }
        setPosition(t) {
          this.domPlayer.currentTime = t * this.time;
        }
        getPosition() {
          return this.domPlayer.currentTime / this.time;
        }
        get totalTime() {
          return this._delay + this._duration;
        }
        beforeDestroy() {
          const t = {};
          this.hasStarted() &&
            Object.keys(this._finalKeyframe).forEach(e => {
              'offset' != e && (t[e] = this._finished ? this._finalKeyframe[e] : Pc(this.element, e));
            }),
            (this.currentSnapshot = t);
        }
        triggerCallback(t) {
          const e = 'start' == t ? this._onStartFns : this._onDoneFns;
          e.forEach(t => t()), (e.length = 0);
        }
      }
      class du {
        constructor() {
          (this._isNativeImpl = /\{\s*\[native\s+code\]\s*\}/.test(pu().toString())),
            (this._cssKeyframesDriver = new hu());
        }
        validateStyleProperty(t) {
          return Jl(t);
        }
        matchesElement(t, e) {
          return tc(t, e);
        }
        containsElement(t, e) {
          return ec(t, e);
        }
        query(t, e, n) {
          return nc(t, e, n);
        }
        computeStyle(t, e, n) {
          return window.getComputedStyle(t)[e];
        }
        overrideWebAnimationsSupport(t) {
          this._isNativeImpl = t;
        }
        animate(t, e, n, s, i, r = [], o) {
          if (!o && !this._isNativeImpl) return this._cssKeyframesDriver.animate(t, e, n, s, i, r);
          const a = { duration: n, delay: s, fill: 0 == s ? 'both' : 'forwards' };
          i && (a.easing = i);
          const l = {},
            c = r.filter(t => t instanceof uu);
          Oc(n, s) &&
            c.forEach(t => {
              let e = t.currentSnapshot;
              Object.keys(e).forEach(t => (l[t] = e[t]));
            });
          const h = zh(t, (e = Ic(t, (e = e.map(t => _c(t, !1))), l)));
          return new uu(t, e, a, h);
        }
      }
      function pu() {
        return ('undefined' != typeof window && void 0 !== window.document && Element.prototype.animate) || {};
      }
      let mu = (() =>
        class extends $i {
          constructor(t, e) {
            super(),
              (this._nextAnimationId = 0),
              (this._renderer = t.createRenderer(e.body, {
                id: '0',
                encapsulation: s.P.None,
                styles: [],
                data: { animation: [] }
              }));
          }
          build(t) {
            const e = this._nextAnimationId.toString();
            this._nextAnimationId++;
            const n = Array.isArray(t) ? Ki(t) : t;
            return bu(this._renderer, null, e, 'register', [n]), new fu(e, this._renderer);
          }
        })();
      class fu extends qi {
        constructor(t, e) {
          super(), (this._id = t), (this._renderer = e);
        }
        create(t, e) {
          return new gu(this._id, t, e || {}, this._renderer);
        }
      }
      class gu {
        constructor(t, e, n, s) {
          (this.id = t),
            (this.element = e),
            (this._renderer = s),
            (this.parentPlayer = null),
            (this._started = !1),
            (this.totalTime = 0),
            this._command('create', n);
        }
        _listen(t, e) {
          return this._renderer.listen(this.element, `@@${this.id}:${t}`, e);
        }
        _command(t, ...e) {
          return bu(this._renderer, this.element, this.id, t, e);
        }
        onDone(t) {
          this._listen('done', t);
        }
        onStart(t) {
          this._listen('start', t);
        }
        onDestroy(t) {
          this._listen('destroy', t);
        }
        init() {
          this._command('init');
        }
        hasStarted() {
          return this._started;
        }
        play() {
          this._command('play'), (this._started = !0);
        }
        pause() {
          this._command('pause');
        }
        restart() {
          this._command('restart');
        }
        finish() {
          this._command('finish');
        }
        destroy() {
          this._command('destroy');
        }
        reset() {
          this._command('reset');
        }
        setPosition(t) {
          this._command('setPosition', t);
        }
        getPosition() {
          return 0;
        }
      }
      function bu(t, e, n, s, i) {
        return t.setProperty(e, `@@${n}:${s}`, i);
      }
      const _u = '@',
        yu = '@.disabled';
      let vu = (() =>
        class {
          constructor(t, e, n) {
            (this.delegate = t),
              (this.engine = e),
              (this._zone = n),
              (this._currentId = 0),
              (this._microtaskId = 1),
              (this._animationCallbacksBuffer = []),
              (this._rendererCache = new Map()),
              (this._cdRecurDepth = 0),
              (this.promise = Promise.resolve(0)),
              (e.onRemovalComplete = (t, e) => {
                e && e.parentNode(t) && e.removeChild(t.parentNode, t);
              });
          }
          createRenderer(t, e) {
            const n = this.delegate.createRenderer(t, e);
            if (!(t && e && e.data && e.data.animation)) {
              let t = this._rendererCache.get(n);
              return t || ((t = new wu('', n, this.engine)), this._rendererCache.set(n, t)), t;
            }
            const s = e.id,
              i = e.id + '-' + this._currentId;
            return (
              this._currentId++,
              this.engine.register(i, t),
              e.data.animation.forEach(e => this.engine.registerTrigger(s, i, t, e.name, e)),
              new Cu(this, i, n, this.engine)
            );
          }
          begin() {
            this._cdRecurDepth++, this.delegate.begin && this.delegate.begin();
          }
          _scheduleCountTask() {
            this.promise.then(() => {
              this._microtaskId++;
            });
          }
          scheduleListenerCallback(t, e, n) {
            t >= 0 && t < this._microtaskId
              ? this._zone.run(() => e(n))
              : (0 == this._animationCallbacksBuffer.length &&
                  Promise.resolve(null).then(() => {
                    this._zone.run(() => {
                      this._animationCallbacksBuffer.forEach(t => {
                        const [e, n] = t;
                        e(n);
                      }),
                        (this._animationCallbacksBuffer = []);
                    });
                  }),
                this._animationCallbacksBuffer.push([e, n]));
          }
          end() {
            this._cdRecurDepth--,
              0 == this._cdRecurDepth &&
                this._zone.runOutsideAngular(() => {
                  this._scheduleCountTask(), this.engine.flush(this._microtaskId);
                }),
              this.delegate.end && this.delegate.end();
          }
          whenRenderingDone() {
            return this.engine.whenRenderingDone();
          }
        })();
      class wu {
        constructor(t, e, n) {
          (this.namespaceId = t),
            (this.delegate = e),
            (this.engine = n),
            (this.destroyNode = this.delegate.destroyNode ? t => e.destroyNode(t) : null);
        }
        get data() {
          return this.delegate.data;
        }
        destroy() {
          this.engine.destroy(this.namespaceId, this.delegate), this.delegate.destroy();
        }
        createElement(t, e) {
          return this.delegate.createElement(t, e);
        }
        createComment(t) {
          return this.delegate.createComment(t);
        }
        createText(t) {
          return this.delegate.createText(t);
        }
        appendChild(t, e) {
          this.delegate.appendChild(t, e), this.engine.onInsert(this.namespaceId, e, t, !1);
        }
        insertBefore(t, e, n) {
          this.delegate.insertBefore(t, e, n), this.engine.onInsert(this.namespaceId, e, t, !0);
        }
        removeChild(t, e, n) {
          this.engine.onRemove(this.namespaceId, e, this.delegate, n);
        }
        selectRootElement(t, e) {
          return this.delegate.selectRootElement(t, e);
        }
        parentNode(t) {
          return this.delegate.parentNode(t);
        }
        nextSibling(t) {
          return this.delegate.nextSibling(t);
        }
        setAttribute(t, e, n, s) {
          this.delegate.setAttribute(t, e, n, s);
        }
        removeAttribute(t, e, n) {
          this.delegate.removeAttribute(t, e, n);
        }
        addClass(t, e) {
          this.delegate.addClass(t, e);
        }
        removeClass(t, e) {
          this.delegate.removeClass(t, e);
        }
        setStyle(t, e, n, s) {
          this.delegate.setStyle(t, e, n, s);
        }
        removeStyle(t, e, n) {
          this.delegate.removeStyle(t, e, n);
        }
        setProperty(t, e, n) {
          e.charAt(0) == _u && e == yu ? this.disableAnimations(t, !!n) : this.delegate.setProperty(t, e, n);
        }
        setValue(t, e) {
          this.delegate.setValue(t, e);
        }
        listen(t, e, n) {
          return this.delegate.listen(t, e, n);
        }
        disableAnimations(t, e) {
          this.engine.disableAnimations(t, e);
        }
      }
      class Cu extends wu {
        constructor(t, e, n, s) {
          super(e, n, s), (this.factory = t), (this.namespaceId = e);
        }
        setProperty(t, e, n) {
          e.charAt(0) == _u
            ? '.' == e.charAt(1) && e == yu
              ? this.disableAnimations(t, (n = void 0 === n || !!n))
              : this.engine.process(this.namespaceId, t, e.substr(1), n)
            : this.delegate.setProperty(t, e, n);
        }
        listen(t, e, n) {
          if (e.charAt(0) == _u) {
            const s = (function(t) {
              switch (t) {
                case 'body':
                  return document.body;
                case 'document':
                  return document;
                case 'window':
                  return window;
                default:
                  return t;
              }
            })(t);
            let i = e.substr(1),
              r = '';
            return (
              i.charAt(0) != _u &&
                ([i, r] = (function(t) {
                  const e = t.indexOf('.');
                  return [t.substring(0, e), t.substr(e + 1)];
                })(i)),
              this.engine.listen(this.namespaceId, s, i, r, t => {
                this.factory.scheduleListenerCallback(t._data || -1, n, t);
              })
            );
          }
          return this.delegate.listen(t, e, n);
        }
      }
      let xu = (() =>
        class extends Hh {
          constructor(t, e, n) {
            super(t.body, e, n);
          }
        })();
      function Eu() {
        return 'function' == typeof pu() ? new du() : new hu();
      }
      function Su() {
        return new ah();
      }
      function ku(t, e, n) {
        return new vu(t, e, n);
      }
      const Du = new s.p('AnimationModuleType');
      let Au = (() => class {})();
      var Tu = s.qb({
        encapsulation: 2,
        styles: [
          '.mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media (hover:none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-focus-overlay,.mat-stroked-button .mat-button-ripple.mat-ripple{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple.mat-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}@media (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:#fff}}@media (-ms-high-contrast:black-on-white){.mat-button-focus-overlay{background-color:#000}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}'
        ],
        data: {}
      });
      function Ou(t) {
        return s.Kb(
          2,
          [
            s.Gb(671088640, 1, { ripple: 0 }),
            (t()(), s.sb(1, 0, null, null, 1, 'span', [['class', 'mat-button-wrapper']], null, null, null, null, null)),
            s.Cb(null, 0),
            (t()(),
            s.sb(
              3,
              0,
              null,
              null,
              1,
              'div',
              [['class', 'mat-button-ripple mat-ripple'], ['matRipple', '']],
              [[2, 'mat-button-ripple-round', null], [2, 'mat-ripple-unbounded', null]],
              null,
              null,
              null,
              null
            )),
            s.rb(
              4,
              212992,
              [[1, 4]],
              0,
              Za,
              [s.k, s.y, Zr, [2, Ga], [2, Du]],
              { centered: [0, 'centered'], disabled: [1, 'disabled'], trigger: [2, 'trigger'] },
              null
            ),
            (t()(),
            s.sb(5, 0, null, null, 0, 'div', [['class', 'mat-button-focus-overlay']], null, null, null, null, null))
          ],
          function(t, e) {
            var n = e.component;
            t(e, 4, 0, n.isIconButton, n._isRippleDisabled(), n._getHostElement());
          },
          function(t, e) {
            var n = e.component;
            t(e, 3, 0, n.isRoundButton || n.isIconButton, s.Db(e, 4).unbounded);
          }
        );
      }
      var Iu = s.qb({ encapsulation: 2, styles: [], data: {} });
      function Ru(t) {
        return s.Kb(
          2,
          [
            (t()(),
            s.sb(0, 0, null, null, 13, 'div', [['class', 'mat-calendar-header']], null, null, null, null, null)),
            (t()(),
            s.sb(1, 0, null, null, 12, 'div', [['class', 'mat-calendar-controls']], null, null, null, null, null)),
            (t()(),
            s.sb(
              2,
              0,
              null,
              null,
              4,
              'button',
              [
                ['cdkAriaLive', 'polite'],
                ['class', 'mat-calendar-period-button'],
                ['mat-button', ''],
                ['type', 'button']
              ],
              [[1, 'aria-label', 0], [1, 'disabled', 0], [2, '_mat-animation-noopable', null]],
              [[null, 'click']],
              function(t, e, n) {
                var s = !0;
                return 'click' === e && (s = !1 !== t.component.currentPeriodClicked() && s), s;
              },
              Ou,
              Tu
            )),
            s.rb(3, 180224, null, 0, jl, [s.k, ma, [2, Du]], null, null),
            s.rb(4, 147456, null, 0, ua, [s.k, ha, Rl, s.y], { politeness: [0, 'politeness'] }, null),
            (t()(), s.Ib(5, 0, ['', ''])),
            (t()(),
            s.sb(
              6,
              0,
              null,
              0,
              0,
              'div',
              [['class', 'mat-calendar-arrow']],
              [[2, 'mat-calendar-invert', null]],
              null,
              null,
              null,
              null
            )),
            (t()(), s.sb(7, 0, null, null, 0, 'div', [['class', 'mat-calendar-spacer']], null, null, null, null, null)),
            s.Cb(null, 0),
            (t()(),
            s.sb(
              9,
              0,
              null,
              null,
              1,
              'button',
              [['class', 'mat-calendar-previous-button'], ['mat-icon-button', ''], ['type', 'button']],
              [[1, 'aria-label', 0], [1, 'disabled', 0], [2, '_mat-animation-noopable', null]],
              [[null, 'click']],
              function(t, e, n) {
                var s = !0;
                return 'click' === e && (s = !1 !== t.component.previousClicked() && s), s;
              },
              Ou,
              Tu
            )),
            s.rb(10, 180224, null, 0, jl, [s.k, ma, [2, Du]], { disabled: [0, 'disabled'] }, null),
            (t()(), s.Ib(-1, null, [' '])),
            (t()(),
            s.sb(
              12,
              0,
              null,
              null,
              1,
              'button',
              [['class', 'mat-calendar-next-button'], ['mat-icon-button', ''], ['type', 'button']],
              [[1, 'aria-label', 0], [1, 'disabled', 0], [2, '_mat-animation-noopable', null]],
              [[null, 'click']],
              function(t, e, n) {
                var s = !0;
                return 'click' === e && (s = !1 !== t.component.nextClicked() && s), s;
              },
              Ou,
              Tu
            )),
            s.rb(13, 180224, null, 0, jl, [s.k, ma, [2, Du]], { disabled: [0, 'disabled'] }, null)
          ],
          function(t, e) {
            var n = e.component;
            t(e, 4, 0, 'polite'), t(e, 10, 0, !n.previousEnabled()), t(e, 13, 0, !n.nextEnabled());
          },
          function(t, e) {
            var n = e.component;
            t(
              e,
              2,
              0,
              n.periodButtonLabel,
              s.Db(e, 3).disabled || null,
              'NoopAnimations' === s.Db(e, 3)._animationMode
            ),
              t(e, 5, 0, n.periodButtonText),
              t(e, 6, 0, 'month' != n.calendar.currentView),
              t(
                e,
                9,
                0,
                n.prevButtonLabel,
                s.Db(e, 10).disabled || null,
                'NoopAnimations' === s.Db(e, 10)._animationMode
              ),
              t(
                e,
                12,
                0,
                n.nextButtonLabel,
                s.Db(e, 13).disabled || null,
                'NoopAnimations' === s.Db(e, 13)._animationMode
              );
          }
        );
      }
      function Pu(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 1, 'mat-calendar-header', [], null, null, null, Ru, Iu)),
            s.rb(1, 49152, null, 0, xl, [pl, El, [2, Sa], [2, ka], s.h], null, null)
          ],
          null,
          null
        );
      }
      var Nu = s.ob('mat-calendar-header', xl, Pu, {}, {}, ['*']),
        Mu = s.qb({
          encapsulation: 2,
          styles: [
            ".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}"
          ],
          data: {}
        });
      function Lu(t) {
        return s.Kb(0, [(t()(), s.hb(0, null, null, 0))], null, null);
      }
      function ju(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              1,
              'mat-month-view',
              [],
              null,
              [[null, 'activeDateChange'], [null, 'selectedChange'], [null, '_userSelection']],
              function(t, e, n) {
                var s = !0,
                  i = t.component;
                return (
                  'activeDateChange' === e && (s = !1 !== (i.activeDate = n) && s),
                  'selectedChange' === e && (s = !1 !== i._dateSelected(n) && s),
                  '_userSelection' === e && (s = !1 !== i._userSelected() && s),
                  s
                );
              },
              Ju,
              Zu
            )),
            s.rb(
              1,
              1097728,
              [[1, 4]],
              0,
              gl,
              [s.h, [2, ka], [2, Sa], [2, vr]],
              {
                activeDate: [0, 'activeDate'],
                selected: [1, 'selected'],
                minDate: [2, 'minDate'],
                maxDate: [3, 'maxDate'],
                dateFilter: [4, 'dateFilter'],
                dateClass: [5, 'dateClass']
              },
              {
                selectedChange: 'selectedChange',
                _userSelection: '_userSelection',
                activeDateChange: 'activeDateChange'
              }
            )
          ],
          function(t, e) {
            var n = e.component;
            t(e, 1, 0, n.activeDate, n.selected, n.minDate, n.maxDate, n.dateFilter, n.dateClass);
          },
          null
        );
      }
      function Fu(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              1,
              'mat-year-view',
              [],
              null,
              [[null, 'activeDateChange'], [null, 'monthSelected'], [null, 'selectedChange']],
              function(t, e, n) {
                var s = !0,
                  i = t.component;
                return (
                  'activeDateChange' === e && (s = !1 !== (i.activeDate = n) && s),
                  'monthSelected' === e && (s = !1 !== i._monthSelectedInYearView(n) && s),
                  'selectedChange' === e && (s = !1 !== i._goToDateInView(n, 'month') && s),
                  s
                );
              },
              ed,
              td
            )),
            s.rb(
              1,
              1097728,
              [[2, 4]],
              0,
              Cl,
              [s.h, [2, ka], [2, Sa], [2, vr]],
              {
                activeDate: [0, 'activeDate'],
                selected: [1, 'selected'],
                minDate: [2, 'minDate'],
                maxDate: [3, 'maxDate'],
                dateFilter: [4, 'dateFilter']
              },
              { selectedChange: 'selectedChange', monthSelected: 'monthSelected', activeDateChange: 'activeDateChange' }
            )
          ],
          function(t, e) {
            var n = e.component;
            t(e, 1, 0, n.activeDate, n.selected, n.minDate, n.maxDate, n.dateFilter);
          },
          null
        );
      }
      function Bu(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              1,
              'mat-multi-year-view',
              [],
              null,
              [[null, 'activeDateChange'], [null, 'yearSelected'], [null, 'selectedChange']],
              function(t, e, n) {
                var s = !0,
                  i = t.component;
                return (
                  'activeDateChange' === e && (s = !1 !== (i.activeDate = n) && s),
                  'yearSelected' === e && (s = !1 !== i._yearSelectedInMultiYearView(n) && s),
                  'selectedChange' === e && (s = !1 !== i._goToDateInView(n, 'year') && s),
                  s
                );
              },
              sd,
              nd
            )),
            s.rb(
              1,
              1097728,
              [[3, 4]],
              0,
              _l,
              [s.h, [2, Sa], [2, vr]],
              {
                activeDate: [0, 'activeDate'],
                selected: [1, 'selected'],
                minDate: [2, 'minDate'],
                maxDate: [3, 'maxDate'],
                dateFilter: [4, 'dateFilter']
              },
              { selectedChange: 'selectedChange', yearSelected: 'yearSelected', activeDateChange: 'activeDateChange' }
            )
          ],
          function(t, e) {
            var n = e.component;
            t(e, 1, 0, n.activeDate, n.selected, n.minDate, n.maxDate, n.dateFilter);
          },
          null
        );
      }
      function Vu(t) {
        return s.Kb(
          2,
          [
            s.Gb(671088640, 1, { monthView: 0 }),
            s.Gb(671088640, 2, { yearView: 0 }),
            s.Gb(671088640, 3, { multiYearView: 0 }),
            (t()(), s.hb(16777216, null, null, 1, null, Lu)),
            s.rb(4, 212992, null, 0, rr, [s.j, s.O], { portal: [0, 'portal'] }, null),
            (t()(),
            s.sb(
              5,
              0,
              null,
              null,
              8,
              'div',
              [['cdkMonitorSubtreeFocus', ''], ['class', 'mat-calendar-content'], ['tabindex', '-1']],
              null,
              null,
              null,
              null,
              null
            )),
            s.rb(6, 16384, null, 0, r.o, [], { ngSwitch: [0, 'ngSwitch'] }, null),
            s.rb(7, 147456, null, 0, fa, [s.k, ma], null, null),
            (t()(), s.hb(16777216, null, null, 1, null, ju)),
            s.rb(9, 278528, null, 0, r.p, [s.O, s.L, r.o], { ngSwitchCase: [0, 'ngSwitchCase'] }, null),
            (t()(), s.hb(16777216, null, null, 1, null, Fu)),
            s.rb(11, 278528, null, 0, r.p, [s.O, s.L, r.o], { ngSwitchCase: [0, 'ngSwitchCase'] }, null),
            (t()(), s.hb(16777216, null, null, 1, null, Bu)),
            s.rb(13, 278528, null, 0, r.p, [s.O, s.L, r.o], { ngSwitchCase: [0, 'ngSwitchCase'] }, null)
          ],
          function(t, e) {
            var n = e.component;
            t(e, 4, 0, n._calendarHeaderPortal),
              t(e, 6, 0, n.currentView),
              t(e, 9, 0, 'month'),
              t(e, 11, 0, 'year'),
              t(e, 13, 0, 'multi-year');
          },
          null
        );
      }
      var Uu = s.qb({
        encapsulation: 2,
        styles: [
          '.mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}@media (-ms-high-contrast:active){.mat-calendar-body-cell-content{border:none}}@media (-ms-high-contrast:active){.mat-calendar-body-selected,.mat-datepicker-popup:not(:empty){outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}}[dir=rtl] .mat-calendar-body-label{text-align:right}'
        ],
        data: {}
      });
      function Hu(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 2, 'tr', [['aria-hidden', 'true']], null, null, null, null, null)),
            (t()(),
            s.sb(
              1,
              0,
              null,
              null,
              1,
              'td',
              [['class', 'mat-calendar-body-label']],
              [[1, 'colspan', 0], [4, 'paddingTop', null], [4, 'paddingBottom', null]],
              null,
              null,
              null,
              null
            )),
            (t()(), s.Ib(2, null, ['', '']))
          ],
          null,
          function(t, e) {
            var n = e.component;
            t(e, 1, 0, n.numCols, n._cellPadding, n._cellPadding), t(e, 2, 0, n.label);
          }
        );
      }
      function zu(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              1,
              'td',
              [['aria-hidden', 'true'], ['class', 'mat-calendar-body-label']],
              [[1, 'colspan', 0], [4, 'paddingTop', null], [4, 'paddingBottom', null]],
              null,
              null,
              null,
              null
            )),
            (t()(), s.Ib(1, null, ['', '']))
          ],
          null,
          function(t, e) {
            var n = e.component;
            t(e, 0, 0, n._firstRowOffset, n._cellPadding, n._cellPadding),
              t(e, 1, 0, n._firstRowOffset >= n.labelMinRequiredCells ? n.label : '');
          }
        );
      }
      function $u(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              4,
              'td',
              [['class', 'mat-calendar-body-cell'], ['role', 'button']],
              [
                [8, 'tabIndex', 0],
                [2, 'mat-calendar-body-disabled', null],
                [2, 'mat-calendar-body-active', null],
                [1, 'aria-label', 0],
                [1, 'aria-disabled', 0],
                [1, 'aria-selected', 0],
                [4, 'width', null],
                [4, 'paddingTop', null],
                [4, 'paddingBottom', null]
              ],
              [[null, 'click']],
              function(t, e, n) {
                var s = !0;
                return 'click' === e && (s = !1 !== t.component._cellClicked(t.context.$implicit) && s), s;
              },
              null,
              null
            )),
            s.Fb(512, null, r.v, r.w, [s.r, s.s, s.k, s.D]),
            s.rb(2, 278528, null, 0, r.i, [r.v], { klass: [0, 'klass'], ngClass: [1, 'ngClass'] }, null),
            (t()(),
            s.sb(
              3,
              0,
              null,
              null,
              1,
              'div',
              [['class', 'mat-calendar-body-cell-content']],
              [[2, 'mat-calendar-body-selected', null], [2, 'mat-calendar-body-today', null]],
              null,
              null,
              null,
              null
            )),
            (t()(), s.Ib(4, null, ['', '']))
          ],
          function(t, e) {
            t(e, 2, 0, 'mat-calendar-body-cell', e.context.$implicit.cssClasses);
          },
          function(t, e) {
            var n = e.component;
            t(
              e,
              0,
              0,
              n._isActiveCell(e.parent.context.index, e.context.index) ? 0 : -1,
              !e.context.$implicit.enabled,
              n._isActiveCell(e.parent.context.index, e.context.index),
              e.context.$implicit.ariaLabel,
              !e.context.$implicit.enabled || null,
              n.selectedValue === e.context.$implicit.value,
              n._cellWidth,
              n._cellPadding,
              n._cellPadding
            ),
              t(e, 3, 0, n.selectedValue === e.context.$implicit.value, n.todayValue === e.context.$implicit.value),
              t(e, 4, 0, e.context.$implicit.displayValue);
          }
        );
      }
      function qu(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 4, 'tr', [['role', 'row']], null, null, null, null, null)),
            (t()(), s.hb(16777216, null, null, 1, null, zu)),
            s.rb(2, 16384, null, 0, r.k, [s.O, s.L], { ngIf: [0, 'ngIf'] }, null),
            (t()(), s.hb(16777216, null, null, 1, null, $u)),
            s.rb(4, 278528, null, 0, r.j, [s.O, s.L, s.r], { ngForOf: [0, 'ngForOf'] }, null)
          ],
          function(t, e) {
            t(e, 2, 0, 0 === e.context.index && e.component._firstRowOffset), t(e, 4, 0, e.context.$implicit);
          },
          null
        );
      }
      function Wu(t) {
        return s.Kb(
          2,
          [
            (t()(), s.hb(16777216, null, null, 1, null, Hu)),
            s.rb(1, 16384, null, 0, r.k, [s.O, s.L], { ngIf: [0, 'ngIf'] }, null),
            (t()(), s.hb(16777216, null, null, 1, null, qu)),
            s.rb(3, 278528, null, 0, r.j, [s.O, s.L, s.r], { ngForOf: [0, 'ngForOf'] }, null)
          ],
          function(t, e) {
            var n = e.component;
            t(e, 1, 0, n._firstRowOffset < n.labelMinRequiredCells), t(e, 3, 0, n.rows);
          },
          null
        );
      }
      var Ku = s.qb({
        encapsulation: 2,
        styles: [
          '.mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}'
        ],
        data: {
          animation: [
            {
              type: 7,
              name: 'transformPanel',
              definitions: [
                {
                  type: 0,
                  name: 'void',
                  styles: { type: 6, styles: { opacity: 0, transform: 'scale(1, 0.8)' }, offset: null },
                  options: void 0
                },
                {
                  type: 1,
                  expr: 'void => enter',
                  animation: {
                    type: 4,
                    styles: { type: 6, styles: { opacity: 1, transform: 'scale(1, 1)' }, offset: null },
                    timings: '120ms cubic-bezier(0, 0, 0.2, 1)'
                  },
                  options: null
                },
                {
                  type: 1,
                  expr: '* => void',
                  animation: {
                    type: 4,
                    styles: { type: 6, styles: { opacity: 0 }, offset: null },
                    timings: '100ms linear'
                  },
                  options: null
                }
              ],
              options: {}
            },
            {
              type: 7,
              name: 'fadeInCalendar',
              definitions: [
                { type: 0, name: 'void', styles: { type: 6, styles: { opacity: 0 }, offset: null }, options: void 0 },
                { type: 0, name: 'enter', styles: { type: 6, styles: { opacity: 1 }, offset: null }, options: void 0 },
                {
                  type: 1,
                  expr: 'void => *',
                  animation: { type: 4, styles: null, timings: '120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)' },
                  options: null
                }
              ],
              options: {}
            }
          ]
        }
      });
      function Yu(t) {
        return s.Kb(
          2,
          [
            s.Gb(671088640, 1, { _calendar: 0 }),
            (t()(),
            s.sb(
              1,
              0,
              null,
              null,
              4,
              'mat-calendar',
              [['cdkTrapFocus', ''], ['class', 'mat-calendar']],
              [[8, 'id', 0], [24, '@fadeInCalendar', 0]],
              [[null, 'selectedChange'], [null, 'yearSelected'], [null, 'monthSelected'], [null, '_userSelection']],
              function(t, e, n) {
                var s = !0,
                  i = t.component;
                return (
                  'selectedChange' === e && (s = !1 !== i.datepicker.select(n) && s),
                  'yearSelected' === e && (s = !1 !== i.datepicker._selectYear(n) && s),
                  'monthSelected' === e && (s = !1 !== i.datepicker._selectMonth(n) && s),
                  '_userSelection' === e && (s = !1 !== i.datepicker.close() && s),
                  s
                );
              },
              Vu,
              Mu
            )),
            s.Fb(512, null, r.v, r.w, [s.r, s.s, s.k, s.D]),
            s.rb(3, 278528, null, 0, r.i, [r.v], { ngClass: [0, 'ngClass'] }, null),
            s.rb(4, 1458176, null, 0, aa, [s.k, oa, r.d], { enabled: [0, 'enabled'] }, null),
            s.rb(
              5,
              10141696,
              [[1, 4]],
              0,
              El,
              [pl, [2, Sa], [2, ka], s.h],
              {
                headerComponent: [0, 'headerComponent'],
                startAt: [1, 'startAt'],
                startView: [2, 'startView'],
                selected: [3, 'selected'],
                minDate: [4, 'minDate'],
                maxDate: [5, 'maxDate'],
                dateFilter: [6, 'dateFilter'],
                dateClass: [7, 'dateClass']
              },
              {
                selectedChange: 'selectedChange',
                yearSelected: 'yearSelected',
                monthSelected: 'monthSelected',
                _userSelection: '_userSelection'
              }
            )
          ],
          function(t, e) {
            var n = e.component;
            t(e, 3, 0, n.datepicker.panelClass),
              t(e, 4, 0, ''),
              t(
                e,
                5,
                0,
                n.datepicker.calendarHeaderComponent,
                n.datepicker.startAt,
                n.datepicker.startView,
                n.datepicker._selected,
                n.datepicker._minDate,
                n.datepicker._maxDate,
                n.datepicker._dateFilter,
                n.datepicker.dateClass
              );
          },
          function(t, e) {
            t(e, 1, 0, e.component.datepicker.id, 'enter');
          }
        );
      }
      function Qu(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              1,
              'mat-datepicker-content',
              [['class', 'mat-datepicker-content']],
              [[40, '@transformPanel', 0], [2, 'mat-datepicker-content-touch', null]],
              null,
              null,
              Yu,
              Ku
            )),
            s.rb(1, 4243456, null, 0, Tl, [s.k], null, null)
          ],
          null,
          function(t, e) {
            t(e, 0, 0, 'enter', s.Db(e, 1).datepicker.touchUi);
          }
        );
      }
      var Gu = s.ob('mat-datepicker-content', Tl, Qu, { color: 'color' }, {}, []),
        Zu = s.qb({ encapsulation: 2, styles: [], data: {} });
      function Xu(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 1, 'th', [], [[1, 'aria-label', 0]], null, null, null, null)),
            (t()(), s.Ib(1, null, ['', '']))
          ],
          null,
          function(t, e) {
            t(e, 0, 0, e.context.$implicit.long), t(e, 1, 0, e.context.$implicit.narrow);
          }
        );
      }
      function Ju(t) {
        return s.Kb(
          2,
          [
            s.Gb(671088640, 1, { _matCalendarBody: 0 }),
            (t()(),
            s.sb(
              1,
              0,
              null,
              null,
              8,
              'table',
              [['class', 'mat-calendar-table'], ['role', 'presentation']],
              null,
              null,
              null,
              null,
              null
            )),
            (t()(),
            s.sb(2, 0, null, null, 5, 'thead', [['class', 'mat-calendar-table-header']], null, null, null, null, null)),
            (t()(), s.sb(3, 0, null, null, 2, 'tr', [], null, null, null, null, null)),
            (t()(), s.hb(16777216, null, null, 1, null, Xu)),
            s.rb(5, 278528, null, 0, r.j, [s.O, s.L, s.r], { ngForOf: [0, 'ngForOf'] }, null),
            (t()(), s.sb(6, 0, null, null, 1, 'tr', [], null, null, null, null, null)),
            (t()(),
            s.sb(
              7,
              0,
              null,
              null,
              0,
              'th',
              [['aria-hidden', 'true'], ['class', 'mat-calendar-table-header-divider'], ['colspan', '7']],
              null,
              null,
              null,
              null,
              null
            )),
            (t()(),
            s.sb(
              8,
              0,
              null,
              null,
              1,
              'tbody',
              [['aria-readonly', 'true'], ['class', 'mat-calendar-body'], ['mat-calendar-body', ''], ['role', 'grid']],
              null,
              [[null, 'selectedValueChange'], [null, 'keydown']],
              function(t, e, n) {
                var s = !0,
                  i = t.component;
                return (
                  'selectedValueChange' === e && (s = !1 !== i._dateSelected(n) && s),
                  'keydown' === e && (s = !1 !== i._handleCalendarBodyKeydown(n) && s),
                  s
                );
              },
              Wu,
              Uu
            )),
            s.rb(
              9,
              573440,
              [[1, 4]],
              0,
              fl,
              [s.k, s.y],
              {
                label: [0, 'label'],
                rows: [1, 'rows'],
                todayValue: [2, 'todayValue'],
                selectedValue: [3, 'selectedValue'],
                labelMinRequiredCells: [4, 'labelMinRequiredCells'],
                activeCell: [5, 'activeCell']
              },
              { selectedValueChange: 'selectedValueChange' }
            )
          ],
          function(t, e) {
            var n = e.component;
            t(e, 5, 0, n._weekdays),
              t(
                e,
                9,
                0,
                n._monthLabel,
                n._weeks,
                n._todayDate,
                n._selectedDate,
                3,
                n._dateAdapter.getDate(n.activeDate) - 1
              );
          },
          null
        );
      }
      var td = s.qb({ encapsulation: 2, styles: [], data: {} });
      function ed(t) {
        return s.Kb(
          2,
          [
            s.Gb(671088640, 1, { _matCalendarBody: 0 }),
            (t()(),
            s.sb(
              1,
              0,
              null,
              null,
              5,
              'table',
              [['class', 'mat-calendar-table'], ['role', 'presentation']],
              null,
              null,
              null,
              null,
              null
            )),
            (t()(),
            s.sb(2, 0, null, null, 2, 'thead', [['class', 'mat-calendar-table-header']], null, null, null, null, null)),
            (t()(), s.sb(3, 0, null, null, 1, 'tr', [], null, null, null, null, null)),
            (t()(),
            s.sb(
              4,
              0,
              null,
              null,
              0,
              'th',
              [['class', 'mat-calendar-table-header-divider'], ['colspan', '4']],
              null,
              null,
              null,
              null,
              null
            )),
            (t()(),
            s.sb(
              5,
              0,
              null,
              null,
              1,
              'tbody',
              [['aria-readonly', 'true'], ['class', 'mat-calendar-body'], ['mat-calendar-body', ''], ['role', 'grid']],
              null,
              [[null, 'selectedValueChange'], [null, 'keydown']],
              function(t, e, n) {
                var s = !0,
                  i = t.component;
                return (
                  'selectedValueChange' === e && (s = !1 !== i._monthSelected(n) && s),
                  'keydown' === e && (s = !1 !== i._handleCalendarBodyKeydown(n) && s),
                  s
                );
              },
              Wu,
              Uu
            )),
            s.rb(
              6,
              573440,
              [[1, 4]],
              0,
              fl,
              [s.k, s.y],
              {
                label: [0, 'label'],
                rows: [1, 'rows'],
                todayValue: [2, 'todayValue'],
                selectedValue: [3, 'selectedValue'],
                labelMinRequiredCells: [4, 'labelMinRequiredCells'],
                numCols: [5, 'numCols'],
                activeCell: [6, 'activeCell'],
                cellAspectRatio: [7, 'cellAspectRatio']
              },
              { selectedValueChange: 'selectedValueChange' }
            )
          ],
          function(t, e) {
            var n = e.component;
            t(
              e,
              6,
              0,
              n._yearLabel,
              n._months,
              n._todayMonth,
              n._selectedMonth,
              2,
              4,
              n._dateAdapter.getMonth(n.activeDate),
              4 / 7
            );
          },
          null
        );
      }
      var nd = s.qb({ encapsulation: 2, styles: [], data: {} });
      function sd(t) {
        return s.Kb(
          2,
          [
            s.Gb(671088640, 1, { _matCalendarBody: 0 }),
            (t()(),
            s.sb(
              1,
              0,
              null,
              null,
              5,
              'table',
              [['class', 'mat-calendar-table'], ['role', 'presentation']],
              null,
              null,
              null,
              null,
              null
            )),
            (t()(),
            s.sb(2, 0, null, null, 2, 'thead', [['class', 'mat-calendar-table-header']], null, null, null, null, null)),
            (t()(), s.sb(3, 0, null, null, 1, 'tr', [], null, null, null, null, null)),
            (t()(),
            s.sb(
              4,
              0,
              null,
              null,
              0,
              'th',
              [['class', 'mat-calendar-table-header-divider'], ['colspan', '4']],
              null,
              null,
              null,
              null,
              null
            )),
            (t()(),
            s.sb(
              5,
              0,
              null,
              null,
              1,
              'tbody',
              [['aria-readonly', 'true'], ['class', 'mat-calendar-body'], ['mat-calendar-body', ''], ['role', 'grid']],
              null,
              [[null, 'selectedValueChange'], [null, 'keydown']],
              function(t, e, n) {
                var s = !0,
                  i = t.component;
                return (
                  'selectedValueChange' === e && (s = !1 !== i._yearSelected(n) && s),
                  'keydown' === e && (s = !1 !== i._handleCalendarBodyKeydown(n) && s),
                  s
                );
              },
              Wu,
              Uu
            )),
            s.rb(
              6,
              573440,
              [[1, 4]],
              0,
              fl,
              [s.k, s.y],
              {
                rows: [0, 'rows'],
                todayValue: [1, 'todayValue'],
                selectedValue: [2, 'selectedValue'],
                numCols: [3, 'numCols'],
                activeCell: [4, 'activeCell'],
                cellAspectRatio: [5, 'cellAspectRatio']
              },
              { selectedValueChange: 'selectedValueChange' }
            )
          ],
          function(t, e) {
            var n = e.component;
            t(e, 6, 0, n._years, n._todayYear, n._selectedYear, 4, n._getActiveCell(), 4 / 7);
          },
          null
        );
      }
      class id {
        constructor(t) {
          this.total = t;
        }
        call(t, e) {
          return e.subscribe(new rd(t, this.total));
        }
      }
      class rd extends O.a {
        constructor(t, e) {
          super(t), (this.total = e), (this.count = 0);
        }
        _next(t) {
          ++this.count > this.total && this.destination.next(t);
        }
      }
      const od = new Set();
      let ad,
        ld = (() => {
          class t {
            constructor(t) {
              (this._platform = t),
                (this._matchMedia =
                  this._platform.isBrowser && window.matchMedia ? window.matchMedia.bind(window) : cd);
            }
            matchMedia(t) {
              return (
                this._platform.WEBKIT &&
                  (function(t) {
                    if (!od.has(t))
                      try {
                        ad ||
                          ((ad = document.createElement('style')).setAttribute('type', 'text/css'),
                          document.head.appendChild(ad)),
                          ad.sheet && (ad.sheet.insertRule(`@media ${t} {.fx-query-test{ }}`, 0), od.add(t));
                      } catch (e) {
                        console.error(e);
                      }
                  })(t),
                this._matchMedia(t)
              );
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(Zr));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })();
      function cd(t) {
        return { matches: 'all' === t || '' === t, media: t, addListener: () => {}, removeListener: () => {} };
      }
      let hd = (() => {
        class t {
          constructor(t, e) {
            (this._mediaMatcher = t), (this._zone = e), (this._queries = new Map()), (this._destroySubject = new u.a());
          }
          ngOnDestroy() {
            this._destroySubject.next(), this._destroySubject.complete();
          }
          isMatched(t) {
            return ud(Er(t)).some(t => this._registerQuery(t).mql.matches);
          }
          observe(t) {
            let e = w(ud(Er(t)).map(t => this._registerQuery(t).observable));
            return (e = at(
              e.pipe(Z(1)),
              e.pipe(
                t => t.lift(new id(1)),
                Go(0)
              )
            )).pipe(
              Object(D.a)(t => {
                const e = { matches: !1, breakpoints: {} };
                return (
                  t.forEach(t => {
                    (e.matches = e.matches || t.matches), (e.breakpoints[t.query] = t.matches);
                  }),
                  e
                );
              })
            );
          }
          _registerQuery(t) {
            if (this._queries.has(t)) return this._queries.get(t);
            const e = this._mediaMatcher.matchMedia(t),
              n = {
                observable: new m.a(t => {
                  const n = e => this._zone.run(() => t.next(e));
                  return (
                    e.addListener(n),
                    () => {
                      e.removeListener(n);
                    }
                  );
                }).pipe(
                  lt(e),
                  Object(D.a)(e => ({ query: t, matches: e.matches })),
                  Fi(this._destroySubject)
                ),
                mql: e
              };
            return this._queries.set(t, n), n;
          }
        }
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            factory: function() {
              return new t(Object(s.Pb)(ld), Object(s.Pb)(s.y));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      function ud(t) {
        return t
          .map(t => t.split(','))
          .reduce((t, e) => t.concat(e))
          .map(t => t.trim());
      }
      const dd = 20,
        pd = new s.p('mat-tooltip-scroll-strategy');
      function md(t) {
        return () => t.scrollStrategies.reposition({ scrollThrottle: dd });
      }
      let fd = (() =>
          class {
            constructor(t, e) {
              (this._changeDetectorRef = t),
                (this._breakpointObserver = e),
                (this._visibility = 'initial'),
                (this._closeOnInteraction = !1),
                (this._onHide = new u.a()),
                (this._isHandset = this._breakpointObserver.observe(
                  '(max-width: 599.99px) and (orientation: portrait), (max-width: 959.99px) and (orientation: landscape)'
                ));
            }
            show(t) {
              this._hideTimeoutId && (clearTimeout(this._hideTimeoutId), (this._hideTimeoutId = null)),
                (this._closeOnInteraction = !0),
                (this._showTimeoutId = setTimeout(() => {
                  (this._visibility = 'visible'), (this._showTimeoutId = null), this._markForCheck();
                }, t));
            }
            hide(t) {
              this._showTimeoutId && (clearTimeout(this._showTimeoutId), (this._showTimeoutId = null)),
                (this._hideTimeoutId = setTimeout(() => {
                  (this._visibility = 'hidden'), (this._hideTimeoutId = null), this._markForCheck();
                }, t));
            }
            afterHidden() {
              return this._onHide.asObservable();
            }
            isVisible() {
              return 'visible' === this._visibility;
            }
            ngOnDestroy() {
              this._onHide.complete();
            }
            _animationStart() {
              this._closeOnInteraction = !1;
            }
            _animationDone(t) {
              const e = t.toState;
              'hidden' !== e || this.isVisible() || this._onHide.next(),
                ('visible' !== e && 'hidden' !== e) || (this._closeOnInteraction = !0);
            }
            _handleBodyInteraction() {
              this._closeOnInteraction && this.hide(0);
            }
            _markForCheck() {
              this._changeDetectorRef.markForCheck();
            }
          })(),
        gd = (() => class {})();
      var bd = s.qb({
        encapsulation: 2,
        styles: [
          '.mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}'
        ],
        data: {
          animation: [
            {
              type: 7,
              name: 'state',
              definitions: [
                {
                  type: 0,
                  name: 'initial, void, hidden',
                  styles: { type: 6, styles: { opacity: 0, transform: 'scale(0)' }, offset: null },
                  options: void 0
                },
                {
                  type: 0,
                  name: 'visible',
                  styles: { type: 6, styles: { transform: 'scale(1)' }, offset: null },
                  options: void 0
                },
                {
                  type: 1,
                  expr: '* => visible',
                  animation: {
                    type: 4,
                    styles: {
                      type: 5,
                      steps: [
                        { type: 6, styles: { opacity: 0, transform: 'scale(0)', offset: 0 }, offset: null },
                        { type: 6, styles: { opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }, offset: null },
                        { type: 6, styles: { opacity: 1, transform: 'scale(1)', offset: 1 }, offset: null }
                      ]
                    },
                    timings: '200ms cubic-bezier(0, 0, 0.2, 1)'
                  },
                  options: null
                },
                {
                  type: 1,
                  expr: '* => hidden',
                  animation: {
                    type: 4,
                    styles: { type: 6, styles: { opacity: 0 }, offset: null },
                    timings: '100ms cubic-bezier(0, 0, 0.2, 1)'
                  },
                  options: null
                }
              ],
              options: {}
            }
          ]
        }
      });
      function _d(t) {
        return s.Kb(
          2,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              4,
              'div',
              [['class', 'mat-tooltip']],
              [[2, 'mat-tooltip-handset', null], [24, '@state', 0]],
              [[null, '@state.start'], [null, '@state.done']],
              function(t, e, n) {
                var s = !0,
                  i = t.component;
                return (
                  '@state.start' === e && (s = !1 !== i._animationStart() && s),
                  '@state.done' === e && (s = !1 !== i._animationDone(n) && s),
                  s
                );
              },
              null,
              null
            )),
            s.Fb(512, null, r.v, r.w, [s.r, s.s, s.k, s.D]),
            s.rb(2, 278528, null, 0, r.i, [r.v], { klass: [0, 'klass'], ngClass: [1, 'ngClass'] }, null),
            s.Eb(131072, r.b, [s.h]),
            (t()(), s.Ib(4, null, ['', '']))
          ],
          function(t, e) {
            t(e, 2, 0, 'mat-tooltip', e.component.tooltipClass);
          },
          function(t, e) {
            var n,
              i = e.component;
            t(
              e,
              0,
              0,
              null == (n = s.Jb(e, 0, 0, s.Db(e, 3).transform(i._isHandset))) ? null : n.matches,
              i._visibility
            ),
              t(e, 4, 0, i.message);
          }
        );
      }
      function yd(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              1,
              'mat-tooltip-component',
              [['aria-hidden', 'true']],
              [[4, 'zoom', null]],
              [['body', 'click']],
              function(t, e, n) {
                var i = !0;
                return 'body:click' === e && (i = !1 !== s.Db(t, 1)._handleBodyInteraction() && i), i;
              },
              _d,
              bd
            )),
            s.rb(1, 180224, null, 0, fd, [s.h, hd], null, null)
          ],
          null,
          function(t, e) {
            t(e, 0, 0, 'visible' === s.Db(e, 1)._visibility ? 1 : null);
          }
        );
      }
      var vd = s.ob('mat-tooltip-component', fd, yd, {}, {}, []);
      class wd {
        constructor(t, e) {
          (this._overlayRef = e),
            (this._afterDismissed = new u.a()),
            (this._afterOpened = new u.a()),
            (this._onAction = new u.a()),
            (this._dismissedByAction = !1),
            (this.containerInstance = t),
            this.onAction().subscribe(() => this.dismiss()),
            t._onExit.subscribe(() => this._finishDismiss());
        }
        dismiss() {
          this._afterDismissed.closed || this.containerInstance.exit(), clearTimeout(this._durationTimeoutId);
        }
        dismissWithAction() {
          this._onAction.closed || ((this._dismissedByAction = !0), this._onAction.next(), this._onAction.complete());
        }
        closeWithAction() {
          this.dismissWithAction();
        }
        _dismissAfter(t) {
          this._durationTimeoutId = setTimeout(() => this.dismiss(), t);
        }
        _open() {
          this._afterOpened.closed || (this._afterOpened.next(), this._afterOpened.complete());
        }
        _finishDismiss() {
          this._overlayRef.dispose(),
            this._onAction.closed || this._onAction.complete(),
            this._afterDismissed.next({ dismissedByAction: this._dismissedByAction }),
            this._afterDismissed.complete(),
            (this._dismissedByAction = !1);
        }
        afterDismissed() {
          return this._afterDismissed.asObservable();
        }
        afterOpened() {
          return this.containerInstance._onEnter;
        }
        onAction() {
          return this._onAction.asObservable();
        }
      }
      const Cd = new s.p('MatSnackBarData');
      class xd {
        constructor() {
          (this.politeness = 'assertive'),
            (this.announcementMessage = ''),
            (this.duration = 0),
            (this.data = null),
            (this.horizontalPosition = 'center'),
            (this.verticalPosition = 'bottom');
        }
      }
      let Ed = (() =>
          class {
            constructor(t, e) {
              (this.snackBarRef = t), (this.data = e);
            }
            action() {
              this.snackBarRef.dismissWithAction();
            }
            get hasAction() {
              return !!this.data.action;
            }
          })(),
        Sd = (() =>
          class extends sr {
            constructor(t, e, n, s) {
              super(),
                (this._ngZone = t),
                (this._elementRef = e),
                (this._changeDetectorRef = n),
                (this.snackBarConfig = s),
                (this._destroyed = !1),
                (this._onExit = new u.a()),
                (this._onEnter = new u.a()),
                (this._animationState = 'void'),
                (this._role =
                  'assertive' !== s.politeness || s.announcementMessage
                    ? 'off' === s.politeness
                      ? null
                      : 'status'
                    : 'alert');
            }
            attachComponentPortal(t) {
              return (
                this._assertNotAttached(), this._applySnackBarClasses(), this._portalOutlet.attachComponentPortal(t)
              );
            }
            attachTemplatePortal(t) {
              return (
                this._assertNotAttached(), this._applySnackBarClasses(), this._portalOutlet.attachTemplatePortal(t)
              );
            }
            onAnimationEnd(t) {
              const { fromState: e, toState: n } = t;
              if (((('void' === n && 'void' !== e) || 'hidden' === n) && this._completeExit(), 'visible' === n)) {
                const t = this._onEnter;
                this._ngZone.run(() => {
                  t.next(), t.complete();
                });
              }
            }
            enter() {
              this._destroyed || ((this._animationState = 'visible'), this._changeDetectorRef.detectChanges());
            }
            exit() {
              return (this._animationState = 'hidden'), this._onExit;
            }
            ngOnDestroy() {
              (this._destroyed = !0), this._completeExit();
            }
            _completeExit() {
              this._ngZone.onMicrotaskEmpty
                .asObservable()
                .pipe(Z(1))
                .subscribe(() => {
                  this._onExit.next(), this._onExit.complete();
                });
            }
            _applySnackBarClasses() {
              const t = this._elementRef.nativeElement,
                e = this.snackBarConfig.panelClass;
              e && (Array.isArray(e) ? e.forEach(e => t.classList.add(e)) : t.classList.add(e)),
                'center' === this.snackBarConfig.horizontalPosition && t.classList.add('mat-snack-bar-center'),
                'top' === this.snackBarConfig.verticalPosition && t.classList.add('mat-snack-bar-top');
            }
            _assertNotAttached() {
              if (this._portalOutlet.hasAttached())
                throw Error('Attempting to attach snack bar content after content is already attached');
            }
          })(),
        kd = (() => class {})();
      var Dd = s.qb({
        encapsulation: 2,
        styles: [
          '.mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}'
        ],
        data: {
          animation: [
            {
              type: 7,
              name: 'state',
              definitions: [
                {
                  type: 0,
                  name: 'void, hidden',
                  styles: { type: 6, styles: { transform: 'scale(0.8)', opacity: 0 }, offset: null },
                  options: void 0
                },
                {
                  type: 0,
                  name: 'visible',
                  styles: { type: 6, styles: { transform: 'scale(1)', opacity: 1 }, offset: null },
                  options: void 0
                },
                {
                  type: 1,
                  expr: '* => visible',
                  animation: { type: 4, styles: null, timings: '150ms cubic-bezier(0, 0, 0.2, 1)' },
                  options: null
                },
                {
                  type: 1,
                  expr: '* => void, * => hidden',
                  animation: {
                    type: 4,
                    styles: { type: 6, styles: { opacity: 0 }, offset: null },
                    timings: '75ms cubic-bezier(0.4, 0.0, 1, 1)'
                  },
                  options: null
                }
              ],
              options: {}
            }
          ]
        }
      });
      function Ad(t) {
        return s.Kb(0, [(t()(), s.hb(0, null, null, 0))], null, null);
      }
      function Td(t) {
        return s.Kb(
          0,
          [
            s.Gb(402653184, 1, { _portalOutlet: 0 }),
            (t()(), s.hb(16777216, null, null, 1, null, Ad)),
            s.rb(2, 212992, [[1, 4]], 0, rr, [s.j, s.O], { portal: [0, 'portal'] }, null)
          ],
          function(t, e) {
            t(e, 2, 0, '');
          },
          null
        );
      }
      function Od(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              1,
              'snack-bar-container',
              [['class', 'mat-snack-bar-container']],
              [[1, 'role', 0], [40, '@state', 0]],
              [['component', '@state.done']],
              function(t, e, n) {
                var i = !0;
                return 'component:@state.done' === e && (i = !1 !== s.Db(t, 1).onAnimationEnd(n) && i), i;
              },
              Td,
              Dd
            )),
            s.rb(1, 180224, null, 0, Sd, [s.y, s.k, s.h, xd], null, null)
          ],
          null,
          function(t, e) {
            t(e, 0, 0, s.Db(e, 1)._role, s.Db(e, 1)._animationState);
          }
        );
      }
      var Id = s.ob('snack-bar-container', Sd, Od, {}, {}, []),
        Rd = s.qb({
          encapsulation: 2,
          styles: [
            '.mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}'
          ],
          data: {}
        });
      function Pd(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(0, 0, null, null, 3, 'div', [['class', 'mat-simple-snackbar-action']], null, null, null, null, null)),
            (t()(),
            s.sb(
              1,
              0,
              null,
              null,
              2,
              'button',
              [['mat-button', '']],
              [[1, 'disabled', 0], [2, '_mat-animation-noopable', null]],
              [[null, 'click']],
              function(t, e, n) {
                var s = !0;
                return 'click' === e && (s = !1 !== t.component.action() && s), s;
              },
              Ou,
              Tu
            )),
            s.rb(2, 180224, null, 0, jl, [s.k, ma, [2, Du]], null, null),
            (t()(), s.Ib(3, 0, ['', '']))
          ],
          null,
          function(t, e) {
            var n = e.component;
            t(e, 1, 0, s.Db(e, 2).disabled || null, 'NoopAnimations' === s.Db(e, 2)._animationMode),
              t(e, 3, 0, n.data.action);
          }
        );
      }
      function Nd(t) {
        return s.Kb(
          2,
          [
            (t()(), s.sb(0, 0, null, null, 1, 'span', [], null, null, null, null, null)),
            (t()(), s.Ib(1, null, ['', ''])),
            (t()(), s.hb(16777216, null, null, 1, null, Pd)),
            s.rb(3, 16384, null, 0, r.k, [s.O, s.L], { ngIf: [0, 'ngIf'] }, null)
          ],
          function(t, e) {
            t(e, 3, 0, e.component.hasAction);
          },
          function(t, e) {
            t(e, 1, 0, e.component.data.message);
          }
        );
      }
      function Md(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              1,
              'simple-snack-bar',
              [['class', 'mat-simple-snackbar']],
              null,
              null,
              null,
              Nd,
              Rd
            )),
            s.rb(1, 49152, null, 0, Ed, [wd, Cd], null, null)
          ],
          null,
          null
        );
      }
      var Ld = s.ob('simple-snack-bar', Ed, Md, {}, {}, []),
        jd = s.qb({ encapsulation: 2, styles: [], data: {} });
      function Fd(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 16777216, null, null, 1, 'router-outlet', [], null, null, null, null, null)),
            s.rb(1, 212992, null, 0, Xn, [Zn, s.O, s.j, [8, null], s.h], null, null)
          ],
          function(t, e) {
            t(e, 1, 0);
          },
          null
        );
      }
      function Bd(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 1, 'ng-component', [], null, null, null, Fd, jd)),
            s.rb(1, 49152, null, 0, Ht, [], null, null)
          ],
          null,
          null
        );
      }
      var Vd = s.ob('ng-component', Ht, Bd, {}, {}, []);
      function Ud(t, e = Vr) {
        var n;
        const s = (n = t) instanceof Date && !isNaN(+n) ? +t - e.now() : Math.abs(t);
        return t => t.lift(new Hd(s, e));
      }
      class Hd {
        constructor(t, e) {
          (this.delay = t), (this.scheduler = e);
        }
        call(t, e) {
          return e.subscribe(new zd(t, this.delay, this.scheduler));
        }
      }
      class zd extends O.a {
        constructor(t, e, n) {
          super(t), (this.delay = e), (this.scheduler = n), (this.queue = []), (this.active = !1), (this.errored = !1);
        }
        static dispatch(t) {
          const e = t.source,
            n = e.queue,
            s = t.scheduler,
            i = t.destination;
          for (; n.length > 0 && n[0].time - s.now() <= 0; ) n.shift().notification.observe(i);
          if (n.length > 0) {
            const e = Math.max(0, n[0].time - s.now());
            this.schedule(t, e);
          } else this.unsubscribe(), (e.active = !1);
        }
        _schedule(t) {
          (this.active = !0),
            this.destination.add(
              t.schedule(zd.dispatch, this.delay, { source: this, destination: this.destination, scheduler: t })
            );
        }
        scheduleNotification(t) {
          if (!0 === this.errored) return;
          const e = this.scheduler,
            n = new $d(e.now() + this.delay, t);
          this.queue.push(n), !1 === this.active && this._schedule(e);
        }
        _next(t) {
          this.scheduleNotification(Qr.createNext(t));
        }
        _error(t) {
          (this.errored = !0), (this.queue = []), this.destination.error(t), this.unsubscribe();
        }
        _complete() {
          this.scheduleNotification(Qr.createComplete()), this.unsubscribe();
        }
      }
      class $d {
        constructor(t, e) {
          (this.time = t), (this.notification = e);
        }
      }
      const qd = new s.p('MAT_MENU_PANEL');
      class Wd {}
      const Kd = xa(wa(Wd));
      let Yd = (() =>
        class extends Kd {
          constructor(t, e, n, s) {
            super(),
              (this._elementRef = t),
              (this._focusMonitor = n),
              (this._parentMenu = s),
              (this.role = 'menuitem'),
              (this._hovered = new u.a()),
              (this._highlighted = !1),
              (this._triggersSubmenu = !1),
              n && n.monitor(this._elementRef, !1),
              s && s.addItem && s.addItem(this),
              (this._document = e);
          }
          focus(t = 'program') {
            this._focusMonitor
              ? this._focusMonitor.focusVia(this._getHostElement(), t)
              : this._getHostElement().focus();
          }
          ngOnDestroy() {
            this._focusMonitor && this._focusMonitor.stopMonitoring(this._elementRef),
              this._parentMenu && this._parentMenu.removeItem && this._parentMenu.removeItem(this),
              this._hovered.complete();
          }
          _getTabIndex() {
            return this.disabled ? '-1' : '0';
          }
          _getHostElement() {
            return this._elementRef.nativeElement;
          }
          _checkDisabled(t) {
            this.disabled && (t.preventDefault(), t.stopPropagation());
          }
          _handleMouseEnter() {
            this._hovered.next(this);
          }
          getLabel() {
            const t = this._elementRef.nativeElement,
              e = this._document ? this._document.TEXT_NODE : 3;
            let n = '';
            if (t.childNodes) {
              const s = t.childNodes.length;
              for (let i = 0; i < s; i++) t.childNodes[i].nodeType === e && (n += t.childNodes[i].textContent);
            }
            return n.trim();
          }
        })();
      const Qd = new s.p('mat-menu-default-options', {
        providedIn: 'root',
        factory: function() {
          return {
            overlapTrigger: !1,
            xPosition: 'after',
            yPosition: 'below',
            backdropClass: 'cdk-overlay-transparent-backdrop'
          };
        }
      });
      let Gd = (() =>
        class {
          constructor(t, e, n) {
            (this._elementRef = t),
              (this._ngZone = e),
              (this._defaultOptions = n),
              (this._xPosition = this._defaultOptions.xPosition),
              (this._yPosition = this._defaultOptions.yPosition),
              (this._directDescendantItems = new s.C()),
              (this._tabSubscription = vt.a.EMPTY),
              (this._classList = {}),
              (this._panelAnimationState = 'void'),
              (this._animationDone = new u.a()),
              (this.backdropClass = this._defaultOptions.backdropClass),
              (this._overlapTrigger = this._defaultOptions.overlapTrigger),
              (this._hasBackdrop = this._defaultOptions.hasBackdrop),
              (this.closed = new s.m()),
              (this.close = this.closed);
          }
          get xPosition() {
            return this._xPosition;
          }
          set xPosition(t) {
            'before' !== t &&
              'after' !== t &&
              (function() {
                throw Error(
                  'xPosition value must be either \'before\' or after\'.\n      Example: <mat-menu xPosition="before" #menu="matMenu"></mat-menu>'
                );
              })(),
              (this._xPosition = t),
              this.setPositionClasses();
          }
          get yPosition() {
            return this._yPosition;
          }
          set yPosition(t) {
            'above' !== t &&
              'below' !== t &&
              (function() {
                throw Error(
                  'yPosition value must be either \'above\' or below\'.\n      Example: <mat-menu yPosition="above" #menu="matMenu"></mat-menu>'
                );
              })(),
              (this._yPosition = t),
              this.setPositionClasses();
          }
          get overlapTrigger() {
            return this._overlapTrigger;
          }
          set overlapTrigger(t) {
            this._overlapTrigger = Cr(t);
          }
          get hasBackdrop() {
            return this._hasBackdrop;
          }
          set hasBackdrop(t) {
            this._hasBackdrop = Cr(t);
          }
          set panelClass(t) {
            const e = this._previousPanelClass;
            e &&
              e.length &&
              e.split(' ').forEach(t => {
                this._classList[t] = !1;
              }),
              (this._previousPanelClass = t),
              t &&
                t.length &&
                (t.split(' ').forEach(t => {
                  this._classList[t] = !0;
                }),
                (this._elementRef.nativeElement.className = ''));
          }
          get classList() {
            return this.panelClass;
          }
          set classList(t) {
            this.panelClass = t;
          }
          ngOnInit() {
            this.setPositionClasses();
          }
          ngAfterContentInit() {
            this._updateDirectDescendants(),
              (this._keyManager = new ea(this._directDescendantItems).withWrap().withTypeAhead()),
              (this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab')));
          }
          ngOnDestroy() {
            this._directDescendantItems.destroy(), this._tabSubscription.unsubscribe(), this.closed.complete();
          }
          _hovered() {
            return this._directDescendantItems.changes.pipe(
              lt(this._directDescendantItems),
              it(t => Object(vs.a)(...t.map(t => t._hovered)))
            );
          }
          addItem(t) {}
          removeItem(t) {}
          _handleKeydown(t) {
            const e = t.keyCode,
              n = this._keyManager;
            switch (e) {
              case cr:
                _r(t) || (t.preventDefault(), this.closed.emit('keydown'));
                break;
              case hr:
                this.parentMenu && 'ltr' === this.direction && this.closed.emit('keydown');
                break;
              case dr:
                this.parentMenu && 'rtl' === this.direction && this.closed.emit('keydown');
                break;
              case 36:
              case 35:
                _r(t) || (36 === e ? n.setFirstItemActive() : n.setLastItemActive(), t.preventDefault());
                break;
              default:
                (e !== ur && e !== pr) || n.setFocusOrigin('keyboard'), n.onKeydown(t);
            }
          }
          focusFirstItem(t = 'program') {
            this.lazyContent
              ? this._ngZone.onStable
                  .asObservable()
                  .pipe(Z(1))
                  .subscribe(() => this._keyManager.setFocusOrigin(t).setFirstItemActive())
              : this._keyManager.setFocusOrigin(t).setFirstItemActive();
          }
          resetActiveItem() {
            this._keyManager.setActiveItem(-1);
          }
          setElevation(t) {
            const e = `mat-elevation-z${4 + t}`,
              n = Object.keys(this._classList).find(t => t.startsWith('mat-elevation-z'));
            (n && n !== this._previousElevation) ||
              (this._previousElevation && (this._classList[this._previousElevation] = !1),
              (this._classList[e] = !0),
              (this._previousElevation = e));
          }
          setPositionClasses(t = this.xPosition, e = this.yPosition) {
            const n = this._classList;
            (n['mat-menu-before'] = 'before' === t),
              (n['mat-menu-after'] = 'after' === t),
              (n['mat-menu-above'] = 'above' === e),
              (n['mat-menu-below'] = 'below' === e);
          }
          _startAnimation() {
            this._panelAnimationState = 'enter';
          }
          _resetAnimation() {
            this._panelAnimationState = 'void';
          }
          _onAnimationDone(t) {
            this._animationDone.next(t), (this._isAnimating = !1);
          }
          _onAnimationStart(t) {
            (this._isAnimating = !0),
              'enter' === t.toState && 0 === this._keyManager.activeItemIndex && (t.element.scrollTop = 0);
          }
          _updateDirectDescendants() {
            this._allItems.changes.pipe(lt(this._allItems)).subscribe(t => {
              this._directDescendantItems.reset(t.filter(t => t._parentMenu === this)),
                this._directDescendantItems.notifyOnChanges();
            });
          }
        })();
      class Zd extends Gd {}
      let Xd = (() =>
        class extends Zd {
          constructor(t, e, n) {
            super(t, e, n);
          }
        })();
      const Jd = new s.p('mat-menu-scroll-strategy');
      function tp(t) {
        return () => t.scrollStrategies.reposition();
      }
      const ep = Jr({ passive: !0 });
      let np = (() =>
          class {
            constructor(t, e, n, i, r, o, a, l) {
              (this._overlay = t),
                (this._element = e),
                (this._viewContainerRef = n),
                (this._parentMenu = r),
                (this._menuItemInstance = o),
                (this._dir = a),
                (this._focusMonitor = l),
                (this._overlayRef = null),
                (this._menuOpen = !1),
                (this._closingActionsSubscription = vt.a.EMPTY),
                (this._hoverSubscription = vt.a.EMPTY),
                (this._menuCloseSubscription = vt.a.EMPTY),
                (this._handleTouchStart = () => (this._openedBy = 'touch')),
                (this._openedBy = null),
                (this.restoreFocus = !0),
                (this.menuOpened = new s.m()),
                (this.onMenuOpen = this.menuOpened),
                (this.menuClosed = new s.m()),
                (this.onMenuClose = this.menuClosed),
                e.nativeElement.addEventListener('touchstart', this._handleTouchStart, ep),
                o && (o._triggersSubmenu = this.triggersSubmenu()),
                (this._scrollStrategy = i);
            }
            get _deprecatedMatMenuTriggerFor() {
              return this.menu;
            }
            set _deprecatedMatMenuTriggerFor(t) {
              this.menu = t;
            }
            get menu() {
              return this._menu;
            }
            set menu(t) {
              t !== this._menu &&
                ((this._menu = t),
                this._menuCloseSubscription.unsubscribe(),
                t &&
                  (this._menuCloseSubscription = t.close.asObservable().subscribe(t => {
                    this._destroyMenu(),
                      ('click' !== t && 'tab' !== t) || !this._parentMenu || this._parentMenu.closed.emit(t);
                  })));
            }
            ngAfterContentInit() {
              this._checkMenu(), this._handleHover();
            }
            ngOnDestroy() {
              this._overlayRef && (this._overlayRef.dispose(), (this._overlayRef = null)),
                this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, ep),
                this._menuCloseSubscription.unsubscribe(),
                this._closingActionsSubscription.unsubscribe(),
                this._hoverSubscription.unsubscribe();
            }
            get menuOpen() {
              return this._menuOpen;
            }
            get dir() {
              return this._dir && 'rtl' === this._dir.value ? 'rtl' : 'ltr';
            }
            triggersSubmenu() {
              return !(!this._menuItemInstance || !this._parentMenu);
            }
            toggleMenu() {
              return this._menuOpen ? this.closeMenu() : this.openMenu();
            }
            openMenu() {
              if (this._menuOpen) return;
              this._checkMenu();
              const t = this._createOverlay(),
                e = t.getConfig();
              this._setPosition(e.positionStrategy),
                (e.hasBackdrop = null == this.menu.hasBackdrop ? !this.triggersSubmenu() : this.menu.hasBackdrop),
                t.attach(this._getPortal()),
                this.menu.lazyContent && this.menu.lazyContent.attach(this.menuData),
                (this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu())),
                this._initMenu(),
                this.menu instanceof Zd && this.menu._startAnimation();
            }
            closeMenu() {
              this.menu.close.emit();
            }
            focus(t = 'program') {
              this._focusMonitor ? this._focusMonitor.focusVia(this._element, t) : this._element.nativeElement.focus();
            }
            _destroyMenu() {
              if (!this._overlayRef || !this.menuOpen) return;
              const t = this.menu;
              this._closingActionsSubscription.unsubscribe(),
                this._overlayRef.detach(),
                t instanceof Zd
                  ? (t._resetAnimation(),
                    t.lazyContent
                      ? t._animationDone
                          .pipe(
                            I(t => 'void' === t.toState),
                            Z(1),
                            Fi(t.lazyContent._attached)
                          )
                          .subscribe({ next: () => t.lazyContent.detach(), complete: () => this._resetMenu() })
                      : this._resetMenu())
                  : (this._resetMenu(), t.lazyContent && t.lazyContent.detach());
            }
            _initMenu() {
              (this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : void 0),
                (this.menu.direction = this.dir),
                this._setMenuElevation(),
                this._setIsMenuOpen(!0),
                this.menu.focusFirstItem(this._openedBy || 'program');
            }
            _setMenuElevation() {
              if (this.menu.setElevation) {
                let t = 0,
                  e = this.menu.parentMenu;
                for (; e; ) t++, (e = e.parentMenu);
                this.menu.setElevation(t);
              }
            }
            _resetMenu() {
              this._setIsMenuOpen(!1),
                this.restoreFocus &&
                  (this._openedBy ? this.triggersSubmenu() || this.focus(this._openedBy) : this.focus()),
                (this._openedBy = null);
            }
            _setIsMenuOpen(t) {
              (this._menuOpen = t),
                this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit(),
                this.triggersSubmenu() && (this._menuItemInstance._highlighted = t);
            }
            _checkMenu() {
              this.menu ||
                (function() {
                  throw Error(
                    'matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu="matMenu"></mat-menu>\n      <button [matMenuTriggerFor]="menu"></button>'
                  );
                })();
            }
            _createOverlay() {
              if (!this._overlayRef) {
                const t = this._getOverlayConfig();
                this._subscribeToPositions(t.positionStrategy),
                  (this._overlayRef = this._overlay.create(t)),
                  this._overlayRef.keydownEvents().subscribe();
              }
              return this._overlayRef;
            }
            _getOverlayConfig() {
              return new _o({
                positionStrategy: this._overlay
                  .position()
                  .flexibleConnectedTo(this._element)
                  .withLockedPosition()
                  .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),
                backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',
                scrollStrategy: this._scrollStrategy(),
                direction: this._dir
              });
            }
            _subscribeToPositions(t) {
              this.menu.setPositionClasses &&
                t.positionChanges.subscribe(t => {
                  this.menu.setPositionClasses(
                    'start' === t.connectionPair.overlayX ? 'after' : 'before',
                    'top' === t.connectionPair.overlayY ? 'below' : 'above'
                  );
                });
            }
            _setPosition(t) {
              let [e, n] = 'before' === this.menu.xPosition ? ['end', 'start'] : ['start', 'end'],
                [s, i] = 'above' === this.menu.yPosition ? ['bottom', 'top'] : ['top', 'bottom'],
                [r, o] = [s, i],
                [a, l] = [e, n],
                c = 0;
              this.triggersSubmenu()
                ? ((l = e = 'before' === this.menu.xPosition ? 'start' : 'end'),
                  (n = a = 'end' === e ? 'start' : 'end'),
                  (c = 'bottom' === s ? 8 : -8))
                : this.menu.overlapTrigger ||
                  ((r = 'top' === s ? 'bottom' : 'top'), (o = 'top' === i ? 'bottom' : 'top')),
                t.withPositions([
                  { originX: e, originY: r, overlayX: a, overlayY: s, offsetY: c },
                  { originX: n, originY: r, overlayX: l, overlayY: s, offsetY: c },
                  { originX: e, originY: o, overlayX: a, overlayY: i, offsetY: -c },
                  { originX: n, originY: o, overlayX: l, overlayY: i, offsetY: -c }
                ]);
            }
            _menuClosingActions() {
              const t = this._overlayRef.backdropClick(),
                e = this._overlayRef.detachments(),
                n = this._parentMenu ? this._parentMenu.closed : c(),
                s = this._parentMenu
                  ? this._parentMenu._hovered().pipe(
                      I(t => t !== this._menuItemInstance),
                      I(() => this._menuOpen)
                    )
                  : c();
              return Object(vs.a)(t, n, s, e);
            }
            _handleMousedown(t) {
              ga(t) ||
                ((this._openedBy = 0 === t.button ? 'mouse' : null), this.triggersSubmenu() && t.preventDefault());
            }
            _handleKeydown(t) {
              const e = t.keyCode;
              this.triggersSubmenu() &&
                ((e === dr && 'ltr' === this.dir) || (e === hr && 'rtl' === this.dir)) &&
                this.openMenu();
            }
            _handleClick(t) {
              this.triggersSubmenu() ? (t.stopPropagation(), this.openMenu()) : this.toggleMenu();
            }
            _handleHover() {
              this.triggersSubmenu() &&
                (this._hoverSubscription = this._parentMenu
                  ._hovered()
                  .pipe(
                    I(t => t === this._menuItemInstance && !t.disabled),
                    Ud(0, jr)
                  )
                  .subscribe(() => {
                    (this._openedBy = 'mouse'),
                      this.menu instanceof Zd && this.menu._isAnimating
                        ? this.menu._animationDone
                            .pipe(
                              Z(1),
                              Ud(0, jr),
                              Fi(this._parentMenu._hovered())
                            )
                            .subscribe(() => this.openMenu())
                        : this.openMenu();
                  }));
            }
            _getPortal() {
              return (
                (this._portal && this._portal.templateRef === this.menu.templateRef) ||
                  (this._portal = new nr(this.menu.templateRef, this._viewContainerRef)),
                this._portal
              );
            }
          })(),
        sp = (() => class {})(),
        ip = (() => class {})();
      var rp = s.qb({
        encapsulation: 2,
        styles: [
          ".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}@media (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}@media (-ms-high-contrast:active){.mat-menu-item-highlighted,.mat-menu-item.cdk-keyboard-focused,.mat-menu-item.cdk-program-focused{outline:dotted 1px}}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:'';display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}"
        ],
        data: {
          animation: [
            {
              type: 7,
              name: 'transformMenu',
              definitions: [
                {
                  type: 0,
                  name: 'void',
                  styles: { type: 6, styles: { opacity: 0, transform: 'scale(0.8)' }, offset: null },
                  options: void 0
                },
                {
                  type: 1,
                  expr: 'void => enter',
                  animation: {
                    type: 3,
                    steps: [
                      {
                        type: 11,
                        selector: '.mat-menu-content, .mat-mdc-menu-content',
                        animation: {
                          type: 4,
                          styles: { type: 6, styles: { opacity: 1 }, offset: null },
                          timings: '100ms linear'
                        },
                        options: null
                      },
                      {
                        type: 4,
                        styles: { type: 6, styles: { transform: 'scale(1)' }, offset: null },
                        timings: '120ms cubic-bezier(0, 0, 0.2, 1)'
                      }
                    ],
                    options: null
                  },
                  options: null
                },
                {
                  type: 1,
                  expr: '* => void',
                  animation: {
                    type: 4,
                    styles: { type: 6, styles: { opacity: 0 }, offset: null },
                    timings: '100ms 25ms linear'
                  },
                  options: null
                }
              ],
              options: {}
            },
            {
              type: 7,
              name: 'fadeInItems',
              definitions: [
                {
                  type: 0,
                  name: 'showing',
                  styles: { type: 6, styles: { opacity: 1 }, offset: null },
                  options: void 0
                },
                {
                  type: 1,
                  expr: 'void => *',
                  animation: [
                    { type: 6, styles: { opacity: 0 }, offset: null },
                    { type: 4, styles: null, timings: '400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)' }
                  ],
                  options: null
                }
              ],
              options: {}
            }
          ]
        }
      });
      function op(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              4,
              'div',
              [['class', 'mat-menu-panel'], ['role', 'menu'], ['tabindex', '-1']],
              [[24, '@transformMenu', 0]],
              [[null, 'keydown'], [null, 'click'], [null, '@transformMenu.start'], [null, '@transformMenu.done']],
              function(t, e, n) {
                var s = !0,
                  i = t.component;
                return (
                  'keydown' === e && (s = !1 !== i._handleKeydown(n) && s),
                  'click' === e && (s = !1 !== i.closed.emit('click') && s),
                  '@transformMenu.start' === e && (s = !1 !== i._onAnimationStart(n) && s),
                  '@transformMenu.done' === e && (s = !1 !== i._onAnimationDone(n) && s),
                  s
                );
              },
              null,
              null
            )),
            s.Fb(512, null, r.v, r.w, [s.r, s.s, s.k, s.D]),
            s.rb(2, 278528, null, 0, r.i, [r.v], { klass: [0, 'klass'], ngClass: [1, 'ngClass'] }, null),
            (t()(), s.sb(3, 0, null, null, 1, 'div', [['class', 'mat-menu-content']], null, null, null, null, null)),
            s.Cb(null, 0)
          ],
          function(t, e) {
            t(e, 2, 0, 'mat-menu-panel', e.component._classList);
          },
          function(t, e) {
            t(e, 0, 0, e.component._panelAnimationState);
          }
        );
      }
      function ap(t) {
        return s.Kb(
          2,
          [s.Gb(671088640, 1, { templateRef: 0 }), (t()(), s.hb(0, [[1, 2]], null, 0, null, op))],
          null,
          null
        );
      }
      var lp = s.qb({ encapsulation: 2, styles: [], data: {} });
      function cp(t) {
        return s.Kb(
          2,
          [
            s.Cb(null, 0),
            (t()(),
            s.sb(
              1,
              0,
              null,
              null,
              1,
              'div',
              [['class', 'mat-menu-ripple mat-ripple'], ['matRipple', '']],
              [[2, 'mat-ripple-unbounded', null]],
              null,
              null,
              null,
              null
            )),
            s.rb(
              2,
              212992,
              null,
              0,
              Za,
              [s.k, s.y, Zr, [2, Ga], [2, Du]],
              { disabled: [0, 'disabled'], trigger: [1, 'trigger'] },
              null
            )
          ],
          function(t, e) {
            var n = e.component;
            t(e, 2, 0, n.disableRipple || n.disabled, n._getHostElement());
          },
          function(t, e) {
            t(e, 1, 0, s.Db(e, 2).unbounded);
          }
        );
      }
      let hp = (() => class {})();
      class up {
        constructor(t = !1, e = 'all', n = '', s = '', i = 0) {
          (this.matches = t),
            (this.mediaQuery = e),
            (this.mqAlias = n),
            (this.suffix = s),
            (this.priority = i),
            (this.property = '');
        }
        clone() {
          return new up(this.matches, this.mediaQuery, this.mqAlias, this.suffix);
        }
      }
      let dp = (() => {
        class t {
          constructor() {
            this.stylesheet = new Map();
          }
          addStyleToElement(t, e, n) {
            const s = this.stylesheet.get(t);
            s ? s.set(e, n) : this.stylesheet.set(t, new Map([[e, n]]));
          }
          clearStyles() {
            this.stylesheet.clear();
          }
          getStyleForElement(t, e) {
            const n = this.stylesheet.get(t);
            let s = '';
            if (n) {
              const t = n.get(e);
              ('number' != typeof t && 'string' != typeof t) || (s = t + '');
            }
            return s;
          }
        }
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            factory: function() {
              return new t();
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      const pp = {
          addFlexToParent: !0,
          addOrientationBps: !1,
          disableDefaultBps: !1,
          disableVendorPrefixes: !1,
          serverLoaded: !1,
          useColumnBasisZero: !0,
          printWithBreakpoints: [],
          mediaTriggerAutoRestore: !0,
          ssrObserveBreakpoints: []
        },
        mp = new s.p('Flex Layout token, config options for the library', { providedIn: 'root', factory: () => pp }),
        fp = new s.p('FlexLayoutServerLoaded', { providedIn: 'root', factory: () => !1 }),
        gp = new s.p('Flex Layout token, collect all breakpoints into one provider', {
          providedIn: 'root',
          factory: () => null
        });
      function bp(t, e) {
        return (
          (t = t ? t.clone() : new up()),
          e && ((t.mqAlias = e.alias), (t.mediaQuery = e.mediaQuery), (t.suffix = e.suffix), (t.priority = e.priority)),
          t
        );
      }
      const _p = 'inline',
        yp = ['row', 'column', 'row-reverse', 'column-reverse'];
      function vp(t) {
        if (t)
          switch (t.toLowerCase()) {
            case 'reverse':
            case 'wrap-reverse':
            case 'reverse-wrap':
              t = 'wrap-reverse';
              break;
            case 'no':
            case 'none':
            case 'nowrap':
              t = 'nowrap';
              break;
            default:
              t = 'wrap';
          }
        return t;
      }
      class wp {
        constructor(t, e, n, s) {
          (this.elementRef = t),
            (this.styleBuilder = e),
            (this.styler = n),
            (this.marshal = s),
            (this.DIRECTIVE_KEY = ''),
            (this.inputs = []),
            (this.mru = {}),
            (this.destroySubject = new u.a()),
            (this.styleCache = new Map());
        }
        get parentElement() {
          return this.elementRef.nativeElement.parentElement;
        }
        get nativeElement() {
          return this.elementRef.nativeElement;
        }
        get activatedValue() {
          return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);
        }
        set activatedValue(t) {
          this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, t, this.marshal.activatedAlias);
        }
        ngOnChanges(t) {
          Object.keys(t).forEach(e => {
            if (-1 !== this.inputs.indexOf(e)) {
              const n = e
                .split('.')
                .slice(1)
                .join('.');
              this.setValue(t[e].currentValue, n);
            }
          });
        }
        ngOnDestroy() {
          this.destroySubject.next(), this.destroySubject.complete(), this.marshal.releaseElement(this.nativeElement);
        }
        init(t = []) {
          this.marshal.init(
            this.elementRef.nativeElement,
            this.DIRECTIVE_KEY,
            this.updateWithValue.bind(this),
            this.clearStyles.bind(this),
            t
          );
        }
        addStyles(t, e) {
          const n = this.styleBuilder,
            s = n.shouldCache;
          let i = this.styleCache.get(t);
          (i && s) || ((i = n.buildStyles(t, e)), s && this.styleCache.set(t, i)),
            (this.mru = Object.assign({}, i)),
            this.applyStyleToElement(i),
            n.sideEffect(t, i, e);
        }
        clearStyles() {
          Object.keys(this.mru).forEach(t => {
            this.mru[t] = '';
          }),
            this.applyStyleToElement(this.mru),
            (this.mru = {});
        }
        triggerUpdate() {
          this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);
        }
        getFlexFlowDirection(t, e = !1) {
          if (t) {
            const [n, s] = this.styler.getFlowDirection(t);
            if (!s && e) {
              const e = (function(t) {
                let [e, n, s] = (function(t) {
                  t = t ? t.toLowerCase() : '';
                  let [e, n, s] = t.split(' ');
                  return (
                    yp.find(t => t === e) || (e = yp[0]),
                    n === _p && ((n = s !== _p ? s : ''), (s = _p)),
                    [e, vp(n), !!s]
                  );
                })(t);
                return (function(t, e = null, n = !1) {
                  return {
                    display: n ? 'inline-flex' : 'flex',
                    'box-sizing': 'border-box',
                    'flex-direction': t,
                    'flex-wrap': e || null
                  };
                })(e, n, s);
              })(n);
              this.styler.applyStyleToElements(e, [t]);
            }
            return n.trim();
          }
          return 'row';
        }
        applyStyleToElement(t, e, n = this.nativeElement) {
          this.styler.applyStyleToElement(n, t, e);
        }
        setValue(t, e) {
          this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, t, e);
        }
        updateWithValue(t) {
          this.addStyles(t);
        }
      }
      const Cp = [
          { alias: 'xs', mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.99px)', priority: 1e3 },
          { alias: 'sm', mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.99px)', priority: 900 },
          { alias: 'md', mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.99px)', priority: 800 },
          { alias: 'lg', mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.99px)', priority: 700 },
          { alias: 'xl', mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.99px)', priority: 600 },
          { alias: 'lt-sm', overlapping: !0, mediaQuery: 'screen and (max-width: 599.99px)', priority: 950 },
          { alias: 'lt-md', overlapping: !0, mediaQuery: 'screen and (max-width: 959.99px)', priority: 850 },
          { alias: 'lt-lg', overlapping: !0, mediaQuery: 'screen and (max-width: 1279.99px)', priority: 750 },
          { alias: 'lt-xl', overlapping: !0, priority: 650, mediaQuery: 'screen and (max-width: 1919.99px)' },
          { alias: 'gt-xs', overlapping: !0, mediaQuery: 'screen and (min-width: 600px)', priority: -950 },
          { alias: 'gt-sm', overlapping: !0, mediaQuery: 'screen and (min-width: 960px)', priority: -850 },
          { alias: 'gt-md', overlapping: !0, mediaQuery: 'screen and (min-width: 1280px)', priority: -750 },
          { alias: 'gt-lg', overlapping: !0, mediaQuery: 'screen and (min-width: 1920px)', priority: -650 }
        ],
        xp = '(orientation: portrait) and (max-width: 599.99px)',
        Ep = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.99px)',
        Sp = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.99px)',
        kp = '(orientation: portrait) and (min-width: 840px)',
        Dp = '(orientation: landscape) and (min-width: 1280px)',
        Ap = {
          HANDSET: `${xp}, (orientation: landscape) and (max-width: 959.99px)`,
          TABLET: `${Ep} , ${Sp}`,
          WEB: `${kp}, ${Dp} `,
          HANDSET_PORTRAIT: `${xp}`,
          TABLET_PORTRAIT: `${Ep} `,
          WEB_PORTRAIT: `${kp}`,
          HANDSET_LANDSCAPE: '(orientation: landscape) and (max-width: 959.99px)]',
          TABLET_LANDSCAPE: `${Sp}`,
          WEB_LANDSCAPE: `${Dp}`
        },
        Tp = [
          { alias: 'handset', priority: 2e3, mediaQuery: Ap.HANDSET },
          { alias: 'handset.landscape', priority: 2e3, mediaQuery: Ap.HANDSET_LANDSCAPE },
          { alias: 'handset.portrait', priority: 2e3, mediaQuery: Ap.HANDSET_PORTRAIT },
          { alias: 'tablet', priority: 2100, mediaQuery: Ap.TABLET },
          { alias: 'tablet.landscape', priority: 2100, mediaQuery: Ap.TABLET },
          { alias: 'tablet.portrait', priority: 2100, mediaQuery: Ap.TABLET_PORTRAIT },
          { alias: 'web', priority: 2200, mediaQuery: Ap.WEB, overlapping: !0 },
          { alias: 'web.landscape', priority: 2200, mediaQuery: Ap.WEB_LANDSCAPE, overlapping: !0 },
          { alias: 'web.portrait', priority: 2200, mediaQuery: Ap.WEB_PORTRAIT, overlapping: !0 }
        ],
        Op = /(\.|-|_)/g;
      function Ip(t) {
        let e = t.length > 0 ? t.charAt(0) : '',
          n = t.length > 1 ? t.slice(1) : '';
        return e.toUpperCase() + n;
      }
      const Rp = new s.p('Token (@angular/flex-layout) Breakpoints', {
        providedIn: 'root',
        factory: () => {
          const t = Object(s.V)(gp),
            e = Object(s.V)(mp),
            n = [].concat.apply([], (t || []).map(t => (Array.isArray(t) ? t : [t])));
          return (function(t, e = []) {
            const n = {};
            return (
              t.forEach(t => {
                n[t.alias] = t;
              }),
              e.forEach(t => {
                n[t.alias]
                  ? (function(t, ...e) {
                      if (null == t) throw TypeError('Cannot convert undefined or null to object');
                      for (let n of e) if (null != n) for (let e in n) n.hasOwnProperty(e) && (t[e] = n[e]);
                    })(n[t.alias], t)
                  : (n[t.alias] = t);
              }),
              (s = Object.keys(n).map(t => n[t])).forEach(t => {
                t.suffix ||
                  ((t.suffix = (function(e) {
                    return t.alias
                      .replace(Op, '|')
                      .split('|')
                      .map(Ip)
                      .join('');
                  })()),
                  (t.overlapping = !!t.overlapping));
              }),
              s
            );
            var s;
          })((e.disableDefaultBps ? [] : Cp).concat(e.addOrientationBps ? Tp : []), n);
        }
      });
      function Pp(t, e) {
        return ((e && e.priority) || 0) - ((t && t.priority) || 0);
      }
      function Np(t, e) {
        return (t.priority || 0) - (e.priority || 0);
      }
      let Mp = (() => {
          class t {
            constructor(t) {
              (this.findByMap = new Map()), (this.items = [...t].sort(Np));
            }
            findByAlias(t) {
              return t ? this.findWithPredicate(t, e => e.alias == t) : null;
            }
            findByQuery(t) {
              return this.findWithPredicate(t, e => e.mediaQuery == t);
            }
            get overlappings() {
              return this.items.filter(t => 1 == t.overlapping);
            }
            get aliases() {
              return this.items.map(t => t.alias);
            }
            get suffixes() {
              return this.items.map(t => (t.suffix ? t.suffix : ''));
            }
            findWithPredicate(t, e) {
              let n = this.findByMap.get(t);
              return n || ((n = this.items.find(e) || null), this.findByMap.set(t, n)), n || null;
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(Rp));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        Lp = (() => {
          class t {
            constructor(t, e, n) {
              (this._zone = t),
                (this._platformId = e),
                (this._document = n),
                (this.source = new p(new up(!0))),
                (this.registry = new Map()),
                (this._observable$ = this.source.asObservable());
            }
            get activations() {
              const t = [];
              return (
                this.registry.forEach((e, n) => {
                  e.matches && t.push(n);
                }),
                t
              );
            }
            isActive(t) {
              const e = this.registry.get(t);
              return !!e && e.matches;
            }
            observe(t, e = !1) {
              if (t && t.length) {
                const n = this._observable$.pipe(I(n => !e || t.indexOf(n.mediaQuery) > -1)),
                  s = new m.a(e => {
                    const n = this.registerQuery(t);
                    if (n.length) {
                      const t = n.pop();
                      n.forEach(t => {
                        e.next(t);
                      }),
                        this.source.next(t);
                    }
                    e.complete();
                  });
                return Object(vs.a)(s, n);
              }
              return this._observable$;
            }
            registerQuery(t) {
              const e = Array.isArray(t) ? t : [t],
                n = [];
              return (
                (function(t, e) {
                  const n = t.filter(t => !jp[t]);
                  if (n.length > 0) {
                    const t = n.join(', ');
                    try {
                      const i = e.createElement('style');
                      i.setAttribute('type', 'text/css'),
                        i.styleSheet ||
                          i.appendChild(
                            e.createTextNode(
                              `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${t} {.fx-query-test{ }}\n`
                            )
                          ),
                        e.head.appendChild(i),
                        n.forEach(t => (jp[t] = i));
                    } catch (s) {
                      console.error(s);
                    }
                  }
                })(e, this._document),
                e.forEach(t => {
                  let e = this.registry.get(t);
                  e ||
                    ((e = this.buildMQL(t)).addListener(e => {
                      this._zone.run(() => this.source.next(new up(e.matches, t)));
                    }),
                    this.registry.set(t, e)),
                    e.matches && n.push(new up(!0, t));
                }),
                n
              );
            }
            buildMQL(t) {
              return (function(t, e) {
                return e && window.matchMedia('all').addListener
                  ? window.matchMedia(t)
                  : { matches: 'all' === t || '' === t, media: t, addListener: () => {}, removeListener: () => {} };
              })(t, Object(r.t)(this._platformId));
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t(Object(s.Pb)(s.y), Object(s.Pb)(s.A), Object(s.Pb)(r.d));
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })();
      const jp = {},
        Fp = 'print',
        Bp = { alias: Fp, mediaQuery: Fp, priority: 1e3 };
      let Vp = (() => {
        class t {
          constructor(t, e) {
            (this.breakpoints = t),
              (this.layoutConfig = e),
              (this.isPrinting = !1),
              (this.queue = new Up()),
              (this.deactivations = []);
          }
          withPrintQuery(t) {
            return [...t, Fp];
          }
          isPrintEvent(t) {
            return t.mediaQuery.startsWith(Fp);
          }
          get printAlias() {
            return this.layoutConfig.printWithBreakpoints || [];
          }
          get printBreakPoints() {
            return this.printAlias.map(t => this.breakpoints.findByAlias(t)).filter(t => null !== t);
          }
          getEventBreakpoints({ mediaQuery: t }) {
            const e = this.breakpoints.findByQuery(t);
            return (e ? [...this.printBreakPoints, e] : this.printBreakPoints).sort(Pp);
          }
          updateEvent(t) {
            let e = this.breakpoints.findByQuery(t.mediaQuery);
            return (
              this.isPrintEvent(t) && ((e = this.getEventBreakpoints(t)[0]), (t.mediaQuery = e ? e.mediaQuery : '')),
              bp(t, e)
            );
          }
          interceptEvents(t) {
            return e => {
              this.isPrintEvent(e)
                ? e.matches && !this.isPrinting
                  ? (this.startPrinting(t, this.getEventBreakpoints(e)), t.updateStyles())
                  : !e.matches && this.isPrinting && (this.stopPrinting(t), t.updateStyles())
                : this.collectActivations(e);
            };
          }
          blockPropagation() {
            return t => !(this.isPrinting || this.isPrintEvent(t));
          }
          startPrinting(t, e) {
            (this.isPrinting = !0), (t.activatedBreakpoints = this.queue.addPrintBreakpoints(e));
          }
          stopPrinting(t) {
            (t.activatedBreakpoints = this.deactivations),
              (this.deactivations = []),
              this.queue.clear(),
              (this.isPrinting = !1);
          }
          collectActivations(t) {
            if (!this.isPrinting)
              if (t.matches) this.deactivations = [];
              else {
                const e = this.breakpoints.findByQuery(t.mediaQuery);
                e && (this.deactivations.push(e), this.deactivations.sort(Pp));
              }
          }
        }
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            factory: function() {
              return new t(Object(s.Pb)(Mp), Object(s.Pb)(mp));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      class Up {
        constructor() {
          this.printBreakpoints = [];
        }
        addPrintBreakpoints(t) {
          return t.push(Bp), t.sort(Pp), t.forEach(t => this.addBreakpoint(t)), this.printBreakpoints;
        }
        addBreakpoint(t) {
          t &&
            void 0 === this.printBreakpoints.find(e => e.mediaQuery === t.mediaQuery) &&
            (this.printBreakpoints = (function(t) {
              return !!t && t.mediaQuery.startsWith(Fp);
            })(t)
              ? [t, ...this.printBreakpoints]
              : [...this.printBreakpoints, t]);
        }
        clear() {
          this.printBreakpoints = [];
        }
      }
      let Hp = (() => {
        class t {
          constructor(t, e, n) {
            (this.breakpoints = t),
              (this.matchMedia = e),
              (this.hook = n),
              (this.filterOverlaps = !1),
              (this.destroyed$ = new u.a()),
              (this._media$ = this.watchActivations()),
              (this.media$ = this._media$.pipe(
                I(t => t.length > 0),
                Object(D.a)(t => t[0])
              ));
          }
          ngOnDestroy() {
            this.destroyed$.next(), this.destroyed$.complete();
          }
          asObservable() {
            return this._media$;
          }
          isActive(t) {
            return (function(t) {
              return Array.isArray(t) ? t : [t];
            })(t)
              .map(t => t.split(','))
              .reduce((t, e) => t.concat(e))
              .map(t => t.trim())
              .some(t => {
                const e = (function(t, e) {
                  const n = e.findByAlias(t) || e.findByQuery(t);
                  return n ? n.mediaQuery : t;
                })(t, this.breakpoints);
                return this.matchMedia.isActive(e);
              });
          }
          watchActivations() {
            const t = this.breakpoints.items.map(t => t.mediaQuery);
            return this.buildObservable(t);
          }
          buildObservable(t) {
            return this.matchMedia.observe(this.hook.withPrintQuery(t)).pipe(
              I(t => t.matches),
              Go(0, jr),
              it(t => c(this.findAllActivations())),
              Object(D.a)(t =>
                this.filterOverlaps
                  ? t.filter(t => {
                      const e = this.breakpoints.findByQuery(t.mediaQuery);
                      return !e || !e.overlapping;
                    })
                  : t
              ),
              I(t => t.filter(t => t.mediaQuery.length > 0).length > 0),
              Fi(this.destroyed$)
            );
          }
          findAllActivations() {
            return this.matchMedia.activations
              .map(t => new up(!0, t))
              .map(t => (this.hook.isPrintEvent(t) ? this.hook.updateEvent(t) : t))
              .map(t => bp(t, this.breakpoints.findByQuery(t.mediaQuery)))
              .sort(Pp);
          }
        }
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            factory: function() {
              return new t(Object(s.Pb)(Mp), Object(s.Pb)(Lp), Object(s.Pb)(Vp));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      function zp(t) {
        for (let e in t) {
          let n = t[e] || '';
          switch (e) {
            case 'display':
              t.display =
                'flex' === n
                  ? ['-webkit-flex', 'flex']
                  : 'inline-flex' === n
                  ? ['-webkit-inline-flex', 'inline-flex']
                  : n;
              break;
            case 'align-items':
            case 'align-self':
            case 'align-content':
            case 'flex':
            case 'flex-basis':
            case 'flex-flow':
            case 'flex-grow':
            case 'flex-shrink':
            case 'flex-wrap':
            case 'justify-content':
              t['-webkit-' + e] = n;
              break;
            case 'flex-direction':
              (t['-webkit-flex-direction'] = n = n || 'row'), (t['flex-direction'] = n);
              break;
            case 'order':
              t.order = t['-webkit-' + e] = isNaN(+n) ? '0' : n;
          }
        }
        return t;
      }
      let $p = (() => {
        class t {
          constructor(t, e, n, s) {
            (this._serverStylesheet = t),
              (this._serverModuleLoaded = e),
              (this._platformId = n),
              (this.layoutConfig = s);
          }
          applyStyleToElement(t, e, n = null) {
            let s = {};
            'string' == typeof e && ((s[e] = n), (e = s)),
              (s = this.layoutConfig.disableVendorPrefixes ? e : zp(e)),
              this._applyMultiValueStyleToElement(s, t);
          }
          applyStyleToElements(t, e = []) {
            const n = this.layoutConfig.disableVendorPrefixes ? t : zp(t);
            e.forEach(t => {
              this._applyMultiValueStyleToElement(n, t);
            });
          }
          getFlowDirection(t) {
            let e = this.lookupStyle(t, 'flex-direction');
            return [
              e || 'row',
              this.lookupInlineStyle(t, 'flex-direction') || (Object(r.u)(this._platformId) && this._serverModuleLoaded)
                ? e
                : ''
            ];
          }
          lookupAttributeValue(t, e) {
            return t.getAttribute(e) || '';
          }
          lookupInlineStyle(t, e) {
            return Object(r.t)(this._platformId) ? t.style.getPropertyValue(e) : this._getServerStyle(t, e);
          }
          lookupStyle(t, e, n = !1) {
            let s = '';
            return (
              t &&
                ((s = this.lookupInlineStyle(t, e)) ||
                  (Object(r.t)(this._platformId)
                    ? n || (s = getComputedStyle(t).getPropertyValue(e))
                    : this._serverModuleLoaded && (s = this._serverStylesheet.getStyleForElement(t, e)))),
              s ? s.trim() : ''
            );
          }
          _applyMultiValueStyleToElement(t, e) {
            Object.keys(t)
              .sort()
              .forEach(n => {
                const s = t[n],
                  i = Array.isArray(s) ? s : [s];
                i.sort();
                for (let t of i)
                  (t = t ? t + '' : ''),
                    Object(r.t)(this._platformId) || !this._serverModuleLoaded
                      ? Object(r.t)(this._platformId)
                        ? e.style.setProperty(n, t)
                        : this._setServerStyle(e, n, t)
                      : this._serverStylesheet.addStyleToElement(e, n, t);
              });
          }
          _setServerStyle(t, e, n) {
            e = e.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
            const s = this._readStyleAttribute(t);
            (s[e] = n || ''), this._writeStyleAttribute(t, s);
          }
          _getServerStyle(t, e) {
            return this._readStyleAttribute(t)[e] || '';
          }
          _readStyleAttribute(t) {
            const e = {},
              n = t.getAttribute('style');
            if (n) {
              const t = n.split(/;+/g);
              for (let n = 0; n < t.length; n++) {
                const s = t[n].trim();
                if (s.length > 0) {
                  const t = s.indexOf(':');
                  if (-1 === t) throw new Error(`Invalid CSS style: ${s}`);
                  e[s.substr(0, t).trim()] = s.substr(t + 1).trim();
                }
              }
            }
            return e;
          }
          _writeStyleAttribute(t, e) {
            let n = '';
            for (const s in e) e[s] && (n += s + ':' + e[s] + ';');
            t.setAttribute('style', n);
          }
        }
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            factory: function() {
              return new t(Object(s.Pb)(dp, 8), Object(s.Pb)(fp, 8), Object(s.Pb)(s.A), Object(s.Pb)(mp));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      class qp {
        constructor() {
          this.shouldCache = !0;
        }
        sideEffect(t, e, n) {}
      }
      function Wp(t, e = '1', n = '1') {
        let s = [e, n, t],
          i = t.indexOf('calc');
        if (i > 0) {
          s[2] = Kp(t.substring(i).trim());
          let e = t
            .substr(0, i)
            .trim()
            .split(' ');
          2 == e.length && ((s[0] = e[0]), (s[1] = e[1]));
        } else if (0 == i) s[2] = Kp(t.trim());
        else {
          let i = t.split(' ');
          s = 3 === i.length ? i : [e, n, t];
        }
        return s;
      }
      function Kp(t) {
        return t.replace(/[\s]/g, '').replace(/[\/\*\+\-]/g, ' $& ');
      }
      let Yp = (() => {
        class t {
          constructor(t, e, n) {
            (this.matchMedia = t),
              (this.breakpoints = e),
              (this.hook = n),
              (this.activatedBreakpoints = []),
              (this.elementMap = new Map()),
              (this.elementKeyMap = new WeakMap()),
              (this.watcherMap = new WeakMap()),
              (this.updateMap = new WeakMap()),
              (this.clearMap = new WeakMap()),
              (this.subject = new u.a()),
              this.observeActivations();
          }
          get activatedAlias() {
            return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';
          }
          onMediaChange(t) {
            const e = this.findByQuery(t.mediaQuery);
            e &&
              ((t = bp(t, e)).matches && -1 === this.activatedBreakpoints.indexOf(e)
                ? (this.activatedBreakpoints.push(e), this.activatedBreakpoints.sort(Pp), this.updateStyles())
                : t.matches ||
                  -1 === this.activatedBreakpoints.indexOf(e) ||
                  (this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(e), 1),
                  this.activatedBreakpoints.sort(Pp),
                  this.updateStyles()));
          }
          init(t, e, n, s, i = []) {
            Qp(this.updateMap, t, e, n),
              Qp(this.clearMap, t, e, s),
              this.buildElementKeyMap(t, e),
              this.watchExtraTriggers(t, e, i);
          }
          getValue(t, e, n) {
            const s = this.elementMap.get(t);
            if (s) {
              const t = void 0 !== n ? s.get(n) : this.getActivatedValues(s, e);
              if (t) return t.get(e);
            }
          }
          hasValue(t, e) {
            const n = this.elementMap.get(t);
            if (n) {
              const t = this.getActivatedValues(n, e);
              if (t) return void 0 !== t.get(e) || !1;
            }
            return !1;
          }
          setValue(t, e, n, s) {
            let i = this.elementMap.get(t);
            if (i) {
              const r = (i.get(s) || new Map()).set(e, n);
              i.set(s, r), this.elementMap.set(t, i);
            } else (i = new Map().set(s, new Map().set(e, n))), this.elementMap.set(t, i);
            const r = this.getValue(t, e);
            void 0 !== r && this.updateElement(t, e, r);
          }
          trackValue(t, e) {
            return this.subject.asObservable().pipe(I(n => n.element === t && n.key === e));
          }
          updateStyles() {
            this.elementMap.forEach((t, e) => {
              const n = new Set(this.elementKeyMap.get(e));
              let s = this.getActivatedValues(t);
              s &&
                s.forEach((t, s) => {
                  this.updateElement(e, s, t), n.delete(s);
                }),
                n.forEach(n => {
                  if ((s = this.getActivatedValues(t, n))) {
                    const t = s.get(n);
                    this.updateElement(e, n, t);
                  } else this.clearElement(e, n);
                });
            });
          }
          clearElement(t, e) {
            const n = this.clearMap.get(t);
            if (n) {
              const s = n.get(e);
              s && (s(), this.subject.next({ element: t, key: e, value: '' }));
            }
          }
          updateElement(t, e, n) {
            const s = this.updateMap.get(t);
            if (s) {
              const i = s.get(e);
              i && (i(n), this.subject.next({ element: t, key: e, value: n }));
            }
          }
          releaseElement(t) {
            const e = this.watcherMap.get(t);
            e && (e.forEach(t => t.unsubscribe()), this.watcherMap.delete(t));
            const n = this.elementMap.get(t);
            n && (n.forEach((t, e) => n.delete(e)), this.elementMap.delete(t));
          }
          triggerUpdate(t, e) {
            const n = this.elementMap.get(t);
            if (n) {
              const s = this.getActivatedValues(n, e);
              s && (e ? this.updateElement(t, e, s.get(e)) : s.forEach((e, n) => this.updateElement(t, n, e)));
            }
          }
          buildElementKeyMap(t, e) {
            let n = this.elementKeyMap.get(t);
            n || ((n = new Set()), this.elementKeyMap.set(t, n)), n.add(e);
          }
          watchExtraTriggers(t, e, n) {
            if (n && n.length) {
              let s = this.watcherMap.get(t);
              if ((s || ((s = new Map()), this.watcherMap.set(t, s)), !s.get(e))) {
                const i = Object(vs.a)(...n).subscribe(() => {
                  const n = this.getValue(t, e);
                  this.updateElement(t, e, n);
                });
                s.set(e, i);
              }
            }
          }
          findByQuery(t) {
            return this.breakpoints.findByQuery(t);
          }
          getActivatedValues(t, e) {
            for (let s = 0; s < this.activatedBreakpoints.length; s++) {
              const n = t.get(this.activatedBreakpoints[s].alias);
              if (n && (void 0 === e || n.has(e))) return n;
            }
            const n = t.get('');
            return void 0 === e || (n && n.has(e)) ? n : void 0;
          }
          observeActivations() {
            const t = this.breakpoints.items.map(t => t.mediaQuery);
            this.matchMedia
              .observe(this.hook.withPrintQuery(t))
              .pipe(
                bt(this.hook.interceptEvents(this)),
                I(this.hook.blockPropagation())
              )
              .subscribe(this.onMediaChange.bind(this));
          }
        }
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            factory: function() {
              return new t(Object(s.Pb)(Lp), Object(s.Pb)(Mp), Object(s.Pb)(Vp));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      function Qp(t, e, n, s) {
        if (void 0 !== s) {
          let i = t.get(e);
          i || ((i = new Map()), t.set(e, i)), i.set(n, s);
        }
      }
      const Gp = 'inline',
        Zp = ['row', 'column', 'row-reverse', 'column-reverse'];
      function Xp(t) {
        let [e] = (function(t) {
          t = t ? t.toLowerCase() : '';
          let [e, n, s] = t.split(' ');
          return Zp.find(t => t === e) || (e = Zp[0]), n === Gp && ((n = s !== Gp ? s : ''), (s = Gp)), [e, Jp(n), !!s];
        })(t);
        return e.indexOf('row') > -1;
      }
      function Jp(t) {
        if (t)
          switch (t.toLowerCase()) {
            case 'reverse':
            case 'wrap-reverse':
            case 'reverse-wrap':
              t = 'wrap-reverse';
              break;
            case 'no':
            case 'none':
            case 'nowrap':
              t = 'nowrap';
              break;
            default:
              t = 'wrap';
          }
        return t;
      }
      function tm(t, ...e) {
        if (null == t) throw TypeError('Cannot convert undefined or null to object');
        for (let n of e) if (null != n) for (let e in n) n.hasOwnProperty(e) && (t[e] = n[e]);
        return t;
      }
      let em = (() => {
        class t extends qp {
          constructor(t) {
            super(), (this.layoutConfig = t);
          }
          buildStyles(t, e) {
            let [n, s, ...i] = t.split(' '),
              r = i.join(' ');
            const o = e.direction.indexOf('column') > -1 ? 'column' : 'row',
              a = Xp(o) ? 'max-width' : 'max-height',
              l = Xp(o) ? 'min-width' : 'min-height',
              c = String(r).indexOf('calc') > -1,
              h = c || 'auto' === r,
              u = String(r).indexOf('%') > -1 && !c,
              d =
                String(r).indexOf('px') > -1 ||
                String(r).indexOf('rem') > -1 ||
                String(r).indexOf('em') > -1 ||
                String(r).indexOf('vw') > -1 ||
                String(r).indexOf('vh') > -1;
            let p = c || d;
            s = '0' == s ? 0 : s;
            const m = !(n = '0' == n ? 0 : n) && !s;
            let f = {};
            const g = { 'max-width': null, 'max-height': null, 'min-width': null, 'min-height': null };
            switch (r || '') {
              case '':
                const t = !1 !== this.layoutConfig.useColumnBasisZero;
                r = 'row' === o ? '0%' : t ? '0.000000001px' : 'auto';
                break;
              case 'initial':
              case 'nogrow':
                (n = 0), (r = 'auto');
                break;
              case 'grow':
                r = '100%';
                break;
              case 'noshrink':
                (s = 0), (r = 'auto');
                break;
              case 'auto':
                break;
              case 'none':
                (n = 0), (s = 0), (r = 'auto');
                break;
              default:
                p || u || isNaN(r) || (r += '%'),
                  '0%' === r && (p = !0),
                  '0px' === r && (r = '0%'),
                  (f = tm(
                    g,
                    c
                      ? { 'flex-grow': n, 'flex-shrink': s, 'flex-basis': p ? r : '100%' }
                      : { flex: `${n} ${s} ${p ? r : '100%'}` }
                  ));
            }
            return (
              f.flex ||
                f['flex-grow'] ||
                (f = tm(g, c ? { 'flex-grow': n, 'flex-shrink': s, 'flex-basis': r } : { flex: `${n} ${s} ${r}` })),
              '0%' !== r &&
                '0px' !== r &&
                '0.000000001px' !== r &&
                'auto' !== r &&
                ((f[l] = m || (p && n) ? r : null), (f[a] = m || (!h && s) ? r : null)),
              f[l] || f[a]
                ? e.hasWrap &&
                  (f[c ? 'flex-basis' : 'flex'] = f[a]
                    ? c
                      ? f[a]
                      : `${n} ${s} ${f[a]}`
                    : c
                    ? f[l]
                    : `${n} ${s} ${f[l]}`)
                : (f = tm(g, c ? { 'flex-grow': n, 'flex-shrink': s, 'flex-basis': r } : { flex: `${n} ${s} ${r}` })),
              tm(f, { 'box-sizing': 'border-box' })
            );
          }
        }
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            factory: function() {
              return new t(Object(s.Pb)(mp));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      const nm = [
        'fxFlex',
        'fxFlex.xs',
        'fxFlex.sm',
        'fxFlex.md',
        'fxFlex.lg',
        'fxFlex.xl',
        'fxFlex.lt-sm',
        'fxFlex.lt-md',
        'fxFlex.lt-lg',
        'fxFlex.lt-xl',
        'fxFlex.gt-xs',
        'fxFlex.gt-sm',
        'fxFlex.gt-md',
        'fxFlex.gt-lg'
      ];
      let sm = (() =>
          class extends wp {
            constructor(t, e, n, s, i) {
              super(t, s, e, i),
                (this.elRef = t),
                (this.styleUtils = e),
                (this.layoutConfig = n),
                (this.styleBuilder = s),
                (this.marshal = i),
                (this.DIRECTIVE_KEY = 'flex'),
                (this.direction = ''),
                (this.wrap = !1),
                (this.flexGrow = '1'),
                (this.flexShrink = '1'),
                this.init(),
                this.parentElement &&
                  (this.marshal
                    .trackValue(this.parentElement, 'layout')
                    .pipe(Fi(this.destroySubject))
                    .subscribe(this.onLayoutChange.bind(this)),
                  this.marshal
                    .trackValue(this.nativeElement, 'layout-align')
                    .pipe(Fi(this.destroySubject))
                    .subscribe(this.triggerReflow.bind(this)));
            }
            get shrink() {
              return this.flexShrink;
            }
            set shrink(t) {
              (this.flexShrink = t || '1'), this.triggerReflow();
            }
            get grow() {
              return this.flexGrow;
            }
            set grow(t) {
              (this.flexGrow = t || '1'), this.triggerReflow();
            }
            onLayoutChange(t) {
              const e = t.value.split(' ');
              (this.direction = e[0]), (this.wrap = void 0 !== e[1] && 'wrap' === e[1]), this.triggerUpdate();
            }
            updateWithValue(t) {
              this.direction ||
                (this.direction = this.getFlexFlowDirection(
                  this.parentElement,
                  !1 !== this.layoutConfig.addFlexToParent
                ));
              const e = this.direction,
                n = e.startsWith('row'),
                s = this.wrap;
              n && s
                ? (this.styleCache = am)
                : n && !s
                ? (this.styleCache = rm)
                : !n && s
                ? (this.styleCache = lm)
                : n || s || (this.styleCache = om);
              const i = Wp(String(t).replace(';', ''), this.flexGrow, this.flexShrink);
              this.addStyles(i.join(' '), { direction: e, hasWrap: s });
            }
            triggerReflow() {
              const t = this.activatedValue;
              if (void 0 !== t) {
                const e = Wp(t, this.flexGrow, this.flexShrink);
                this.marshal.updateElement(this.nativeElement, this.DIRECTIVE_KEY, e.join(' '));
              }
            }
          })(),
        im = (() =>
          class extends sm {
            constructor() {
              super(...arguments), (this.inputs = nm);
            }
          })();
      const rm = new Map(),
        om = new Map(),
        am = new Map(),
        lm = new Map(),
        cm = { margin: 0, width: '100%', height: '100%', 'min-width': '100%', 'min-height': '100%' };
      let hm = (() => {
          class t extends qp {
            buildStyles(t) {
              return cm;
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t();
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        um = (() =>
          class extends wp {
            constructor(t, e, n, s) {
              super(t, n, e, s),
                (this.elRef = t),
                (this.styleUtils = e),
                (this.styleBuilder = n),
                (this.marshal = s),
                (this.styleCache = dm),
                this.addStyles('');
            }
          })();
      const dm = new Map();
      let pm = (() => class {})();
      function mm(t) {
        throw Error(`A drawer was already declared for 'position="${t}"'`);
      }
      const fm = new s.p('MAT_DRAWER_DEFAULT_AUTOSIZE', {
        providedIn: 'root',
        factory: function() {
          return !1;
        }
      });
      let gm = (() =>
          class extends ro {
            constructor(t, e, n, s, i) {
              super(n, s, i), (this._changeDetectorRef = t), (this._container = e);
            }
            ngAfterContentInit() {
              this._container._contentMarginChanges.subscribe(() => {
                this._changeDetectorRef.markForCheck();
              });
            }
          })(),
        bm = (() =>
          class {
            constructor(t, e, n, i, r, o) {
              (this._elementRef = t),
                (this._focusTrapFactory = e),
                (this._focusMonitor = n),
                (this._platform = i),
                (this._ngZone = r),
                (this._doc = o),
                (this._elementFocusedBeforeDrawerWasOpened = null),
                (this._enableAnimations = !1),
                (this._position = 'start'),
                (this._mode = 'over'),
                (this._disableClose = !1),
                (this._autoFocus = !0),
                (this._animationStarted = new u.a()),
                (this._animationEnd = new u.a()),
                (this._animationState = 'void'),
                (this.openedChange = new s.m(!0)),
                (this._destroyed = new u.a()),
                (this.onPositionChanged = new s.m()),
                (this._modeChanged = new u.a()),
                (this._opened = !1),
                this.openedChange.subscribe(t => {
                  t
                    ? (this._doc && (this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement),
                      this._isFocusTrapEnabled && this._focusTrap && this._trapFocus())
                    : this._restoreFocus();
                }),
                this._ngZone.runOutsideAngular(() => {
                  Dr(this._elementRef.nativeElement, 'keydown')
                    .pipe(
                      I(t => t.keyCode === cr && !this.disableClose && !_r(t)),
                      Fi(this._destroyed)
                    )
                    .subscribe(t =>
                      this._ngZone.run(() => {
                        this.close(), t.stopPropagation(), t.preventDefault();
                      })
                    );
                }),
                this._animationEnd
                  .pipe(
                    (function(t, e) {
                      return e => e.lift(new Fr(t, void 0));
                    })((t, e) => t.fromState === e.fromState && t.toState === e.toState)
                  )
                  .subscribe(t => {
                    const { fromState: e, toState: n } = t;
                    ((0 === n.indexOf('open') && 'void' === e) || ('void' === n && 0 === e.indexOf('open'))) &&
                      this.openedChange.emit(this._opened);
                  });
            }
            get position() {
              return this._position;
            }
            set position(t) {
              (t = 'end' === t ? 'end' : 'start') != this._position &&
                ((this._position = t), this.onPositionChanged.emit());
            }
            get mode() {
              return this._mode;
            }
            set mode(t) {
              (this._mode = t), this._modeChanged.next();
            }
            get disableClose() {
              return this._disableClose;
            }
            set disableClose(t) {
              this._disableClose = Cr(t);
            }
            get autoFocus() {
              return this._autoFocus;
            }
            set autoFocus(t) {
              this._autoFocus = Cr(t);
            }
            get _openedStream() {
              return this.openedChange.pipe(
                I(t => t),
                Object(D.a)(() => {})
              );
            }
            get openedStart() {
              return this._animationStarted.pipe(
                I(t => t.fromState !== t.toState && 0 === t.toState.indexOf('open')),
                Object(D.a)(() => {})
              );
            }
            get _closedStream() {
              return this.openedChange.pipe(
                I(t => !t),
                Object(D.a)(() => {})
              );
            }
            get closedStart() {
              return this._animationStarted.pipe(
                I(t => t.fromState !== t.toState && 'void' === t.toState),
                Object(D.a)(() => {})
              );
            }
            get _isFocusTrapEnabled() {
              return this.opened && 'side' !== this.mode;
            }
            _trapFocus() {
              this.autoFocus &&
                this._focusTrap.focusInitialElementWhenReady().then(t => {
                  t ||
                    'function' != typeof this._elementRef.nativeElement.focus ||
                    this._elementRef.nativeElement.focus();
                });
            }
            _restoreFocus() {
              if (!this.autoFocus) return;
              const t = this._doc && this._doc.activeElement;
              t &&
                this._elementRef.nativeElement.contains(t) &&
                (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement
                  ? this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia)
                  : this._elementRef.nativeElement.blur()),
                (this._elementFocusedBeforeDrawerWasOpened = null),
                (this._openedVia = null);
            }
            ngAfterContentInit() {
              (this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement)),
                (this._focusTrap.enabled = this._isFocusTrapEnabled);
            }
            ngAfterContentChecked() {
              this._platform.isBrowser && (this._enableAnimations = !0);
            }
            ngOnDestroy() {
              this._focusTrap && this._focusTrap.destroy(),
                this._animationStarted.complete(),
                this._animationEnd.complete(),
                this._modeChanged.complete(),
                this._destroyed.next(),
                this._destroyed.complete();
            }
            get opened() {
              return this._opened;
            }
            set opened(t) {
              this.toggle(Cr(t));
            }
            open(t) {
              return this.toggle(!0, t);
            }
            close() {
              return this.toggle(!1);
            }
            toggle(t = !this.opened, e = 'program') {
              return (
                (this._opened = t),
                t
                  ? ((this._animationState = this._enableAnimations ? 'open' : 'open-instant'), (this._openedVia = e))
                  : ((this._animationState = 'void'), this._restoreFocus()),
                this._focusTrap && (this._focusTrap.enabled = this._isFocusTrapEnabled),
                new Promise(t => {
                  this.openedChange.pipe(Z(1)).subscribe(e => t(e ? 'open' : 'close'));
                })
              );
            }
            get _width() {
              return (this._elementRef.nativeElement && this._elementRef.nativeElement.offsetWidth) || 0;
            }
            _animationStartListener(t) {
              this._animationStarted.next(t);
            }
            _animationDoneListener(t) {
              this._animationEnd.next(t);
            }
          })(),
        _m = (() =>
          class {
            constructor(t, e, n, i, r, o = !1, a) {
              (this._dir = t),
                (this._element = e),
                (this._ngZone = n),
                (this._changeDetectorRef = i),
                (this._animationMode = a),
                (this.backdropClick = new s.m()),
                (this._destroyed = new u.a()),
                (this._doCheckSubject = new u.a()),
                (this._contentMargins = { left: null, right: null }),
                (this._contentMarginChanges = new u.a()),
                t &&
                  t.change.pipe(Fi(this._destroyed)).subscribe(() => {
                    this._validateDrawers(), this.updateContentMargins();
                  }),
                r
                  .change()
                  .pipe(Fi(this._destroyed))
                  .subscribe(() => this.updateContentMargins()),
                (this._autosize = o);
            }
            get start() {
              return this._start;
            }
            get end() {
              return this._end;
            }
            get autosize() {
              return this._autosize;
            }
            set autosize(t) {
              this._autosize = Cr(t);
            }
            get hasBackdrop() {
              return null == this._backdropOverride
                ? !this._start || 'side' !== this._start.mode || !this._end || 'side' !== this._end.mode
                : this._backdropOverride;
            }
            set hasBackdrop(t) {
              this._backdropOverride = null == t ? null : Cr(t);
            }
            get scrollable() {
              return this._userContent || this._content;
            }
            ngAfterContentInit() {
              this._drawers.changes.pipe(lt(null)).subscribe(() => {
                this._validateDrawers(),
                  this._drawers.forEach(t => {
                    this._watchDrawerToggle(t), this._watchDrawerPosition(t), this._watchDrawerMode(t);
                  }),
                  (!this._drawers.length || this._isDrawerOpen(this._start) || this._isDrawerOpen(this._end)) &&
                    this.updateContentMargins(),
                  this._changeDetectorRef.markForCheck();
              }),
                this._doCheckSubject
                  .pipe(
                    Go(10),
                    Fi(this._destroyed)
                  )
                  .subscribe(() => this.updateContentMargins());
            }
            ngOnDestroy() {
              this._contentMarginChanges.complete(),
                this._doCheckSubject.complete(),
                this._destroyed.next(),
                this._destroyed.complete();
            }
            open() {
              this._drawers.forEach(t => t.open());
            }
            close() {
              this._drawers.forEach(t => t.close());
            }
            updateContentMargins() {
              let t = 0,
                e = 0;
              if (this._left && this._left.opened)
                if ('side' == this._left.mode) t += this._left._width;
                else if ('push' == this._left.mode) {
                  const n = this._left._width;
                  (t += n), (e -= n);
                }
              if (this._right && this._right.opened)
                if ('side' == this._right.mode) e += this._right._width;
                else if ('push' == this._right.mode) {
                  const n = this._right._width;
                  (e += n), (t -= n);
                }
              (e = e || null),
                ((t = t || null) === this._contentMargins.left && e === this._contentMargins.right) ||
                  ((this._contentMargins = { left: t, right: e }),
                  this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins)));
            }
            ngDoCheck() {
              this._autosize && this._isPushed() && this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());
            }
            _watchDrawerToggle(t) {
              t._animationStarted
                .pipe(
                  I(t => t.fromState !== t.toState),
                  Fi(this._drawers.changes)
                )
                .subscribe(t => {
                  'open-instant' !== t.toState &&
                    'NoopAnimations' !== this._animationMode &&
                    this._element.nativeElement.classList.add('mat-drawer-transition'),
                    this.updateContentMargins(),
                    this._changeDetectorRef.markForCheck();
                }),
                'side' !== t.mode &&
                  t.openedChange.pipe(Fi(this._drawers.changes)).subscribe(() => this._setContainerClass(t.opened));
            }
            _watchDrawerPosition(t) {
              t &&
                t.onPositionChanged.pipe(Fi(this._drawers.changes)).subscribe(() => {
                  this._ngZone.onMicrotaskEmpty
                    .asObservable()
                    .pipe(Z(1))
                    .subscribe(() => {
                      this._validateDrawers();
                    });
                });
            }
            _watchDrawerMode(t) {
              t &&
                t._modeChanged.pipe(Fi(Object(vs.a)(this._drawers.changes, this._destroyed))).subscribe(() => {
                  this.updateContentMargins(), this._changeDetectorRef.markForCheck();
                });
            }
            _setContainerClass(t) {
              t
                ? this._element.nativeElement.classList.add('mat-drawer-opened')
                : this._element.nativeElement.classList.remove('mat-drawer-opened');
            }
            _validateDrawers() {
              (this._start = this._end = null),
                this._drawers.forEach(t => {
                  'end' == t.position
                    ? (null != this._end && mm('end'), (this._end = t))
                    : (null != this._start && mm('start'), (this._start = t));
                }),
                (this._right = this._left = null),
                this._dir && 'rtl' === this._dir.value
                  ? ((this._left = this._end), (this._right = this._start))
                  : ((this._left = this._start), (this._right = this._end));
            }
            _isPushed() {
              return (
                (this._isDrawerOpen(this._start) && 'over' != this._start.mode) ||
                (this._isDrawerOpen(this._end) && 'over' != this._end.mode)
              );
            }
            _onBackdropClicked() {
              this.backdropClick.emit(), this._closeModalDrawer();
            }
            _closeModalDrawer() {
              [this._start, this._end]
                .filter(t => t && !t.disableClose && this._canHaveBackdrop(t))
                .forEach(t => t.close());
            }
            _isShowingBackdrop() {
              return (
                (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||
                (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end))
              );
            }
            _canHaveBackdrop(t) {
              return 'side' !== t.mode || !!this._backdropOverride;
            }
            _isDrawerOpen(t) {
              return null != t && t.opened;
            }
          })(),
        ym = (() =>
          class extends gm {
            constructor(t, e, n, s, i) {
              super(t, e, n, s, i);
            }
          })(),
        vm = (() =>
          class extends bm {
            constructor() {
              super(...arguments), (this._fixedInViewport = !1), (this._fixedTopGap = 0), (this._fixedBottomGap = 0);
            }
            get fixedInViewport() {
              return this._fixedInViewport;
            }
            set fixedInViewport(t) {
              this._fixedInViewport = Cr(t);
            }
            get fixedTopGap() {
              return this._fixedTopGap;
            }
            set fixedTopGap(t) {
              this._fixedTopGap = xr(t);
            }
            get fixedBottomGap() {
              return this._fixedBottomGap;
            }
            set fixedBottomGap(t) {
              this._fixedBottomGap = xr(t);
            }
          })(),
        wm = (() => class extends _m {})(),
        Cm = (() => class {})();
      var xm = s.qb({ encapsulation: 2, styles: [], data: {} });
      function Em(t) {
        return s.Kb(2, [s.Cb(null, 0)], null, null);
      }
      var Sm = s.qb({
        encapsulation: 2,
        styles: [],
        data: {
          animation: [
            {
              type: 7,
              name: 'transform',
              definitions: [
                {
                  type: 0,
                  name: 'open, open-instant',
                  styles: { type: 6, styles: { transform: 'none', visibility: 'visible' }, offset: null },
                  options: void 0
                },
                {
                  type: 0,
                  name: 'void',
                  styles: { type: 6, styles: { 'box-shadow': 'none', visibility: 'hidden' }, offset: null },
                  options: void 0
                },
                {
                  type: 1,
                  expr: 'void => open-instant',
                  animation: { type: 4, styles: null, timings: '0ms' },
                  options: null
                },
                {
                  type: 1,
                  expr: 'void <=> open, open-instant => void',
                  animation: { type: 4, styles: null, timings: '400ms cubic-bezier(0.25, 0.8, 0.25, 1)' },
                  options: null
                }
              ],
              options: {}
            }
          ]
        }
      });
      function km(t) {
        return s.Kb(
          2,
          [
            (t()(),
            s.sb(0, 0, null, null, 1, 'div', [['class', 'mat-drawer-inner-container']], null, null, null, null, null)),
            s.Cb(null, 0)
          ],
          null,
          null
        );
      }
      var Dm = s.qb({
        encapsulation: 2,
        styles: [
          '.mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}'
        ],
        data: {}
      });
      function Am(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              0,
              'div',
              [['class', 'mat-drawer-backdrop']],
              [[2, 'mat-drawer-shown', null]],
              [[null, 'click']],
              function(t, e, n) {
                var s = !0;
                return 'click' === e && (s = !1 !== t.component._onBackdropClicked() && s), s;
              },
              null,
              null
            ))
          ],
          null,
          function(t, e) {
            t(e, 0, 0, e.component._isShowingBackdrop());
          }
        );
      }
      function Tm(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              3,
              'mat-sidenav-content',
              [['cdkScrollable', ''], ['class', 'mat-drawer-content mat-sidenav-content']],
              [[4, 'margin-left', 'px'], [4, 'margin-right', 'px']],
              null,
              null,
              Em,
              xm
            )),
            s.rb(1, 212992, null, 0, ro, [s.k, io, s.y, [2, vr]], null, null),
            s.rb(2, 1294336, null, 0, ym, [s.h, wm, s.k, io, s.y], null, null),
            s.Cb(0, 2)
          ],
          function(t, e) {
            t(e, 1, 0), t(e, 2, 0);
          },
          function(t, e) {
            t(e, 0, 0, s.Db(e, 2)._container._contentMargins.left, s.Db(e, 2)._container._contentMargins.right);
          }
        );
      }
      function Om(t) {
        return s.Kb(
          2,
          [
            s.Gb(671088640, 1, { _userContent: 0 }),
            (t()(), s.hb(16777216, null, null, 1, null, Am)),
            s.rb(2, 16384, null, 0, r.k, [s.O, s.L], { ngIf: [0, 'ngIf'] }, null),
            s.Cb(null, 0),
            s.Cb(null, 1),
            (t()(), s.hb(16777216, null, null, 1, null, Tm)),
            s.rb(6, 16384, null, 0, r.k, [s.O, s.L], { ngIf: [0, 'ngIf'] }, null)
          ],
          function(t, e) {
            var n = e.component;
            t(e, 2, 0, n.hasBackdrop), t(e, 6, 0, !n._content);
          },
          null
        );
      }
      let Im = (() =>
        class extends wp {
          constructor(t, e, n, s, i) {
            super(t, null, e, n),
              (this.elementRef = t),
              (this.styler = e),
              (this.marshal = n),
              (this.delegate = s),
              (this.ngClassInstance = i),
              (this.DIRECTIVE_KEY = 'ngClass'),
              this.ngClassInstance || (this.ngClassInstance = new r.i(this.delegate)),
              this.init(),
              this.setValue('', '');
          }
          set klass(t) {
            (this.ngClassInstance.klass = t), this.setValue(t, '');
          }
          updateWithValue(t) {
            (this.ngClassInstance.ngClass = t), this.ngClassInstance.ngDoCheck();
          }
          ngDoCheck() {
            this.ngClassInstance.ngDoCheck();
          }
        })();
      const Rm = [
        'ngClass',
        'ngClass.xs',
        'ngClass.sm',
        'ngClass.md',
        'ngClass.lg',
        'ngClass.xl',
        'ngClass.lt-sm',
        'ngClass.lt-md',
        'ngClass.lt-lg',
        'ngClass.lt-xl',
        'ngClass.gt-xs',
        'ngClass.gt-sm',
        'ngClass.gt-md',
        'ngClass.gt-lg'
      ];
      let Pm = (() =>
          class extends Im {
            constructor() {
              super(...arguments), (this.inputs = Rm);
            }
          })(),
        Nm = (() => {
          class t extends qp {
            buildStyles(t, e) {
              return { display: 'true' === t ? e.display : 'none' };
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t();
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })(),
        Mm = (() =>
          class extends wp {
            constructor(t, e, n, s, i, r, o) {
              super(t, e, n, s),
                (this.elementRef = t),
                (this.styleBuilder = e),
                (this.styler = n),
                (this.marshal = s),
                (this.layoutConfig = i),
                (this.platformId = r),
                (this.serverModuleLoaded = o),
                (this.DIRECTIVE_KEY = 'show-hide'),
                (this.display = ''),
                (this.hasLayout = !1),
                (this.hasFlexChild = !1);
            }
            ngAfterViewInit() {
              this.trackExtraTriggers();
              const t = Array.from(this.nativeElement.children);
              for (let n = 0; n < t.length; n++)
                if (this.marshal.hasValue(t[n], 'flex')) {
                  this.hasFlexChild = !0;
                  break;
                }
              Lm.has(this.nativeElement)
                ? (this.display = Lm.get(this.nativeElement))
                : ((this.display = this.getDisplayStyle()), Lm.set(this.nativeElement, this.display)),
                this.init();
              const e = this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY, '');
              void 0 === e || '' === e ? this.setValue(!0, '') : this.triggerUpdate();
            }
            ngOnChanges(t) {
              Object.keys(t).forEach(e => {
                if (-1 !== this.inputs.indexOf(e)) {
                  const n = e.split('.'),
                    s = n.slice(1).join('.'),
                    i = t[e].currentValue;
                  let r = '' === i || (0 !== i && Cr(i));
                  'fxHide' === n[0] && (r = !r), this.setValue(r, s);
                }
              });
            }
            trackExtraTriggers() {
              (this.hasLayout = this.marshal.hasValue(this.nativeElement, 'layout')),
                ['layout', 'layout-align'].forEach(t => {
                  this.marshal
                    .trackValue(this.nativeElement, t)
                    .pipe(Fi(this.destroySubject))
                    .subscribe(this.triggerUpdate.bind(this));
                });
            }
            getDisplayStyle() {
              return this.hasLayout || (this.hasFlexChild && this.layoutConfig.addFlexToParent)
                ? 'flex'
                : this.styler.lookupStyle(this.nativeElement, 'display', !0);
            }
            updateWithValue(t = !0) {
              '' !== t &&
                (this.addStyles(t ? 'true' : 'false', { display: this.display }),
                Object(r.u)(this.platformId) &&
                  this.serverModuleLoaded &&
                  this.nativeElement.style.setProperty('display', ''),
                this.marshal.triggerUpdate(this.parentElement, 'layout-gap'));
            }
          })();
      const Lm = new WeakMap(),
        jm = [
          'fxShow',
          'fxShow.print',
          'fxShow.xs',
          'fxShow.sm',
          'fxShow.md',
          'fxShow.lg',
          'fxShow.xl',
          'fxShow.lt-sm',
          'fxShow.lt-md',
          'fxShow.lt-lg',
          'fxShow.lt-xl',
          'fxShow.gt-xs',
          'fxShow.gt-sm',
          'fxShow.gt-md',
          'fxShow.gt-lg',
          'fxHide',
          'fxHide.print',
          'fxHide.xs',
          'fxHide.sm',
          'fxHide.md',
          'fxHide.lg',
          'fxHide.xl',
          'fxHide.lt-sm',
          'fxHide.lt-md',
          'fxHide.lt-lg',
          'fxHide.lt-xl',
          'fxHide.gt-xs',
          'fxHide.gt-sm',
          'fxHide.gt-md',
          'fxHide.gt-lg'
        ];
      let Fm = (() =>
          class extends Mm {
            constructor() {
              super(...arguments), (this.inputs = jm);
            }
          })(),
        Bm = (() => class {})();
      class Vm {
        constructor(t) {
          this._elementRef = t;
        }
      }
      const Um = Ca(Vm);
      let Hm = (() =>
          class extends Um {
            constructor(t, e, n) {
              super(t), (this._platform = e), (this._document = n);
            }
            ngAfterViewInit() {
              Object(s.W)() &&
                this._platform.isBrowser &&
                (this._checkToolbarMixedModes(),
                this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes()));
            }
            _checkToolbarMixedModes() {
              this._toolbarRows.length &&
                Array.from(this._elementRef.nativeElement.childNodes)
                  .filter(t => !(t.classList && t.classList.contains('mat-toolbar-row')))
                  .filter(t => t.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))
                  .some(t => !(!t.textContent || !t.textContent.trim())) &&
                (function() {
                  throw Error(
                    'MatToolbar: Attempting to combine different toolbar modes. Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content inside of a `<mat-toolbar>` for a single row.'
                  );
                })();
            }
          })(),
        zm = (() => class {})();
      var $m = s.qb({
        encapsulation: 2,
        styles: [
          '@media (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}'
        ],
        data: {}
      });
      function qm(t) {
        return s.Kb(2, [s.Cb(null, 0), s.Cb(null, 1)], null, null);
      }
      function Wm(t) {
        return Error(`Unable to find icon with the name "${t}"`);
      }
      function Km(t) {
        return Error(
          'The URL provided to MatIconRegistry was not trusted as a resource URL ' +
            `via Angular's DomSanitizer. Attempted URL was "${t}".`
        );
      }
      function Ym(t) {
        return Error(
          'The literal provided to MatIconRegistry was not trusted as safe HTML by ' +
            `Angular's DomSanitizer. Attempted literal was "${t}".`
        );
      }
      class Qm {
        constructor(t) {
          t.nodeName ? (this.svgElement = t) : (this.url = t);
        }
      }
      let Gm = (() => {
        class t {
          constructor(t, e, n) {
            (this._httpClient = t),
              (this._sanitizer = e),
              (this._svgIconConfigs = new Map()),
              (this._iconSetConfigs = new Map()),
              (this._cachedIconsByUrl = new Map()),
              (this._inProgressUrlFetches = new Map()),
              (this._fontCssClassesByAlias = new Map()),
              (this._defaultFontSetClass = 'material-icons'),
              (this._document = n);
          }
          addSvgIcon(t, e) {
            return this.addSvgIconInNamespace('', t, e);
          }
          addSvgIconLiteral(t, e) {
            return this.addSvgIconLiteralInNamespace('', t, e);
          }
          addSvgIconInNamespace(t, e, n) {
            return this._addSvgIconConfig(t, e, new Qm(n));
          }
          addSvgIconLiteralInNamespace(t, e, n) {
            const i = this._sanitizer.sanitize(s.H.HTML, n);
            if (!i) throw Ym(n);
            const r = this._createSvgElementForSingleIcon(i);
            return this._addSvgIconConfig(t, e, new Qm(r));
          }
          addSvgIconSet(t) {
            return this.addSvgIconSetInNamespace('', t);
          }
          addSvgIconSetLiteral(t) {
            return this.addSvgIconSetLiteralInNamespace('', t);
          }
          addSvgIconSetInNamespace(t, e) {
            return this._addSvgIconSetConfig(t, new Qm(e));
          }
          addSvgIconSetLiteralInNamespace(t, e) {
            const n = this._sanitizer.sanitize(s.H.HTML, e);
            if (!n) throw Ym(e);
            const i = this._svgElementFromString(n);
            return this._addSvgIconSetConfig(t, new Qm(i));
          }
          registerFontClassAlias(t, e = t) {
            return this._fontCssClassesByAlias.set(t, e), this;
          }
          classNameForFontAlias(t) {
            return this._fontCssClassesByAlias.get(t) || t;
          }
          setDefaultFontSetClass(t) {
            return (this._defaultFontSetClass = t), this;
          }
          getDefaultFontSetClass() {
            return this._defaultFontSetClass;
          }
          getSvgIconFromUrl(t) {
            const e = this._sanitizer.sanitize(s.H.RESOURCE_URL, t);
            if (!e) throw Km(t);
            const n = this._cachedIconsByUrl.get(e);
            return n
              ? c(Zm(n))
              : this._loadSvgIconFromConfig(new Qm(t)).pipe(
                  bt(t => this._cachedIconsByUrl.set(e, t)),
                  Object(D.a)(t => Zm(t))
                );
          }
          getNamedSvgIcon(t, e = '') {
            const n = Xm(e, t),
              s = this._svgIconConfigs.get(n);
            if (s) return this._getSvgFromConfig(s);
            const i = this._iconSetConfigs.get(e);
            return i ? this._getSvgFromIconSetConfigs(t, i) : Wr(Wm(n));
          }
          ngOnDestroy() {
            this._svgIconConfigs.clear(), this._iconSetConfigs.clear(), this._cachedIconsByUrl.clear();
          }
          _getSvgFromConfig(t) {
            return t.svgElement
              ? c(Zm(t.svgElement))
              : this._loadSvgIconFromConfig(t).pipe(
                  bt(e => (t.svgElement = e)),
                  Object(D.a)(t => Zm(t))
                );
          }
          _getSvgFromIconSetConfigs(t, e) {
            const n = this._extractIconWithNameFromAnySet(t, e);
            return n
              ? c(n)
              : (function(...t) {
                  if (1 === t.length) {
                    const e = t[0];
                    if (Object(b.a)(e)) return al(e, null);
                    if (Object(ol.a)(e) && Object.getPrototypeOf(e) === Object.prototype) {
                      const t = Object.keys(e);
                      return al(t.map(t => e[t]), t);
                    }
                  }
                  if ('function' == typeof t[t.length - 1]) {
                    const e = t.pop();
                    return al((t = 1 === t.length && Object(b.a)(t[0]) ? t[0] : t), null).pipe(
                      Object(D.a)(t => e(...t))
                    );
                  }
                  return al(t, null);
                })(
                  e
                    .filter(t => !t.svgElement)
                    .map(t =>
                      this._loadSvgIconSetFromConfig(t).pipe(
                        Y(e => {
                          const n = this._sanitizer.sanitize(s.H.RESOURCE_URL, t.url);
                          return console.error(`Loading icon set URL: ${n} failed: ${e.message}`), c(null);
                        })
                      )
                    )
                ).pipe(
                  Object(D.a)(() => {
                    const n = this._extractIconWithNameFromAnySet(t, e);
                    if (!n) throw Wm(t);
                    return n;
                  })
                );
          }
          _extractIconWithNameFromAnySet(t, e) {
            for (let n = e.length - 1; n >= 0; n--) {
              const s = e[n];
              if (s.svgElement) {
                const e = this._extractSvgIconFromSet(s.svgElement, t);
                if (e) return e;
              }
            }
            return null;
          }
          _loadSvgIconFromConfig(t) {
            return this._fetchUrl(t.url).pipe(Object(D.a)(t => this._createSvgElementForSingleIcon(t)));
          }
          _loadSvgIconSetFromConfig(t) {
            return t.svgElement
              ? c(t.svgElement)
              : this._fetchUrl(t.url).pipe(
                  Object(D.a)(e => (t.svgElement || (t.svgElement = this._svgElementFromString(e)), t.svgElement))
                );
          }
          _createSvgElementForSingleIcon(t) {
            const e = this._svgElementFromString(t);
            return this._setSvgAttributes(e), e;
          }
          _extractSvgIconFromSet(t, e) {
            const n = t.querySelector(`[id="${e}"]`);
            if (!n) return null;
            const s = n.cloneNode(!0);
            if ((s.removeAttribute('id'), 'svg' === s.nodeName.toLowerCase())) return this._setSvgAttributes(s);
            if ('symbol' === s.nodeName.toLowerCase()) return this._setSvgAttributes(this._toSvgElement(s));
            const i = this._svgElementFromString('<svg></svg>');
            return i.appendChild(s), this._setSvgAttributes(i);
          }
          _svgElementFromString(t) {
            const e = this._document.createElement('DIV');
            e.innerHTML = t;
            const n = e.querySelector('svg');
            if (!n) throw Error('<svg> tag not found');
            return n;
          }
          _toSvgElement(t) {
            let e = this._svgElementFromString('<svg></svg>');
            for (let n = 0; n < t.childNodes.length; n++)
              t.childNodes[n].nodeType === this._document.ELEMENT_NODE && e.appendChild(t.childNodes[n].cloneNode(!0));
            return e;
          }
          _setSvgAttributes(t) {
            return (
              t.setAttribute('fit', ''),
              t.setAttribute('height', '100%'),
              t.setAttribute('width', '100%'),
              t.setAttribute('preserveAspectRatio', 'xMidYMid meet'),
              t.setAttribute('focusable', 'false'),
              t
            );
          }
          _fetchUrl(t) {
            if (!this._httpClient)
              throw Error(
                'Could not find HttpClient provider for use with Angular Material icons. Please include the HttpClientModule from @angular/common/http in your app imports.'
              );
            if (null == t) throw Error(`Cannot fetch icon from URL "${t}".`);
            const e = this._sanitizer.sanitize(s.H.RESOURCE_URL, t);
            if (!e) throw Km(t);
            const n = this._inProgressUrlFetches.get(e);
            if (n) return n;
            const i = this._httpClient.get(e, { responseType: 'text' }).pipe(
              wt(() => this._inProgressUrlFetches.delete(e)),
              Object(Ds.a)()
            );
            return this._inProgressUrlFetches.set(e, i), i;
          }
          _addSvgIconConfig(t, e, n) {
            return this._svgIconConfigs.set(Xm(t, e), n), this;
          }
          _addSvgIconSetConfig(t, e) {
            const n = this._iconSetConfigs.get(t);
            return n ? n.push(e) : this._iconSetConfigs.set(t, [e]), this;
          }
        }
        return (
          (t.ngInjectableDef = Object(s.Ob)({
            factory: function() {
              return new t(Object(s.Pb)(ui, 8), Object(s.Pb)(Et.b), Object(s.Pb)(r.d, 8));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      function Zm(t) {
        return t.cloneNode(!0);
      }
      function Xm(t, e) {
        return t + ':' + e;
      }
      class Jm {
        constructor(t) {
          this._elementRef = t;
        }
      }
      const tf = Ca(Jm),
        ef = new s.p('mat-icon-location', {
          providedIn: 'root',
          factory: function() {
            const t = Object(s.V)(r.d),
              e = t ? t.location : null;
            return { getPathname: () => (e ? e.pathname + e.search : '') };
          }
        }),
        nf = [
          'clip-path',
          'color-profile',
          'src',
          'cursor',
          'fill',
          'filter',
          'marker',
          'marker-start',
          'marker-mid',
          'marker-end',
          'mask',
          'stroke'
        ],
        sf = nf.map(t => `[${t}]`).join(', '),
        rf = /^url\(['"]?#(.*?)['"]?\)$/;
      let of = (() =>
          class extends tf {
            constructor(t, e, n, s) {
              super(t),
                (this._iconRegistry = e),
                (this._location = s),
                (this._inline = !1),
                n || t.nativeElement.setAttribute('aria-hidden', 'true');
            }
            get inline() {
              return this._inline;
            }
            set inline(t) {
              this._inline = Cr(t);
            }
            get fontSet() {
              return this._fontSet;
            }
            set fontSet(t) {
              this._fontSet = this._cleanupFontValue(t);
            }
            get fontIcon() {
              return this._fontIcon;
            }
            set fontIcon(t) {
              this._fontIcon = this._cleanupFontValue(t);
            }
            _splitIconName(t) {
              if (!t) return ['', ''];
              const e = t.split(':');
              switch (e.length) {
                case 1:
                  return ['', e[0]];
                case 2:
                  return e;
                default:
                  throw Error(`Invalid icon name: "${t}"`);
              }
            }
            ngOnChanges(t) {
              const e = t.svgIcon;
              if (e)
                if (this.svgIcon) {
                  const [t, e] = this._splitIconName(this.svgIcon);
                  this._iconRegistry
                    .getNamedSvgIcon(e, t)
                    .pipe(Z(1))
                    .subscribe(t => this._setSvgElement(t), t => console.log(`Error retrieving icon: ${t.message}`));
                } else e.previousValue && this._clearSvgElement();
              this._usingFontIcon() && this._updateFontIconClasses();
            }
            ngOnInit() {
              this._usingFontIcon() && this._updateFontIconClasses();
            }
            ngAfterViewChecked() {
              const t = this._elementsWithExternalReferences;
              if (t && this._location && t.size) {
                const t = this._location.getPathname();
                t !== this._previousPath && ((this._previousPath = t), this._prependPathToReferences(t));
              }
            }
            ngOnDestroy() {
              this._elementsWithExternalReferences && this._elementsWithExternalReferences.clear();
            }
            _usingFontIcon() {
              return !this.svgIcon;
            }
            _setSvgElement(t) {
              this._clearSvgElement();
              const e = t.querySelectorAll('style');
              for (let n = 0; n < e.length; n++) e[n].textContent += ' ';
              if (this._location) {
                const e = this._location.getPathname();
                (this._previousPath = e),
                  this._cacheChildrenWithExternalReferences(t),
                  this._prependPathToReferences(e);
              }
              this._elementRef.nativeElement.appendChild(t);
            }
            _clearSvgElement() {
              const t = this._elementRef.nativeElement;
              let e = t.childNodes.length;
              for (this._elementsWithExternalReferences && this._elementsWithExternalReferences.clear(); e--; ) {
                const n = t.childNodes[e];
                (1 === n.nodeType && 'svg' !== n.nodeName.toLowerCase()) || t.removeChild(n);
              }
            }
            _updateFontIconClasses() {
              if (!this._usingFontIcon()) return;
              const t = this._elementRef.nativeElement,
                e = this.fontSet
                  ? this._iconRegistry.classNameForFontAlias(this.fontSet)
                  : this._iconRegistry.getDefaultFontSetClass();
              e != this._previousFontSetClass &&
                (this._previousFontSetClass && t.classList.remove(this._previousFontSetClass),
                e && t.classList.add(e),
                (this._previousFontSetClass = e)),
                this.fontIcon != this._previousFontIconClass &&
                  (this._previousFontIconClass && t.classList.remove(this._previousFontIconClass),
                  this.fontIcon && t.classList.add(this.fontIcon),
                  (this._previousFontIconClass = this.fontIcon));
            }
            _cleanupFontValue(t) {
              return 'string' == typeof t ? t.trim().split(' ')[0] : t;
            }
            _prependPathToReferences(t) {
              const e = this._elementsWithExternalReferences;
              e &&
                e.forEach((e, n) => {
                  e.forEach(e => {
                    n.setAttribute(e.name, `url('${t}#${e.value}')`);
                  });
                });
            }
            _cacheChildrenWithExternalReferences(t) {
              const e = t.querySelectorAll(sf),
                n = (this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map());
              for (let s = 0; s < e.length; s++)
                nf.forEach(t => {
                  const i = e[s],
                    r = i.getAttribute(t),
                    o = r ? r.match(rf) : null;
                  if (o) {
                    let e = n.get(i);
                    e || n.set(i, (e = [])), e.push({ name: t, value: o[1] });
                  }
                });
            }
          })(),
        af = (() => class {})();
      var lf = s.qb({
        encapsulation: 2,
        styles: [
          '.mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}'
        ],
        data: {}
      });
      function cf(t) {
        return s.Kb(2, [s.Cb(null, 0)], null, null);
      }
      class hf {}
      const uf = xa(hf);
      class df {}
      const pf = xa(df);
      let mf = (() =>
          class extends uf {
            constructor() {
              super(...arguments), (this._stateChanges = new u.a());
            }
            ngOnChanges() {
              this._stateChanges.next();
            }
            ngOnDestroy() {
              this._stateChanges.complete();
            }
          })(),
        ff = (() =>
          class extends uf {
            constructor(t) {
              super(),
                (this._elementRef = t),
                (this._stateChanges = new u.a()),
                'action-list' === this._getListType() && t.nativeElement.classList.add('mat-action-list');
            }
            _getListType() {
              const t = this._elementRef.nativeElement.nodeName.toLowerCase();
              return 'mat-list' === t ? 'list' : 'mat-action-list' === t ? 'action-list' : null;
            }
            ngOnChanges() {
              this._stateChanges.next();
            }
            ngOnDestroy() {
              this._stateChanges.complete();
            }
          })(),
        gf = (() =>
          class extends pf {
            constructor(t, e, n, s) {
              super(),
                (this._element = t),
                (this._isInteractiveList = !1),
                (this._destroyed = new u.a()),
                (this._isInteractiveList = !!(n || (s && 'action-list' === s._getListType()))),
                (this._list = n || s);
              const i = this._getHostElement();
              'button' !== i.nodeName.toLowerCase() || i.hasAttribute('type') || i.setAttribute('type', 'button'),
                this._list &&
                  this._list._stateChanges.pipe(Fi(this._destroyed)).subscribe(() => {
                    e.markForCheck();
                  });
            }
            ngAfterContentInit() {
              var t, e;
              (e = this._element),
                (t = this._lines).changes.pipe(lt(t)).subscribe(({ length: t }) => {
                  Ha(e, 'mat-2-line', !1),
                    Ha(e, 'mat-3-line', !1),
                    Ha(e, 'mat-multi-line', !1),
                    2 === t || 3 === t ? Ha(e, `mat-${t}-line`, !0) : t > 3 && Ha(e, 'mat-multi-line', !0);
                });
            }
            ngOnDestroy() {
              this._destroyed.next(), this._destroyed.complete();
            }
            _isRippleDisabled() {
              return !this._isInteractiveList || this.disableRipple || !(!this._list || !this._list.disableRipple);
            }
            _getHostElement() {
              return this._element.nativeElement;
            }
          })(),
        bf = (() => class {})(),
        _f = (() =>
          class {
            constructor() {
              (this._vertical = !1), (this._inset = !1);
            }
            get vertical() {
              return this._vertical;
            }
            set vertical(t) {
              this._vertical = Cr(t);
            }
            get inset() {
              return this._inset;
            }
            set inset(t) {
              this._inset = Cr(t);
            }
          })(),
        yf = (() => class {})();
      var vf = s.qb({
        encapsulation: 2,
        styles: [
          '.mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:0}mat-action-list button{background:0 0;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:0}@media (-ms-high-contrast:active){.mat-selection-list:focus{outline-style:dotted}.mat-list-option:focus,.mat-list-option:hover,.mat-nav-list .mat-list-item:focus,.mat-nav-list .mat-list-item:hover,mat-action-list .mat-list-item:focus,mat-action-list .mat-list-item:hover{outline:dotted 1px}}@media (hover:none){.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover{background:0 0}}'
        ],
        data: {}
      });
      function wf(t) {
        return s.Kb(2, [s.Cb(null, 0)], null, null);
      }
      var Cf = s.qb({ encapsulation: 2, styles: [], data: {} });
      function xf(t) {
        return s.Kb(
          2,
          [
            (t()(),
            s.sb(0, 0, null, null, 6, 'div', [['class', 'mat-list-item-content']], null, null, null, null, null)),
            (t()(),
            s.sb(
              1,
              0,
              null,
              null,
              1,
              'div',
              [['class', 'mat-list-item-ripple mat-ripple'], ['mat-ripple', '']],
              [[2, 'mat-ripple-unbounded', null]],
              null,
              null,
              null,
              null
            )),
            s.rb(
              2,
              212992,
              null,
              0,
              Za,
              [s.k, s.y, Zr, [2, Ga], [2, Du]],
              { disabled: [0, 'disabled'], trigger: [1, 'trigger'] },
              null
            ),
            s.Cb(null, 0),
            (t()(), s.sb(4, 0, null, null, 1, 'div', [['class', 'mat-list-text']], null, null, null, null, null)),
            s.Cb(null, 1),
            s.Cb(null, 2)
          ],
          function(t, e) {
            var n = e.component;
            t(e, 2, 0, n._isRippleDisabled(), n._getHostElement());
          },
          function(t, e) {
            t(e, 1, 0, s.Db(e, 2).unbounded);
          }
        );
      }
      var Ef = s.qb({
        encapsulation: 2,
        styles: [
          '.mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}'
        ],
        data: {}
      });
      function Sf(t) {
        return s.Kb(2, [], null, null);
      }
      class kf {
        constructor(t, e, n, s) {
          (this.router = t), (this.titleService = e), (this.media = n), (this.i18nService = s);
        }
        ngOnInit() {}
        setLanguage(t) {
          this.i18nService.language = t;
        }
        get languages() {
          return this.i18nService.supportedLanguages;
        }
        get isMobile() {
          return this.media.isActive('xs') || this.media.isActive('sm');
        }
        get title() {
          return this.titleService.getTitle();
        }
      }
      var Df = s.qb({
        encapsulation: 0,
        styles: [
          [
            '[_nghost-%COMP%]{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.mat-sidenav[_ngcontent-%COMP%]{min-width:270px;max-width:28%}.has-border[_ngcontent-%COMP%]{border-right:1px solid rgba(0,0,0,.12)}.mat-list[_ngcontent-%COMP%]{padding-top:0}.mat-list-item[_ngcontent-%COMP%]{text-decoration:none}.mat-list-item[_ngcontent-%COMP%]:hover{background:rgba(0,0,0,.05)}.menu-button[_ngcontent-%COMP%]{margin-right:1rem}'
          ]
        ],
        data: {}
      });
      function Af(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              2,
              'button',
              [['class', 'mat-menu-item'], ['mat-menu-item', '']],
              [
                [1, 'role', 0],
                [2, 'mat-menu-item-highlighted', null],
                [2, 'mat-menu-item-submenu-trigger', null],
                [1, 'tabindex', 0],
                [1, 'aria-disabled', 0],
                [1, 'disabled', 0]
              ],
              [[null, 'click'], [null, 'mouseenter']],
              function(t, e, n) {
                var i = !0,
                  r = t.component;
                return (
                  'click' === e && (i = !1 !== s.Db(t, 1)._checkDisabled(n) && i),
                  'mouseenter' === e && (i = !1 !== s.Db(t, 1)._handleMouseEnter() && i),
                  'click' === e && (i = !1 !== r.setLanguage(t.context.$implicit) && i),
                  i
                );
              },
              cp,
              lp
            )),
            s.rb(1, 180224, [[4, 4], [5, 4]], 0, Yd, [s.k, r.d, ma, [2, qd]], null, null),
            (t()(), s.Ib(2, 0, ['\n              ', '\n            ']))
          ],
          null,
          function(t, e) {
            t(
              e,
              0,
              0,
              s.Db(e, 1).role,
              s.Db(e, 1)._highlighted,
              s.Db(e, 1)._triggersSubmenu,
              s.Db(e, 1)._getTabIndex(),
              s.Db(e, 1).disabled.toString(),
              s.Db(e, 1).disabled || null
            ),
              t(e, 2, 0, e.context.$implicit);
          }
        );
      }
      function Tf(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 123, 'div', [['fxFlex', '']], null, null, null, null, null)),
            s.rb(1, 671744, null, 0, im, [s.k, $p, mp, em, Yp], { fxFlex: [0, 'fxFlex'] }, null),
            (t()(), s.Ib(-1, null, ['\n  '])),
            (t()(),
            s.sb(
              3,
              0,
              null,
              null,
              119,
              'mat-sidenav-container',
              [['class', 'mat-drawer-container mat-sidenav-container'], ['fxFill', '']],
              [[2, 'mat-drawer-container-explicit-backdrop', null]],
              null,
              null,
              Om,
              Dm
            )),
            s.rb(4, 671744, null, 0, um, [s.k, $p, hm, Yp], null, null),
            s.rb(5, 1490944, null, 2, wm, [[2, vr], s.k, s.y, s.h, lo, fm, [2, Du]], null, null),
            s.Gb(603979776, 1, { _drawers: 1 }),
            s.Gb(603979776, 2, { _content: 0 }),
            (t()(), s.Ib(-1, 2, ['\n    '])),
            (t()(),
            s.sb(
              9,
              0,
              null,
              0,
              88,
              'mat-sidenav',
              [['class', 'mat-drawer mat-sidenav'], ['ngClass.gt-sm', 'has-border'], ['tabIndex', '-1']],
              [
                [1, 'align', 0],
                [2, 'mat-drawer-end', null],
                [2, 'mat-drawer-over', null],
                [2, 'mat-drawer-push', null],
                [2, 'mat-drawer-side', null],
                [2, 'mat-sidenav-fixed', null],
                [4, 'top', 'px'],
                [4, 'bottom', 'px'],
                [40, '@transform', 0]
              ],
              [['component', '@transform.start'], ['component', '@transform.done']],
              function(t, e, n) {
                var i = !0;
                return (
                  'component:@transform.start' === e && (i = !1 !== s.Db(t, 12)._animationStartListener(n) && i),
                  'component:@transform.done' === e && (i = !1 !== s.Db(t, 12)._animationDoneListener(n) && i),
                  i
                );
              },
              km,
              Sm
            )),
            s.Fb(512, null, r.v, r.w, [s.r, s.s, s.k, s.D]),
            s.rb(
              11,
              933888,
              null,
              0,
              Pm,
              [s.k, $p, Yp, r.v, [8, null]],
              { 'ngClass.gt-sm': [0, 'ngClass.gt-sm'] },
              null
            ),
            s.rb(
              12,
              3325952,
              [[1, 4], ['sidenav', 4]],
              0,
              vm,
              [s.k, oa, ma, Zr, s.y, [2, r.d]],
              { mode: [0, 'mode'], disableClose: [1, 'disableClose'], opened: [2, 'opened'] },
              null
            ),
            (t()(), s.Ib(-1, 0, ['\n      '])),
            (t()(),
            s.sb(
              14,
              0,
              null,
              0,
              36,
              'mat-toolbar',
              [['class', 'mat-toolbar'], ['color', 'primary']],
              [[2, 'mat-toolbar-multiple-rows', null], [2, 'mat-toolbar-single-row', null]],
              null,
              null,
              qm,
              $m
            )),
            s.rb(15, 4243456, null, 1, Hm, [s.k, Zr, r.d], { color: [0, 'color'] }, null),
            s.Gb(603979776, 3, { _toolbarRows: 1 }),
            (t()(), s.Ib(-1, 0, ['\n        '])),
            (t()(), s.sb(18, 0, null, 0, 2, 'span', [['translate', '']], null, null, null, null, null)),
            s.rb(19, 8536064, null, 0, zs, [Hs, s.k, s.h], { translate: [0, 'translate'] }, null),
            (t()(), s.Ib(-1, null, ['APP_NAME'])),
            (t()(), s.Ib(-1, 0, ['\n        '])),
            (t()(), s.sb(22, 0, null, 0, 1, 'div', [['fxFlex', '']], null, null, null, null, null)),
            s.rb(23, 671744, null, 0, im, [s.k, $p, mp, em, Yp], { fxFlex: [0, 'fxFlex'] }, null),
            (t()(), s.Ib(-1, 0, ['\n        '])),
            (t()(), s.sb(25, 0, null, 0, 0, 'div', [], null, null, null, null, null)),
            (t()(), s.Ib(-1, 0, ['\n        '])),
            (t()(), s.sb(27, 0, null, 0, 22, 'div', [], null, null, null, null, null)),
            (t()(), s.Ib(-1, null, ['\n          '])),
            (t()(),
            s.sb(
              29,
              16777216,
              null,
              null,
              7,
              'button',
              [['aria-haspopup', 'true'], ['mat-icon-button', '']],
              [[1, 'disabled', 0], [2, '_mat-animation-noopable', null], [1, 'aria-expanded', 0]],
              [[null, 'mousedown'], [null, 'keydown'], [null, 'click']],
              function(t, e, n) {
                var i = !0;
                return (
                  'mousedown' === e && (i = !1 !== s.Db(t, 31)._handleMousedown(n) && i),
                  'keydown' === e && (i = !1 !== s.Db(t, 31)._handleKeydown(n) && i),
                  'click' === e && (i = !1 !== s.Db(t, 31)._handleClick(n) && i),
                  i
                );
              },
              Ou,
              Tu
            )),
            s.rb(30, 180224, null, 0, jl, [s.k, ma, [2, Du]], null, null),
            s.rb(
              31,
              1196032,
              null,
              0,
              np,
              [No, s.k, s.O, Jd, [2, Zd], [8, null], [2, vr], ma],
              { menu: [0, 'menu'] },
              null
            ),
            (t()(), s.Ib(-1, 0, ['\n            '])),
            (t()(),
            s.sb(
              33,
              0,
              null,
              0,
              2,
              'mat-icon',
              [['class', 'mat-icon notranslate'], ['role', 'img']],
              [[2, 'mat-icon-inline', null], [2, 'mat-icon-no-color', null]],
              null,
              null,
              cf,
              lf
            )),
            s.rb(34, 9158656, null, 0, of, [s.k, Gm, [8, null], [2, ef]], null, null),
            (t()(), s.Ib(-1, 0, ['language'])),
            (t()(), s.Ib(-1, 0, ['\n          '])),
            (t()(), s.Ib(-1, null, ['\n          '])),
            (t()(), s.sb(38, 0, null, null, 10, 'mat-menu', [], null, null, null, ap, rp)),
            s.Fb(6144, null, Zd, null, [Xd]),
            s.Fb(6144, null, qd, null, [Zd]),
            s.rb(41, 1294336, [['languageMenu', 4]], 3, Xd, [s.k, s.y, Qd], null, null),
            s.Gb(603979776, 4, { _allItems: 1 }),
            s.Gb(603979776, 5, { items: 1 }),
            s.Gb(603979776, 6, { lazyContent: 0 }),
            (t()(), s.Ib(-1, 0, ['\n            '])),
            (t()(), s.hb(16777216, null, 0, 1, null, Af)),
            s.rb(47, 278528, null, 0, r.j, [s.O, s.L, s.r], { ngForOf: [0, 'ngForOf'] }, null),
            (t()(), s.Ib(-1, 0, ['\n          '])),
            (t()(), s.Ib(-1, null, ['\n        '])),
            (t()(), s.Ib(-1, 0, ['\n      '])),
            (t()(), s.Ib(-1, 0, ['\n      '])),
            (t()(), s.sb(52, 0, null, 0, 44, 'nav', [], null, null, null, null, null)),
            (t()(), s.Ib(-1, null, ['\n        '])),
            (t()(),
            s.sb(54, 0, null, null, 41, 'mat-list', [['class', 'mat-list mat-list-base']], null, null, null, wf, vf)),
            s.rb(55, 704512, null, 0, ff, [s.k], null, null),
            (t()(), s.Ib(-1, 0, ['\n          '])),
            (t()(),
            s.sb(
              57,
              0,
              null,
              0,
              1,
              'mat-divider',
              [['class', 'mat-divider'], ['role', 'separator']],
              [
                [1, 'aria-orientation', 0],
                [2, 'mat-divider-vertical', null],
                [2, 'mat-divider-horizontal', null],
                [2, 'mat-divider-inset', null]
              ],
              null,
              null,
              Sf,
              Ef
            )),
            s.rb(58, 49152, null, 0, _f, [], null, null),
            (t()(), s.Ib(-1, 0, ['\n          '])),
            (t()(),
            s.sb(
              60,
              0,
              null,
              0,
              13,
              'a',
              [
                ['class', 'mat-list-item'],
                ['mat-list-item', ''],
                ['routerLink', '/home'],
                ['routerLinkActive', 'active']
              ],
              [
                [2, 'mat-list-item-avatar', null],
                [2, 'mat-list-item-with-avatar', null],
                [1, 'target', 0],
                [8, 'href', 4]
              ],
              [[null, 'click']],
              function(t, e, n) {
                var i = !0,
                  r = t.component;
                return (
                  'click' === e && (i = !1 !== s.Db(t, 65).onClick(n.button, n.ctrlKey, n.metaKey, n.shiftKey) && i),
                  'click' === e && (i = !1 !== (r.isMobile && s.Db(t, 12).close()) && i),
                  i
                );
              },
              xf,
              Cf
            )),
            s.rb(61, 1228800, null, 3, gf, [s.k, s.h, [2, mf], [2, ff]], null, null),
            s.Gb(603979776, 7, { _lines: 1 }),
            s.Gb(603979776, 8, { _avatar: 0 }),
            s.Gb(603979776, 9, { _icon: 0 }),
            s.rb(65, 671744, [[11, 4]], 0, Kn, [qn, Pe, r.h], { routerLink: [0, 'routerLink'] }, null),
            s.rb(
              66,
              1720320,
              null,
              2,
              Qn,
              [qn, s.k, s.D, [2, Wn], [2, Kn]],
              { routerLinkActive: [0, 'routerLinkActive'] },
              null
            ),
            s.Gb(603979776, 10, { links: 1 }),
            s.Gb(603979776, 11, { linksWithHrefs: 1 }),
            (t()(), s.Ib(-1, 2, ['\n            '])),
            (t()(), s.sb(70, 0, null, 2, 2, 'span', [['translate', '']], null, null, null, null, null)),
            s.rb(71, 8536064, null, 0, zs, [Hs, s.k, s.h], { translate: [0, 'translate'] }, null),
            (t()(), s.Ib(-1, null, ['Home'])),
            (t()(), s.Ib(-1, 2, ['\n          '])),
            (t()(), s.Ib(-1, 0, ['\n          '])),
            (t()(),
            s.sb(
              75,
              0,
              null,
              0,
              1,
              'mat-divider',
              [['class', 'mat-divider'], ['role', 'separator']],
              [
                [1, 'aria-orientation', 0],
                [2, 'mat-divider-vertical', null],
                [2, 'mat-divider-horizontal', null],
                [2, 'mat-divider-inset', null]
              ],
              null,
              null,
              Sf,
              Ef
            )),
            s.rb(76, 49152, null, 0, _f, [], null, null),
            (t()(), s.Ib(-1, 0, ['\n          '])),
            (t()(),
            s.sb(
              78,
              0,
              null,
              0,
              13,
              'a',
              [
                ['class', 'mat-list-item'],
                ['mat-list-item', ''],
                ['routerLink', '/about'],
                ['routerLinkActive', 'active']
              ],
              [
                [2, 'mat-list-item-avatar', null],
                [2, 'mat-list-item-with-avatar', null],
                [1, 'target', 0],
                [8, 'href', 4]
              ],
              [[null, 'click']],
              function(t, e, n) {
                var i = !0,
                  r = t.component;
                return (
                  'click' === e && (i = !1 !== s.Db(t, 83).onClick(n.button, n.ctrlKey, n.metaKey, n.shiftKey) && i),
                  'click' === e && (i = !1 !== (r.isMobile && s.Db(t, 12).close()) && i),
                  i
                );
              },
              xf,
              Cf
            )),
            s.rb(79, 1228800, null, 3, gf, [s.k, s.h, [2, mf], [2, ff]], null, null),
            s.Gb(603979776, 12, { _lines: 1 }),
            s.Gb(603979776, 13, { _avatar: 0 }),
            s.Gb(603979776, 14, { _icon: 0 }),
            s.rb(83, 671744, [[16, 4]], 0, Kn, [qn, Pe, r.h], { routerLink: [0, 'routerLink'] }, null),
            s.rb(
              84,
              1720320,
              null,
              2,
              Qn,
              [qn, s.k, s.D, [2, Wn], [2, Kn]],
              { routerLinkActive: [0, 'routerLinkActive'] },
              null
            ),
            s.Gb(603979776, 15, { links: 1 }),
            s.Gb(603979776, 16, { linksWithHrefs: 1 }),
            (t()(), s.Ib(-1, 2, ['\n            '])),
            (t()(), s.sb(88, 0, null, 2, 2, 'span', [['translate', '']], null, null, null, null, null)),
            s.rb(89, 8536064, null, 0, zs, [Hs, s.k, s.h], { translate: [0, 'translate'] }, null),
            (t()(), s.Ib(-1, null, ['About'])),
            (t()(), s.Ib(-1, 2, ['\n          '])),
            (t()(), s.Ib(-1, 0, ['\n          '])),
            (t()(),
            s.sb(
              93,
              0,
              null,
              0,
              1,
              'mat-divider',
              [['class', 'mat-divider'], ['role', 'separator']],
              [
                [1, 'aria-orientation', 0],
                [2, 'mat-divider-vertical', null],
                [2, 'mat-divider-horizontal', null],
                [2, 'mat-divider-inset', null]
              ],
              null,
              null,
              Sf,
              Ef
            )),
            s.rb(94, 49152, null, 0, _f, [], null, null),
            (t()(), s.Ib(-1, 0, ['\n        '])),
            (t()(), s.Ib(-1, null, ['\n      '])),
            (t()(), s.Ib(-1, 0, ['\n    '])),
            (t()(), s.Ib(-1, 2, ['\n    '])),
            (t()(),
            s.sb(
              99,
              0,
              null,
              1,
              22,
              'mat-sidenav-content',
              [['class', 'mat-drawer-content mat-sidenav-content']],
              [[4, 'margin-left', 'px'], [4, 'margin-right', 'px']],
              null,
              null,
              Em,
              xm
            )),
            s.rb(100, 1294336, [[2, 4]], 0, ym, [s.h, wm, s.k, io, s.y], null, null),
            (t()(), s.Ib(-1, 0, ['\n      '])),
            (t()(),
            s.sb(
              102,
              0,
              null,
              0,
              15,
              'mat-toolbar',
              [['class', 'mat-elevation-z6 mat-toolbar'], ['color', 'primary']],
              [[2, 'mat-toolbar-multiple-rows', null], [2, 'mat-toolbar-single-row', null]],
              null,
              null,
              qm,
              $m
            )),
            s.rb(103, 4243456, null, 1, Hm, [s.k, Zr, r.d], { color: [0, 'color'] }, null),
            s.Gb(603979776, 17, { _toolbarRows: 1 }),
            (t()(), s.Ib(-1, 0, ['\n        '])),
            (t()(),
            s.sb(
              106,
              0,
              null,
              0,
              7,
              'button',
              [['class', 'menu-button'], ['fxHide.gt-sm', ''], ['mat-icon-button', '']],
              [[1, 'disabled', 0], [2, '_mat-animation-noopable', null]],
              [[null, 'click']],
              function(t, e, n) {
                var i = !0;
                return 'click' === e && (i = !1 !== s.Db(t, 12).toggle() && i), i;
              },
              Ou,
              Tu
            )),
            s.rb(
              107,
              4866048,
              null,
              0,
              Fm,
              [s.k, Nm, $p, Yp, mp, s.A, [2, fp]],
              { 'fxHide.gt-sm': [0, 'fxHide.gt-sm'] },
              null
            ),
            s.rb(108, 180224, null, 0, jl, [s.k, ma, [2, Du]], null, null),
            (t()(), s.Ib(-1, 0, ['\n          '])),
            (t()(),
            s.sb(
              110,
              0,
              null,
              0,
              2,
              'mat-icon',
              [['class', 'mat-icon notranslate'], ['role', 'img']],
              [[2, 'mat-icon-inline', null], [2, 'mat-icon-no-color', null]],
              null,
              null,
              cf,
              lf
            )),
            s.rb(111, 9158656, null, 0, of, [s.k, Gm, [8, null], [2, ef]], null, null),
            (t()(), s.Ib(-1, 0, ['menu'])),
            (t()(), s.Ib(-1, 0, ['\n        '])),
            (t()(), s.Ib(-1, 0, ['\n        '])),
            (t()(), s.sb(115, 0, null, 0, 1, 'span', [], null, null, null, null, null)),
            (t()(), s.Ib(116, null, ['', ''])),
            (t()(), s.Ib(-1, 0, ['\n      '])),
            (t()(), s.Ib(-1, 0, ['\n      '])),
            (t()(), s.sb(119, 16777216, null, 0, 1, 'router-outlet', [], null, null, null, null, null)),
            s.rb(120, 212992, null, 0, Xn, [Zn, s.O, s.j, [8, null], s.h], null, null),
            (t()(), s.Ib(-1, 0, ['\n    '])),
            (t()(), s.Ib(-1, 2, ['\n  '])),
            (t()(), s.Ib(-1, null, ['\n'])),
            (t()(), s.Ib(-1, null, ['\n']))
          ],
          function(t, e) {
            var n = e.component;
            t(e, 1, 0, ''),
              t(e, 5, 0),
              t(e, 11, 0, 'has-border'),
              t(e, 12, 0, n.isMobile ? 'over' : 'side', !n.isMobile, !n.isMobile),
              t(e, 15, 0, 'primary'),
              t(e, 19, 0, ''),
              t(e, 23, 0, ''),
              t(e, 31, 0, s.Db(e, 41)),
              t(e, 34, 0),
              t(e, 41, 0),
              t(e, 47, 0, n.languages),
              t(e, 65, 0, '/home'),
              t(e, 66, 0, 'active'),
              t(e, 71, 0, ''),
              t(e, 83, 0, '/about'),
              t(e, 84, 0, 'active'),
              t(e, 89, 0, ''),
              t(e, 100, 0),
              t(e, 103, 0, 'primary'),
              t(e, 107, 0, ''),
              t(e, 111, 0),
              t(e, 120, 0);
          },
          function(t, e) {
            var n = e.component;
            t(e, 3, 0, s.Db(e, 5)._backdropOverride),
              t(
                e,
                9,
                0,
                null,
                'end' === s.Db(e, 12).position,
                'over' === s.Db(e, 12).mode,
                'push' === s.Db(e, 12).mode,
                'side' === s.Db(e, 12).mode,
                s.Db(e, 12).fixedInViewport,
                s.Db(e, 12).fixedInViewport ? s.Db(e, 12).fixedTopGap : null,
                s.Db(e, 12).fixedInViewport ? s.Db(e, 12).fixedBottomGap : null,
                s.Db(e, 12)._animationState
              ),
              t(e, 14, 0, s.Db(e, 15)._toolbarRows.length > 0, 0 === s.Db(e, 15)._toolbarRows.length),
              t(
                e,
                29,
                0,
                s.Db(e, 30).disabled || null,
                'NoopAnimations' === s.Db(e, 30)._animationMode,
                s.Db(e, 31).menuOpen || null
              ),
              t(
                e,
                33,
                0,
                s.Db(e, 34).inline,
                'primary' !== s.Db(e, 34).color && 'accent' !== s.Db(e, 34).color && 'warn' !== s.Db(e, 34).color
              ),
              t(
                e,
                57,
                0,
                s.Db(e, 58).vertical ? 'vertical' : 'horizontal',
                s.Db(e, 58).vertical,
                !s.Db(e, 58).vertical,
                s.Db(e, 58).inset
              ),
              t(
                e,
                60,
                0,
                s.Db(e, 61)._avatar || s.Db(e, 61)._icon,
                s.Db(e, 61)._avatar || s.Db(e, 61)._icon,
                s.Db(e, 65).target,
                s.Db(e, 65).href
              ),
              t(
                e,
                75,
                0,
                s.Db(e, 76).vertical ? 'vertical' : 'horizontal',
                s.Db(e, 76).vertical,
                !s.Db(e, 76).vertical,
                s.Db(e, 76).inset
              ),
              t(
                e,
                78,
                0,
                s.Db(e, 79)._avatar || s.Db(e, 79)._icon,
                s.Db(e, 79)._avatar || s.Db(e, 79)._icon,
                s.Db(e, 83).target,
                s.Db(e, 83).href
              ),
              t(
                e,
                93,
                0,
                s.Db(e, 94).vertical ? 'vertical' : 'horizontal',
                s.Db(e, 94).vertical,
                !s.Db(e, 94).vertical,
                s.Db(e, 94).inset
              ),
              t(e, 99, 0, s.Db(e, 100)._container._contentMargins.left, s.Db(e, 100)._container._contentMargins.right),
              t(e, 102, 0, s.Db(e, 103)._toolbarRows.length > 0, 0 === s.Db(e, 103)._toolbarRows.length),
              t(e, 106, 0, s.Db(e, 108).disabled || null, 'NoopAnimations' === s.Db(e, 108)._animationMode),
              t(
                e,
                110,
                0,
                s.Db(e, 111).inline,
                'primary' !== s.Db(e, 111).color && 'accent' !== s.Db(e, 111).color && 'warn' !== s.Db(e, 111).color
              ),
              t(e, 116, 0, n.title);
          }
        );
      }
      function Of(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 1, 'app-shell', [], null, null, null, Tf, Df)),
            s.rb(1, 114688, null, 0, kf, [qn, Et.h, Hp, Ys], null, null)
          ],
          function(t, e) {
            t(e, 1, 0);
          },
          null
        );
      }
      var If = s.ob('app-shell', kf, Of, {}, {}, []);
      let Rf = (() => class {})(),
        Pf = (() => class {})(),
        Nf = (() => class {})(),
        Mf = (() =>
          class {
            constructor(t) {
              this._animationMode = t;
            }
          })(),
        Lf = (() => class {})();
      var jf = s.qb({
        encapsulation: 2,
        styles: [
          '.mat-card{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}@media (-ms-high-contrast:active){.mat-card{outline:solid 1px}}.mat-card-actions,.mat-card-content,.mat-card-subtitle{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media (max-width:599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card-content>:first-child,.mat-card>:first-child{margin-top:0}.mat-card-content>:last-child:not(.mat-card-footer),.mat-card>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child{margin-left:0;margin-right:0}.mat-card-subtitle:not(:first-child),.mat-card-title:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}'
        ],
        data: {}
      });
      function Ff(t) {
        return s.Kb(2, [s.Cb(null, 0), s.Cb(null, 1)], null, null);
      }
      const Bf = 100,
        Vf = 10;
      class Uf {
        constructor(t) {
          this._elementRef = t;
        }
      }
      const Hf = Ca(Uf, 'primary'),
        zf = new s.p('mat-progress-spinner-default-options', {
          providedIn: 'root',
          factory: function() {
            return { diameter: Bf };
          }
        }),
        $f =
          '\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n';
      let qf = (() => {
          class t extends Hf {
            constructor(e, n, s, i, r) {
              super(e),
                (this._elementRef = e),
                (this._document = s),
                (this._diameter = Bf),
                (this._value = 0),
                (this._fallbackAnimation = !1),
                (this.mode = 'determinate');
              const o = t._diameters;
              o.has(s.head) || o.set(s.head, new Set([Bf])),
                (this._styleRoot =
                  (function(t, e) {
                    if ('undefined' != typeof window) {
                      const n = e.head;
                      if (n && (n.createShadowRoot || n.attachShadow)) {
                        const e = t.getRootNode ? t.getRootNode() : null;
                        if (e instanceof window.ShadowRoot) return e;
                      }
                    }
                    return null;
                  })(e.nativeElement, s) || s.head),
                (this._fallbackAnimation = n.EDGE || n.TRIDENT),
                (this._noopAnimations = 'NoopAnimations' === i && !!r && !r._forceAnimations),
                r && (r.diameter && (this.diameter = r.diameter), r.strokeWidth && (this.strokeWidth = r.strokeWidth)),
                e.nativeElement.classList.add(
                  `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`
                );
            }
            get diameter() {
              return this._diameter;
            }
            set diameter(e) {
              if (((this._diameter = xr(e)), !this._fallbackAnimation)) {
                const e = t._diameters.get(this._styleRoot);
                (e && e.has(this._diameter)) || this._attachStyleNode();
              }
            }
            get strokeWidth() {
              return this._strokeWidth || this.diameter / 10;
            }
            set strokeWidth(t) {
              this._strokeWidth = xr(t);
            }
            get value() {
              return 'determinate' === this.mode ? this._value : 0;
            }
            set value(t) {
              this._value = Math.max(0, Math.min(100, xr(t)));
            }
            get _circleRadius() {
              return (this.diameter - Vf) / 2;
            }
            get _viewBox() {
              const t = 2 * this._circleRadius + this.strokeWidth;
              return `0 0 ${t} ${t}`;
            }
            get _strokeCircumference() {
              return 2 * Math.PI * this._circleRadius;
            }
            get _strokeDashOffset() {
              return 'determinate' === this.mode
                ? (this._strokeCircumference * (100 - this._value)) / 100
                : this._fallbackAnimation && 'indeterminate' === this.mode
                ? 0.2 * this._strokeCircumference
                : null;
            }
            get _circleStrokeWidth() {
              return (this.strokeWidth / this.diameter) * 100;
            }
            _attachStyleNode() {
              const e = this._document.createElement('style'),
                n = this._styleRoot,
                s = this._diameter,
                i = t._diameters;
              let r = i.get(n);
              e.setAttribute('mat-spinner-animation', s + ''),
                (e.textContent = this._getAnimationText()),
                n.appendChild(e),
                r || ((r = new Set()), i.set(n, r)),
                r.add(s);
            }
            _getAnimationText() {
              return $f
                .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)
                .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)
                .replace(/DIAMETER/g, `${this.diameter}`);
            }
          }
          return (t._diameters = new WeakMap()), t;
        })(),
        Wf = (() => class {})();
      var Kf = s.qb({
        encapsulation: 2,
        styles: [
          '.mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}'
        ],
        data: {}
      });
      function Yf(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              0,
              ':svg:circle',
              [['cx', '50%'], ['cy', '50%']],
              [
                [1, 'r', 0],
                [4, 'animation-name', null],
                [4, 'stroke-dashoffset', 'px'],
                [4, 'stroke-dasharray', 'px'],
                [4, 'stroke-width', '%']
              ],
              null,
              null,
              null,
              null
            ))
          ],
          null,
          function(t, e) {
            var n = e.component;
            t(
              e,
              0,
              0,
              n._circleRadius,
              'mat-progress-spinner-stroke-rotate-' + n.diameter,
              n._strokeDashOffset,
              n._strokeCircumference,
              n._circleStrokeWidth
            );
          }
        );
      }
      function Qf(t) {
        return s.Kb(
          0,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              0,
              ':svg:circle',
              [['cx', '50%'], ['cy', '50%']],
              [[1, 'r', 0], [4, 'stroke-dashoffset', 'px'], [4, 'stroke-dasharray', 'px'], [4, 'stroke-width', '%']],
              null,
              null,
              null,
              null
            ))
          ],
          null,
          function(t, e) {
            var n = e.component;
            t(e, 0, 0, n._circleRadius, n._strokeDashOffset, n._strokeCircumference, n._circleStrokeWidth);
          }
        );
      }
      function Gf(t) {
        return s.Kb(
          2,
          [
            (t()(),
            s.sb(
              0,
              0,
              null,
              null,
              5,
              ':svg:svg',
              [['focusable', 'false'], ['preserveAspectRatio', 'xMidYMid meet']],
              [[4, 'width', 'px'], [4, 'height', 'px'], [1, 'viewBox', 0]],
              null,
              null,
              null,
              null
            )),
            s.rb(1, 16384, null, 0, r.o, [], { ngSwitch: [0, 'ngSwitch'] }, null),
            (t()(), s.hb(16777216, null, null, 1, null, Yf)),
            s.rb(3, 278528, null, 0, r.p, [s.O, s.L, r.o], { ngSwitchCase: [0, 'ngSwitchCase'] }, null),
            (t()(), s.hb(16777216, null, null, 1, null, Qf)),
            s.rb(5, 278528, null, 0, r.p, [s.O, s.L, r.o], { ngSwitchCase: [0, 'ngSwitchCase'] }, null)
          ],
          function(t, e) {
            t(e, 1, 0, 'indeterminate' === e.component.mode), t(e, 3, 0, !0), t(e, 5, 0, !1);
          },
          function(t, e) {
            var n = e.component;
            t(e, 0, 0, n.diameter, n.diameter, n._viewBox);
          }
        );
      }
      class Zf {
        constructor() {
          (this.isLoading = !1), (this.size = 1);
        }
        ngOnInit() {}
      }
      var Xf = s.qb({
        encapsulation: 0,
        styles: [
          [
            '.mat-progress-spinner[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.message[_ngcontent-%COMP%]{margin-left:.5em}'
          ]
        ],
        data: {}
      });
      function Jf(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 7, 'div', [], [[8, 'hidden', 0]], null, null, null, null)),
            (t()(), s.Ib(-1, null, ['\n  '])),
            (t()(),
            s.sb(
              2,
              0,
              null,
              null,
              1,
              'mat-progress-spinner',
              [['class', 'mat-progress-spinner'], ['mode', 'indeterminate'], ['role', 'progressbar']],
              [
                [2, '_mat-animation-noopable', null],
                [4, 'width', 'px'],
                [4, 'height', 'px'],
                [1, 'aria-valuemin', 0],
                [1, 'aria-valuemax', 0],
                [1, 'aria-valuenow', 0],
                [1, 'mode', 0]
              ],
              null,
              null,
              Gf,
              Kf
            )),
            s.rb(
              3,
              49152,
              null,
              0,
              qf,
              [s.k, Zr, [2, r.d], [2, Du], zf],
              { diameter: [0, 'diameter'], strokeWidth: [1, 'strokeWidth'], mode: [2, 'mode'] },
              null
            ),
            (t()(), s.Ib(-1, null, ['\n  '])),
            (t()(), s.sb(5, 0, null, null, 1, 'span', [['class', 'message']], null, null, null, null, null)),
            (t()(), s.Ib(6, null, ['', ''])),
            (t()(), s.Ib(-1, null, ['\n'])),
            (t()(), s.Ib(-1, null, ['\n']))
          ],
          function(t, e) {
            t(e, 3, 0, 32 * e.component.size, 2, 'indeterminate');
          },
          function(t, e) {
            var n = e.component;
            t(e, 0, 0, !n.isLoading),
              t(
                e,
                2,
                0,
                s.Db(e, 3)._noopAnimations,
                s.Db(e, 3).diameter,
                s.Db(e, 3).diameter,
                'determinate' === s.Db(e, 3).mode ? 0 : null,
                'determinate' === s.Db(e, 3).mode ? 100 : null,
                'determinate' === s.Db(e, 3).mode ? s.Db(e, 3).value : null,
                s.Db(e, 3).mode
              ),
              t(e, 6, 0, n.message);
          }
        );
      }
      const tg = { quote: t => `/jokes/random?category=${t.category}` };
      let eg = (() => {
        class t {
          constructor(t) {
            this.httpClient = t;
          }
          getRandomQuote(t) {
            return this.httpClient
              .cache()
              .get(tg.quote(t))
              .pipe(
                Object(D.a)(t => t.value),
                Y(() => c('Error, could not load joke :-('))
              );
          }
        }
        return (
          (t.ngInjectableDef = s.Ob({
            factory: function() {
              return new t(s.Pb(ui));
            },
            token: t,
            providedIn: 'root'
          })),
          t
        );
      })();
      class ng {
        constructor(t) {
          (this.quoteService = t), (this.isLoading = !1);
        }
        ngOnInit() {
          (this.isLoading = !0),
            this.quoteService
              .getRandomQuote({ category: 'dev' })
              .pipe(
                wt(() => {
                  this.isLoading = !1;
                })
              )
              .subscribe(t => {
                this.quote = t;
              });
        }
      }
      var sg = s.qb({
        encapsulation: 0,
        styles: [
          [
            '@charset "UTF-8";.container[_ngcontent-%COMP%]{text-align:center;padding:1em}.logo[_ngcontent-%COMP%]{width:150px;margin:0 auto}q[_ngcontent-%COMP%]{font-style:italic;quotes:"\xab " " \xbb"}'
          ]
        ],
        data: {}
      });
      function ig(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 29, 'div', [['class', 'container']], null, null, null, null, null)),
            (t()(), s.Ib(-1, null, ['\n  '])),
            (t()(),
            s.sb(
              2,
              0,
              null,
              null,
              26,
              'mat-card',
              [['class', 'mat-card']],
              [[2, '_mat-animation-noopable', null]],
              null,
              null,
              Ff,
              jf
            )),
            s.rb(3, 49152, null, 0, Mf, [[2, Du]], null, null),
            (t()(), s.Ib(-1, 0, ['\n    '])),
            (t()(), s.sb(5, 0, null, 0, 3, 'p', [], null, null, null, null, null)),
            (t()(), s.Ib(-1, null, ['\n      '])),
            (t()(),
            s.sb(
              7,
              0,
              null,
              null,
              0,
              'img',
              [['alt', 'angular logo'], ['class', 'logo'], ['src', 'assets/ngx-rocket-logo.png']],
              null,
              null,
              null,
              null,
              null
            )),
            (t()(), s.Ib(-1, null, ['\n    '])),
            (t()(), s.Ib(-1, 0, ['\n    '])),
            (t()(),
            s.sb(
              10,
              0,
              null,
              0,
              17,
              'mat-card-content',
              [['class', 'mat-card-content']],
              null,
              null,
              null,
              null,
              null
            )),
            s.rb(11, 16384, null, 0, Rf, [], null, null),
            (t()(), s.Ib(-1, null, ['\n      '])),
            (t()(),
            s.sb(
              13,
              0,
              null,
              null,
              3,
              'mat-card-title',
              [['class', 'mat-card-title'], ['translate', '']],
              null,
              null,
              null,
              null,
              null
            )),
            s.rb(14, 8536064, null, 0, zs, [Hs, s.k, s.h], { translate: [0, 'translate'] }, null),
            s.rb(15, 16384, null, 0, Pf, [], null, null),
            (t()(), s.Ib(-1, null, ['Hello world !'])),
            (t()(), s.Ib(-1, null, ['\n      '])),
            (t()(),
            s.sb(
              18,
              0,
              null,
              null,
              8,
              'mat-card-subtitle',
              [['class', 'mat-card-subtitle']],
              null,
              null,
              null,
              null,
              null
            )),
            s.rb(19, 16384, null, 0, Nf, [], null, null),
            (t()(), s.Ib(-1, null, ['\n        '])),
            (t()(), s.sb(21, 0, null, null, 1, 'app-loader', [['size', '1.5']], null, null, null, Jf, Xf)),
            s.rb(22, 114688, null, 0, Zf, [], { isLoading: [0, 'isLoading'], size: [1, 'size'] }, null),
            (t()(), s.Ib(-1, null, ['\n        '])),
            (t()(), s.sb(24, 0, null, null, 1, 'q', [], [[8, 'hidden', 0]], null, null, null, null)),
            (t()(), s.Ib(25, null, ['', ''])),
            (t()(), s.Ib(-1, null, ['\n      '])),
            (t()(), s.Ib(-1, null, ['\n    '])),
            (t()(), s.Ib(-1, 0, ['\n  '])),
            (t()(), s.Ib(-1, null, ['\n'])),
            (t()(), s.Ib(-1, null, ['\n']))
          ],
          function(t, e) {
            var n = e.component;
            t(e, 14, 0, ''), t(e, 22, 0, n.isLoading, '1.5');
          },
          function(t, e) {
            var n = e.component;
            t(e, 2, 0, 'NoopAnimations' === s.Db(e, 3)._animationMode), t(e, 24, 0, n.isLoading), t(e, 25, 0, n.quote);
          }
        );
      }
      function rg(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 1, 'app-home', [], null, null, null, ig, sg)),
            s.rb(1, 114688, null, 0, ng, [eg], null, null)
          ],
          function(t, e) {
            t(e, 1, 0);
          },
          null
        );
      }
      var og = s.ob('app-home', ng, rg, {}, {}, []);
      class ag {
        constructor() {
          this.version = ws.a.version;
        }
        ngOnInit() {}
      }
      var lg = s.qb({
        encapsulation: 0,
        styles: [
          [
            '.container[_ngcontent-%COMP%]{text-align:center;padding:1rem}.mat-icon[_ngcontent-%COMP%]{vertical-align:middle}'
          ]
        ],
        data: {}
      });
      function cg(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 25, 'div', [['class', 'container']], null, null, null, null, null)),
            (t()(), s.Ib(-1, null, ['\n  '])),
            (t()(),
            s.sb(
              2,
              0,
              null,
              null,
              22,
              'mat-card',
              [['class', 'mat-card']],
              [[2, '_mat-animation-noopable', null]],
              null,
              null,
              Ff,
              jf
            )),
            s.rb(3, 49152, null, 0, Mf, [[2, Du]], null, null),
            (t()(), s.Ib(-1, 0, ['\n    '])),
            (t()(), s.sb(5, 0, null, 0, 6, 'h1', [], null, null, null, null, null)),
            (t()(), s.Ib(-1, null, ['\n      '])),
            (t()(),
            s.sb(
              7,
              0,
              null,
              null,
              3,
              'mat-card-title',
              [['class', 'mat-card-title'], ['translate', '']],
              null,
              null,
              null,
              null,
              null
            )),
            s.rb(8, 8536064, null, 0, zs, [Hs, s.k, s.h], { translate: [0, 'translate'] }, null),
            s.rb(9, 16384, null, 0, Pf, [], null, null),
            (t()(), s.Ib(-1, null, ['APP_NAME'])),
            (t()(), s.Ib(-1, null, ['\n    '])),
            (t()(), s.Ib(-1, 0, ['\n    '])),
            (t()(),
            s.sb(
              13,
              0,
              null,
              0,
              10,
              'mat-card-content',
              [['class', 'mat-card-content']],
              null,
              null,
              null,
              null,
              null
            )),
            s.rb(14, 16384, null, 0, Rf, [], null, null),
            (t()(), s.Ib(-1, null, ['\n      '])),
            (t()(),
            s.sb(
              16,
              0,
              null,
              null,
              2,
              'mat-icon',
              [['class', 'mat-icon notranslate'], ['role', 'img']],
              [[2, 'mat-icon-inline', null], [2, 'mat-icon-no-color', null]],
              null,
              null,
              cf,
              lf
            )),
            s.rb(17, 9158656, null, 0, of, [s.k, Gm, [8, null], [2, ef]], null, null),
            (t()(), s.Ib(-1, 0, ['code'])),
            (t()(), s.Ib(-1, null, ['\n      '])),
            (t()(), s.sb(20, 0, null, null, 2, 'span', [['translate', '']], null, null, null, null, null)),
            s.rb(21, 8536064, null, 0, zs, [Hs, s.k, s.h], { translate: [0, 'translate'] }, null),
            (t()(), s.Ib(-1, null, ['Version'])),
            (t()(), s.Ib(23, null, [' ', '\n    '])),
            (t()(), s.Ib(-1, 0, ['\n  '])),
            (t()(), s.Ib(-1, null, ['\n'])),
            (t()(), s.Ib(-1, null, ['\n']))
          ],
          function(t, e) {
            t(e, 8, 0, ''), t(e, 17, 0), t(e, 21, 0, '');
          },
          function(t, e) {
            var n = e.component;
            t(e, 2, 0, 'NoopAnimations' === s.Db(e, 3)._animationMode),
              t(
                e,
                16,
                0,
                s.Db(e, 17).inline,
                'primary' !== s.Db(e, 17).color && 'accent' !== s.Db(e, 17).color && 'warn' !== s.Db(e, 17).color
              ),
              t(e, 23, 0, n.version);
          }
        );
      }
      function hg(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 1, 'app-about', [], null, null, null, cg, lg)),
            s.rb(1, 114688, null, 0, ag, [], null, null)
          ],
          function(t, e) {
            t(e, 1, 0);
          },
          null
        );
      }
      var ug = s.ob('app-about', ag, hg, {}, {}, []),
        dg = s.qb({
          encapsulation: 0,
          styles: [['[_nghost-%COMP%]{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}']],
          data: {}
        });
      function pg(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 16777216, null, null, 1, 'router-outlet', [], null, null, null, null, null)),
            s.rb(1, 212992, null, 0, Xn, [Zn, s.O, s.j, [8, null], s.h], null, null),
            (t()(), s.Ib(-1, null, ['\n']))
          ],
          function(t, e) {
            t(e, 1, 0);
          },
          null
        );
      }
      function mg(t) {
        return s.Kb(
          0,
          [
            (t()(), s.sb(0, 0, null, null, 1, 'app-root', [], null, null, null, pg, dg)),
            s.rb(1, 245760, null, 0, zi, [qn, Pe, Et.h, Hs, Ys], null, null)
          ],
          function(t, e) {
            t(e, 1, 0);
          },
          null
        );
      }
      var fg = s.ob('app-root', zi, mg, {}, {}, []);
      const gg = new m.a(ft.a);
      var bg = n('oB13');
      const _g = 'Service workers are disabled or not supported by this browser';
      class yg {
        constructor(t) {
          if (((this.serviceWorker = t), t)) {
            const e = Dr(t, 'controllerchange').pipe(Object(D.a)(() => t.controller)),
              n = at(k(() => c(t.controller)), e);
            (this.worker = n.pipe(I(t => !!t))), (this.registration = this.worker.pipe(it(() => t.getRegistration())));
            const s = Dr(t, 'message')
              .pipe(Object(D.a)(t => t.data))
              .pipe(I(t => t && t.type))
              .pipe(Object(bg.a)(new u.a()));
            s.connect(), (this.events = s);
          } else this.worker = this.events = this.registration = ((e = _g), k(() => Wr(new Error(e))));
          var e;
        }
        postMessage(t, e) {
          return this.worker
            .pipe(
              Z(1),
              bt(n => {
                n.postMessage(Object.assign({ action: t }, e));
              })
            )
            .toPromise()
            .then(() => void 0);
        }
        postMessageWithStatus(t, e, n) {
          const s = this.waitForStatus(n),
            i = this.postMessage(t, e);
          return Promise.all([s, i]).then(() => void 0);
        }
        generateNonce() {
          return Math.round(1e7 * Math.random());
        }
        eventsOfType(t) {
          return this.events.pipe(I(e => e.type === t));
        }
        nextEventOfType(t) {
          return this.eventsOfType(t).pipe(Z(1));
        }
        waitForStatus(t) {
          return this.eventsOfType('STATUS')
            .pipe(
              I(e => e.nonce === t),
              Z(1),
              Object(D.a)(t => {
                if (!t.status) throw new Error(t.error);
              })
            )
            .toPromise();
        }
        get isEnabled() {
          return !!this.serviceWorker;
        }
      }
      let vg = (() =>
          class {
            constructor(t) {
              if (((this.sw = t), (this.subscriptionChanges = new u.a()), !t.isEnabled))
                return (this.messages = gg), (this.notificationClicks = gg), void (this.subscription = gg);
              (this.messages = this.sw.eventsOfType('PUSH').pipe(Object(D.a)(t => t.data))),
                (this.notificationClicks = this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(Object(D.a)(t => t.data))),
                (this.pushManager = this.sw.registration.pipe(Object(D.a)(t => t.pushManager)));
              const e = this.pushManager.pipe(it(t => t.getSubscription()));
              this.subscription = Object(vs.a)(e, this.subscriptionChanges);
            }
            get isEnabled() {
              return this.sw.isEnabled;
            }
            requestSubscription(t) {
              if (!this.sw.isEnabled) return Promise.reject(new Error(_g));
              const e = { userVisibleOnly: !0 };
              let n = this.decodeBase64(t.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+')),
                s = new Uint8Array(new ArrayBuffer(n.length));
              for (let i = 0; i < n.length; i++) s[i] = n.charCodeAt(i);
              return (
                (e.applicationServerKey = s),
                this.pushManager
                  .pipe(
                    it(t => t.subscribe(e)),
                    Z(1)
                  )
                  .toPromise()
                  .then(t => (this.subscriptionChanges.next(t), t))
              );
            }
            unsubscribe() {
              return this.sw.isEnabled
                ? this.subscription
                    .pipe(
                      Z(1),
                      it(t => {
                        if (null === t) throw new Error('Not subscribed to push notifications.');
                        return t.unsubscribe().then(t => {
                          if (!t) throw new Error('Unsubscribe failed!');
                          this.subscriptionChanges.next(null);
                        });
                      })
                    )
                    .toPromise()
                : Promise.reject(new Error(_g));
            }
            decodeBase64(t) {
              return atob(t);
            }
          })(),
        wg = (() =>
          class {
            constructor(t) {
              if (((this.sw = t), !t.isEnabled)) return (this.available = gg), void (this.activated = gg);
              (this.available = this.sw.eventsOfType('UPDATE_AVAILABLE')),
                (this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED'));
            }
            get isEnabled() {
              return this.sw.isEnabled;
            }
            checkForUpdate() {
              if (!this.sw.isEnabled) return Promise.reject(new Error(_g));
              const t = this.sw.generateNonce();
              return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', { statusNonce: t }, t);
            }
            activateUpdate() {
              if (!this.sw.isEnabled) return Promise.reject(new Error(_g));
              const t = this.sw.generateNonce();
              return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', { statusNonce: t }, t);
            }
          })();
      class Cg {}
      const xg = new s.p('NGSW_REGISTER_SCRIPT');
      function Eg(t, e, n, i) {
        return () => {
          if (!(Object(r.t)(i) && 'serviceWorker' in navigator && !1 !== n.enabled)) return;
          let o;
          if (
            (navigator.serviceWorker.addEventListener('controllerchange', () => {
              null !== navigator.serviceWorker.controller &&
                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });
            }),
            'function' == typeof n.registrationStrategy)
          )
            o = n.registrationStrategy();
          else {
            const [e, ...i] = (n.registrationStrategy || 'registerWhenStable').split(':');
            switch (e) {
              case 'registerImmediately':
                o = c(null);
                break;
              case 'registerWithDelay':
                o = c(null).pipe(Ud(+i[0] || 0));
                break;
              case 'registerWhenStable':
                o = t.get(s.g).isStable.pipe(I(t => t));
                break;
              default:
                throw new Error(`Unknown ServiceWorker registration strategy: ${n.registrationStrategy}`);
            }
          }
          o.pipe(Z(1)).subscribe(() =>
            navigator.serviceWorker
              .register(e, { scope: n.scope })
              .catch(t => console.error('Service worker registration failed with:', t))
          );
        };
      }
      function Sg(t, e) {
        return new yg(Object(r.t)(e) && !1 !== t.enabled ? navigator.serviceWorker : void 0);
      }
      let kg = (() => {
        class t {
          static register(e, n = {}) {
            return {
              ngModule: t,
              providers: [
                { provide: xg, useValue: e },
                { provide: Cg, useValue: n },
                { provide: yg, useFactory: Sg, deps: [Cg, s.A] },
                { provide: s.d, useFactory: Eg, deps: [s.q, xg, Cg, s.A], multi: !0 }
              ]
            };
          }
        }
        return t;
      })();
      const Dg = new s.p('mat-autocomplete-scroll-strategy');
      function Ag(t) {
        return () => t.scrollStrategies.reposition();
      }
      let Tg = (() => class {})();
      const Og = new s.p('mat-select-scroll-strategy');
      function Ig(t) {
        return () => t.scrollStrategies.reposition();
      }
      let Rg = (() => class {})(),
        Pg = (() => {
          class t {
            constructor() {
              (this.changes = new u.a()),
                (this.itemsPerPageLabel = 'Items per page:'),
                (this.nextPageLabel = 'Next page'),
                (this.previousPageLabel = 'Previous page'),
                (this.firstPageLabel = 'First page'),
                (this.lastPageLabel = 'Last page'),
                (this.getRangeLabel = (t, e, n) => {
                  if (0 == n || 0 == e) return `0 of ${n}`;
                  const s = t * e;
                  return `${s + 1} - ${s < (n = Math.max(n, 0)) ? Math.min(s + e, n) : s + e} of ${n}`;
                });
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t();
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })();
      function Ng(t) {
        return t || new Pg();
      }
      let Mg = (() => class {})(),
        Lg = (() => {
          class t {
            constructor() {
              (this.changes = new u.a()), (this.sortButtonLabel = t => `Change sorting for ${t}`);
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t();
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })();
      function jg(t) {
        return t || new Lg();
      }
      let Fg = (() => class {})(),
        Bg = (() => class {})(),
        Vg = (() => {
          class t {
            constructor() {
              (this.changes = new u.a()), (this.optionalLabel = 'Optional');
            }
          }
          return (
            (t.ngInjectableDef = Object(s.Ob)({
              factory: function() {
                return new t();
              },
              token: t,
              providedIn: 'root'
            })),
            t
          );
        })();
      function Ug(t) {
        return t || new Vg();
      }
      let Hg = (() => class {})(),
        zg = (() =>
          class {
            constructor(t) {
              this.template = t;
            }
          })(),
        $g = (() => class {})(),
        qg = (() => class {})(),
        Wg = (() => class {})(),
        Kg = (() => class {})(),
        Yg = (() => class {})();
      const Qg = new s.p('mat-chips-default-options');
      let Gg = (() => class {})(),
        Zg = (() => class {})(),
        Xg = (() => class {})(),
        Jg = (() => class {})(),
        tb = (() => class {})(),
        eb = (() => class {})(),
        nb = (() => class {})(),
        sb = (() => class {})(),
        ib = (() => class {})(),
        rb = (() => class {})(),
        ob = (() => class {})(),
        ab = (() => class {})(),
        lb = (() => class {})(),
        cb = (() => class {})(),
        hb = (() => class {})(),
        ub = (() => class {})();
      class db {}
      class pb {
        static childRoutes(t) {
          return { path: '', component: kf, children: t, data: { reuse: !0 } };
        }
      }
      const mb = { title: Ks('Home') };
      pb.childRoutes([{ path: '', redirectTo: '/home', pathMatch: 'full' }, { path: 'home', component: ng, data: mb }]);
      class fb {}
      const gb = { title: Ks('About') };
      pb.childRoutes([{ path: 'about', component: ag, data: gb }]);
      class bb {}
      let _b = (() => class {})(),
        yb = (() => {
          class t {
            constructor(t, e) {
              Object(r.u)(e) &&
                !t &&
                console.warn('Warning: Flex Layout loaded on the server without FlexLayoutServerModule');
            }
            static withConfig(e, n = []) {
              return {
                ngModule: t,
                providers: e.serverLoaded
                  ? [
                      { provide: mp, useValue: Object.assign({}, pp, e) },
                      { provide: gp, useValue: n, multi: !0 },
                      { provide: fp, useValue: !0 }
                    ]
                  : [{ provide: mp, useValue: Object.assign({}, pp, e) }, { provide: gp, useValue: n, multi: !0 }]
              };
            }
          }
          return t;
        })();
      class vb {}
      class wb {}
      class Cb {}
      class xb {}
      class Eb {}
      n.d(e, 'a', function() {
        return Sb;
      });
      var Sb = s.pb(i, [zi], function(t) {
        return s.Ab([
          s.Bb(512, s.j, s.ab, [[8, [rl, Gu, Nu, vd, Id, Ld, Vd, If, og, ug, fg]], [3, s.j], s.w]),
          s.Bb(5120, s.t, s.mb, [[3, s.t]]),
          s.Bb(4608, r.m, r.l, [s.t, [2, r.A]]),
          s.Bb(5120, s.ib, s.nb, [s.y]),
          s.Bb(5120, s.c, s.jb, []),
          s.Bb(5120, s.r, s.kb, []),
          s.Bb(5120, s.s, s.lb, []),
          s.Bb(4608, Et.b, Et.l, [r.d]),
          s.Bb(6144, s.G, null, [Et.b]),
          s.Bb(4608, Et.e, Ua, [[2, Fa], [2, va]]),
          s.Bb(
            5120,
            Et.c,
            function(t, e, n, s, i, r, o, a) {
              return [new Et.j(t, e, n), new Et.o(s), new Et.n(i, r, o, a)];
            },
            [r.d, s.y, s.A, r.d, r.d, Et.e, s.bb, [2, Et.f]]
          ),
          s.Bb(4608, Et.d, Et.d, [Et.c, s.y]),
          s.Bb(135680, Et.m, Et.m, [r.d]),
          s.Bb(4608, Et.k, Et.k, [Et.d, Et.m, s.c]),
          s.Bb(5120, rc, Eu, []),
          s.Bb(5120, oh, Su, []),
          s.Bb(4608, Hh, xu, [r.d, rc, oh]),
          s.Bb(5120, s.E, ku, [Et.k, Hh, s.y]),
          s.Bb(6144, Et.p, null, [Et.m]),
          s.Bb(4608, s.M, s.M, [s.y]),
          s.Bb(5120, yg, Sg, [Cg, s.A]),
          s.Bb(4608, vg, vg, [yg]),
          s.Bb(4608, wg, wg, [yg]),
          s.Bb(4608, ll, ll, []),
          s.Bb(4608, wi, Ci, [r.d, s.A, yi]),
          s.Bb(4608, xi, xi, [wi, vi]),
          s.Bb(
            5120,
            pi,
            function(t) {
              return [t];
            },
            [xi]
          ),
          s.Bb(4608, bi, bi, []),
          s.Bb(6144, gi, null, [bi]),
          s.Bb(4608, _i, _i, [gi]),
          s.Bb(6144, Gs, null, [_i]),
          s.Bb(4608, Qs, Ei, [Gs, s.q]),
          s.Bb(4608, ui, Li, [Qs, s.q, [2, Mi]]),
          s.Bb(4608, $i, mu, [s.E, r.d]),
          s.Bb(4608, No, No, [bo, Eo, s.j, Ro, xo, s.q, s.y, r.d, vr, [2, r.g]]),
          s.Bb(5120, Mo, Lo, [No]),
          s.Bb(5120, Dg, Ag, [No]),
          s.Bb(4608, Il, Il, []),
          s.Bb(4608, ja, ja, []),
          s.Bb(5120, qo, Wo, [No]),
          s.Bb(135680, Ko, Ko, [No, s.q, [2, r.g], [2, $o], qo, [3, Ko], Eo]),
          s.Bb(4608, pl, pl, []),
          s.Bb(5120, Sl, kl, [No]),
          s.Bb(5120, Jd, tp, [No]),
          s.Bb(4608, Sa, Pa, [[2, Ea], Zr]),
          s.Bb(5120, Og, Ig, [No]),
          s.Bb(5120, pd, md, [No]),
          s.Bb(5120, Pg, Ng, [[3, Pg]]),
          s.Bb(5120, Lg, jg, [[3, Lg]]),
          s.Bb(5120, Vg, Ug, [[3, Vg]]),
          s.Bb(135680, ma, ma, [s.y, Zr]),
          s.Bb(4608, zg, zg, [s.L]),
          s.Bb(5120, ys, _s, [gs]),
          s.Bb(
            5120,
            s.b,
            function(t, e, n) {
              return [
                ((s = t),
                (i = e),
                () => {
                  if (Object(r.t)(i)) {
                    const t = Array.from(s.querySelectorAll('[class*=flex-layout-]')),
                      e = /\bflex-layout-.+?\b/g;
                    t.forEach(t => {
                      t.classList.contains('flex-layout-ssr') && t.parentNode
                        ? t.parentNode.removeChild(t)
                        : t.className.replace(e, '');
                    });
                  }
                }),
                n
              ];
              var s, i;
            },
            [r.d, s.A, ys]
          ),
          s.Bb(5120, Pe, fs, [qn]),
          s.Bb(4608, ns, ns, []),
          s.Bb(6144, ts, null, [ns]),
          s.Bb(135680, ss, ss, [qn, s.v, s.i, s.q, ts]),
          s.Bb(4608, es, es, []),
          s.Bb(5120, is, hs, [qn, r.s, rs]),
          s.Bb(4608, Ts, Os, []),
          s.Bb(4608, Ps, Ns, []),
          s.Bb(4608, js, Fs, []),
          s.Bb(4608, Is, Rs, []),
          s.Bb(4608, Bs, Bs, []),
          s.Bb(4608, Hs, Hs, [Bs, Ts, Ps, js, Is, Us, Vs]),
          s.Bb(1073742336, r.c, r.c, []),
          s.Bb(1024, s.l, Et.q, []),
          s.Bb(
            1024,
            s.x,
            function() {
              return [ls()];
            },
            []
          ),
          s.Bb(512, gs, gs, [s.q]),
          s.Bb(256, xg, './ngsw-worker.js', []),
          s.Bb(256, Cg, { enabled: !0 }, []),
          s.Bb(
            1024,
            s.d,
            function(t, e, n, s, i, r) {
              return [Et.r(t), bs(e), Eg(n, s, i, r)];
            },
            [[2, s.x], gs, s.q, xg, Cg, s.A]
          ),
          s.Bb(512, s.e, s.e, [[2, s.d]]),
          s.Bb(131584, s.g, s.g, [s.y, s.bb, s.q, s.l, s.j, s.e]),
          s.Bb(1073742336, s.f, s.f, [s.g]),
          s.Bb(1073742336, Et.a, Et.a, [[3, Et.a]]),
          s.Bb(1073742336, kg, kg, []),
          s.Bb(1073742336, hl, hl, []),
          s.Bb(1073742336, ul, ul, []),
          s.Bb(1073742336, Si, Si, []),
          s.Bb(1073742336, ki, ki, []),
          s.Bb(1073742336, $s, $s, []),
          s.Bb(1073742336, Au, Au, []),
          s.Bb(1073742336, wr, wr, []),
          s.Bb(1073742336, va, va, [[2, ya], [2, Et.f]]),
          s.Bb(1073742336, Xr, Xr, []),
          s.Bb(1073742336, Xa, Xa, []),
          s.Bb(1073742336, Ja, Ja, []),
          s.Bb(1073742336, tl, tl, []),
          s.Bb(1073742336, or, or, []),
          s.Bb(1073742336, oo, oo, []),
          s.Bb(1073742336, jo, jo, []),
          s.Bb(1073742336, Tg, Tg, []),
          s.Bb(1073742336, Pl, Pl, []),
          s.Bb(1073742336, ba, ba, []),
          s.Bb(1073742336, qg, qg, []),
          s.Bb(1073742336, Fl, Fl, []),
          s.Bb(1073742336, Wg, Wg, []),
          s.Bb(1073742336, Lf, Lf, []),
          s.Bb(1073742336, Kg, Kg, []),
          s.Bb(1073742336, Yg, Yg, []),
          s.Bb(1073742336, Gg, Gg, []),
          s.Bb(1073742336, Yo, Yo, []),
          s.Bb(1073742336, Ol, Ol, []),
          s.Bb(1073742336, yf, yf, []),
          s.Bb(1073742336, Zg, Zg, []),
          s.Bb(1073742336, Xg, Xg, []),
          s.Bb(1073742336, Jg, Jg, []),
          s.Bb(1073742336, za, za, []),
          s.Bb(1073742336, tb, tb, []),
          s.Bb(1073742336, af, af, []),
          s.Bb(1073742336, eb, eb, []),
          s.Bb(1073742336, nb, nb, []),
          s.Bb(1073742336, bf, bf, []),
          s.Bb(1073742336, sp, sp, []),
          s.Bb(1073742336, ip, ip, []),
          s.Bb(1073742336, Ma, Ma, []),
          s.Bb(1073742336, La, La, []),
          s.Bb(1073742336, Rg, Rg, []),
          s.Bb(1073742336, gd, gd, []),
          s.Bb(1073742336, Mg, Mg, []),
          s.Bb(1073742336, sb, sb, []),
          s.Bb(1073742336, Wf, Wf, []),
          s.Bb(1073742336, ib, ib, []),
          s.Bb(1073742336, Cm, Cm, []),
          s.Bb(1073742336, rb, rb, []),
          s.Bb(1073742336, ob, ob, []),
          s.Bb(1073742336, ab, ab, []),
          s.Bb(1073742336, kd, kd, []),
          s.Bb(1073742336, Fg, Fg, []),
          s.Bb(1073742336, Bg, Bg, []),
          s.Bb(1073742336, Hg, Hg, []),
          s.Bb(1073742336, lb, lb, []),
          s.Bb(1073742336, cb, cb, []),
          s.Bb(1073742336, hb, hb, []),
          s.Bb(1073742336, zm, zm, []),
          s.Bb(1073742336, $g, $g, []),
          s.Bb(1073742336, ub, ub, []),
          s.Bb(1073742336, db, db, []),
          s.Bb(1024, os, ds, [[3, qn]]),
          s.Bb(512, ue, de, []),
          s.Bb(512, Zn, Zn, []),
          s.Bb(256, rs, {}, []),
          s.Bb(1024, r.h, us, [r.r, [2, r.a], rs]),
          s.Bb(512, r.g, r.g, [r.h, r.r]),
          s.Bb(512, s.i, s.i, []),
          s.Bb(512, s.v, s.J, [s.i, [2, s.K]]),
          s.Bb(
            1024,
            Fn,
            function() {
              return [
                [
                  {
                    path: '',
                    component: kf,
                    children: [
                      { path: '', redirectTo: '/home', pathMatch: 'full' },
                      { path: 'home', component: ng, data: mb }
                    ],
                    data: { reuse: !0 }
                  }
                ],
                [
                  {
                    path: '',
                    component: kf,
                    children: [{ path: 'about', component: ag, data: gb }],
                    data: { reuse: !0 }
                  }
                ],
                [{ path: '**', redirectTo: '', pathMatch: 'full' }]
              ];
            },
            []
          ),
          s.Bb(512, Ln, ji, []),
          s.Bb(1024, qn, ms, [s.g, ue, Zn, r.g, s.q, s.v, s.i, Fn, rs, [2, Vn], [2, Ln]]),
          s.Bb(1073742336, cs, cs, [[2, os], [2, qn]]),
          s.Bb(1073742336, Cs, Cs, [[3, Cs]]),
          s.Bb(1073742336, hp, hp, []),
          s.Bb(1073742336, pm, pm, []),
          s.Bb(1073742336, Bm, Bm, []),
          s.Bb(1073742336, _b, _b, []),
          s.Bb(1073742336, yb, yb, [[2, fp], s.A]),
          s.Bb(1073742336, vb, vb, []),
          s.Bb(1073742336, wb, wb, []),
          s.Bb(1073742336, fb, fb, []),
          s.Bb(1073742336, Cb, Cb, []),
          s.Bb(1073742336, bb, bb, []),
          s.Bb(1073742336, xb, xb, []),
          s.Bb(1073742336, Eb, Eb, []),
          s.Bb(1073742336, i, i, []),
          s.Bb(256, s.Z, !0, []),
          s.Bb(256, yi, 'XSRF-TOKEN', []),
          s.Bb(256, vi, 'X-XSRF-TOKEN', []),
          s.Bb(256, Du, 'BrowserAnimations', []),
          s.Bb(256, Qg, { separatorKeyCodes: [13] }, []),
          s.Bb(256, ka, Na, []),
          s.Bb(256, Vs, void 0, []),
          s.Bb(256, Us, void 0, [])
        ]);
      });
    },
    VRyK: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return a;
      });
      var s = n('HDdC'),
        i = n('z+Ro'),
        r = n('bHdf'),
        o = n('yCtX');
      function a(...t) {
        let e = Number.POSITIVE_INFINITY,
          n = null,
          a = t[t.length - 1];
        return (
          Object(i.a)(a)
            ? ((n = t.pop()), t.length > 1 && 'number' == typeof t[t.length - 1] && (e = t.pop()))
            : 'number' == typeof a && (e = t.pop()),
          null === n && 1 === t.length && t[0] instanceof s.a ? t[0] : Object(r.a)(e)(Object(o.a)(t, n))
        );
      }
    },
    XNiG: function(t, e, n) {
      'use strict';
      n.d(e, 'b', function() {
        return c;
      }),
        n.d(e, 'a', function() {
          return h;
        });
      var s = n('HDdC'),
        i = n('7o/Q'),
        r = n('quSY'),
        o = n('9ppp'),
        a = n('Ylt2'),
        l = n('2QA8');
      class c extends i.a {
        constructor(t) {
          super(t), (this.destination = t);
        }
      }
      let h = (() => {
        class t extends s.a {
          constructor() {
            super(),
              (this.observers = []),
              (this.closed = !1),
              (this.isStopped = !1),
              (this.hasError = !1),
              (this.thrownError = null);
          }
          [l.a]() {
            return new c(this);
          }
          lift(t) {
            const e = new u(this, this);
            return (e.operator = t), e;
          }
          next(t) {
            if (this.closed) throw new o.a();
            if (!this.isStopped) {
              const { observers: e } = this,
                n = e.length,
                s = e.slice();
              for (let i = 0; i < n; i++) s[i].next(t);
            }
          }
          error(t) {
            if (this.closed) throw new o.a();
            (this.hasError = !0), (this.thrownError = t), (this.isStopped = !0);
            const { observers: e } = this,
              n = e.length,
              s = e.slice();
            for (let i = 0; i < n; i++) s[i].error(t);
            this.observers.length = 0;
          }
          complete() {
            if (this.closed) throw new o.a();
            this.isStopped = !0;
            const { observers: t } = this,
              e = t.length,
              n = t.slice();
            for (let s = 0; s < e; s++) n[s].complete();
            this.observers.length = 0;
          }
          unsubscribe() {
            (this.isStopped = !0), (this.closed = !0), (this.observers = null);
          }
          _trySubscribe(t) {
            if (this.closed) throw new o.a();
            return super._trySubscribe(t);
          }
          _subscribe(t) {
            if (this.closed) throw new o.a();
            return this.hasError
              ? (t.error(this.thrownError), r.a.EMPTY)
              : this.isStopped
              ? (t.complete(), r.a.EMPTY)
              : (this.observers.push(t), new a.a(this, t));
          }
          asObservable() {
            const t = new s.a();
            return (t.source = this), t;
          }
        }
        return (t.create = (t, e) => new u(t, e)), t;
      })();
      class u extends h {
        constructor(t, e) {
          super(), (this.destination = t), (this.source = e);
        }
        next(t) {
          const { destination: e } = this;
          e && e.next && e.next(t);
        }
        error(t) {
          const { destination: e } = this;
          e && e.error && this.destination.error(t);
        }
        complete() {
          const { destination: t } = this;
          t && t.complete && this.destination.complete();
        }
        _subscribe(t) {
          const { source: e } = this;
          return e ? this.source.subscribe(t) : r.a.EMPTY;
        }
      }
    },
    XoHu: function(t, e, n) {
      'use strict';
      function s(t) {
        return null !== t && 'object' == typeof t;
      }
      n.d(e, 'a', function() {
        return s;
      });
    },
    Ylt2: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return i;
      });
      var s = n('quSY');
      class i extends s.a {
        constructor(t, e) {
          super(), (this.subject = t), (this.subscriber = e), (this.closed = !1);
        }
        unsubscribe() {
          if (this.closed) return;
          this.closed = !0;
          const t = this.subject,
            e = t.observers;
          if (((this.subject = null), !e || 0 === e.length || t.isStopped || t.closed)) return;
          const n = e.indexOf(this.subscriber);
          -1 !== n && e.splice(n, 1);
        }
      }
    },
    ZUHj: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return o;
      });
      var s = n('51Dv'),
        i = n('SeVD'),
        r = n('HDdC');
      function o(t, e, n, o, a = new s.a(t, n, o)) {
        if (!a.closed) return e instanceof r.a ? e.subscribe(a) : Object(i.a)(e)(a);
      }
    },
    bHdf: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return r;
      });
      var s = n('5+tZ'),
        i = n('SpAZ');
      function r(t = Number.POSITIVE_INFINITY) {
        return Object(s.a)(i.a, t);
      }
    },
    c2HN: function(t, e, n) {
      'use strict';
      function s(t) {
        return !!t && 'function' != typeof t.subscribe && 'function' == typeof t.then;
      }
      n.d(e, 'a', function() {
        return s;
      });
    },
    cUpR: function(t, e, n) {
      'use strict';
      n.d(e, 'q', function() {
        return _t;
      }),
        n.d(e, 'r', function() {
          return D;
        }),
        n.d(e, 'a', function() {
          return yt;
        }),
        n.d(e, 'i', function() {
          return bt;
        }),
        n.d(e, 'h', function() {
          return wt;
        }),
        n.d(e, 'c', function() {
          return A;
        }),
        n.d(e, 'd', function() {
          return T;
        }),
        n.d(e, 'e', function() {
          return et;
        }),
        n.d(e, 'f', function() {
          return nt;
        }),
        n.d(e, 'g', function() {
          return st;
        }),
        n.d(e, 'b', function() {
          return lt;
        }),
        n.d(e, 's', function() {
          return o;
        }),
        n.d(e, 'k', function() {
          return B;
        }),
        n.d(e, 'j', function() {
          return J;
        }),
        n.d(e, 'n', function() {
          return it;
        }),
        n.d(e, 'o', function() {
          return at;
        }),
        n.d(e, 'm', function() {
          return R;
        }),
        n.d(e, 'p', function() {
          return I;
        }),
        n.d(e, 'l', function() {
          return ct;
        });
      var s = n('SVse'),
        i = n('8Y7J');
      let r = null;
      function o() {
        return r;
      }
      class a {
        constructor() {
          this.resourceLoaderType = null;
        }
        get attrToPropMap() {
          return this._attrToPropMap;
        }
        set attrToPropMap(t) {
          this._attrToPropMap = t;
        }
      }
      class l extends a {
        constructor() {
          super(), (this._animationPrefix = null), (this._transitionEnd = null);
          try {
            const e = this.createElement('div', document);
            if (null != this.getStyle(e, 'animationName')) this._animationPrefix = '';
            else {
              const t = ['Webkit', 'Moz', 'O', 'ms'];
              for (let n = 0; n < t.length; n++)
                if (null != this.getStyle(e, t[n] + 'AnimationName')) {
                  this._animationPrefix = '-' + t[n].toLowerCase() + '-';
                  break;
                }
            }
            const n = {
              WebkitTransition: 'webkitTransitionEnd',
              MozTransition: 'transitionend',
              OTransition: 'oTransitionEnd otransitionend',
              transition: 'transitionend'
            };
            Object.keys(n).forEach(t => {
              null != this.getStyle(e, t) && (this._transitionEnd = n[t]);
            });
          } catch (t) {
            (this._animationPrefix = null), (this._transitionEnd = null);
          }
        }
        getDistributedNodes(t) {
          return t.getDistributedNodes();
        }
        resolveAndSetHref(t, e, n) {
          t.href = null == n ? e : e + '/../' + n;
        }
        supportsDOMEvents() {
          return !0;
        }
        supportsNativeShadowDOM() {
          return 'function' == typeof document.body.createShadowRoot;
        }
        getAnimationPrefix() {
          return this._animationPrefix ? this._animationPrefix : '';
        }
        getTransitionEnd() {
          return this._transitionEnd ? this._transitionEnd : '';
        }
        supportsAnimation() {
          return null != this._animationPrefix && null != this._transitionEnd;
        }
      }
      const c = { class: 'className', innerHtml: 'innerHTML', readonly: 'readOnly', tabindex: 'tabIndex' },
        h = 3,
        u = {
          '\b': 'Backspace',
          '\t': 'Tab',
          '\x7f': 'Delete',
          '\x1b': 'Escape',
          Del: 'Delete',
          Esc: 'Escape',
          Left: 'ArrowLeft',
          Right: 'ArrowRight',
          Up: 'ArrowUp',
          Down: 'ArrowDown',
          Menu: 'ContextMenu',
          Scroll: 'ScrollLock',
          Win: 'OS'
        },
        d = {
          A: '1',
          B: '2',
          C: '3',
          D: '4',
          E: '5',
          F: '6',
          G: '7',
          H: '8',
          I: '9',
          J: '*',
          K: '+',
          M: '-',
          N: '.',
          O: '/',
          '`': '0',
          '\x90': 'NumLock'
        },
        p = (() => {
          if (i.vb.Node)
            return (
              i.vb.Node.prototype.contains ||
              function(t) {
                return !!(16 & this.compareDocumentPosition(t));
              }
            );
        })();
      class m extends l {
        parse(t) {
          throw new Error('parse not implemented');
        }
        static makeCurrent() {
          var t;
          (t = new m()), r || (r = t);
        }
        hasProperty(t, e) {
          return e in t;
        }
        setProperty(t, e, n) {
          t[e] = n;
        }
        getProperty(t, e) {
          return t[e];
        }
        invoke(t, e, n) {
          t[e](...n);
        }
        logError(t) {
          window.console && (console.error ? console.error(t) : console.log(t));
        }
        log(t) {
          window.console && window.console.log && window.console.log(t);
        }
        logGroup(t) {
          window.console && window.console.group && window.console.group(t);
        }
        logGroupEnd() {
          window.console && window.console.groupEnd && window.console.groupEnd();
        }
        get attrToPropMap() {
          return c;
        }
        contains(t, e) {
          return p.call(t, e);
        }
        querySelector(t, e) {
          return t.querySelector(e);
        }
        querySelectorAll(t, e) {
          return t.querySelectorAll(e);
        }
        on(t, e, n) {
          t.addEventListener(e, n, !1);
        }
        onAndCancel(t, e, n) {
          return (
            t.addEventListener(e, n, !1),
            () => {
              t.removeEventListener(e, n, !1);
            }
          );
        }
        dispatchEvent(t, e) {
          t.dispatchEvent(e);
        }
        createMouseEvent(t) {
          const e = this.getDefaultDocument().createEvent('MouseEvent');
          return e.initEvent(t, !0, !0), e;
        }
        createEvent(t) {
          const e = this.getDefaultDocument().createEvent('Event');
          return e.initEvent(t, !0, !0), e;
        }
        preventDefault(t) {
          t.preventDefault(), (t.returnValue = !1);
        }
        isPrevented(t) {
          return t.defaultPrevented || (null != t.returnValue && !t.returnValue);
        }
        getInnerHTML(t) {
          return t.innerHTML;
        }
        getTemplateContent(t) {
          return 'content' in t && this.isTemplateElement(t) ? t.content : null;
        }
        getOuterHTML(t) {
          return t.outerHTML;
        }
        nodeName(t) {
          return t.nodeName;
        }
        nodeValue(t) {
          return t.nodeValue;
        }
        type(t) {
          return t.type;
        }
        content(t) {
          return this.hasProperty(t, 'content') ? t.content : t;
        }
        firstChild(t) {
          return t.firstChild;
        }
        nextSibling(t) {
          return t.nextSibling;
        }
        parentElement(t) {
          return t.parentNode;
        }
        childNodes(t) {
          return t.childNodes;
        }
        childNodesAsList(t) {
          const e = t.childNodes,
            n = new Array(e.length);
          for (let s = 0; s < e.length; s++) n[s] = e[s];
          return n;
        }
        clearNodes(t) {
          for (; t.firstChild; ) t.removeChild(t.firstChild);
        }
        appendChild(t, e) {
          t.appendChild(e);
        }
        removeChild(t, e) {
          t.removeChild(e);
        }
        replaceChild(t, e, n) {
          t.replaceChild(e, n);
        }
        remove(t) {
          return t.parentNode && t.parentNode.removeChild(t), t;
        }
        insertBefore(t, e, n) {
          t.insertBefore(n, e);
        }
        insertAllBefore(t, e, n) {
          n.forEach(n => t.insertBefore(n, e));
        }
        insertAfter(t, e, n) {
          t.insertBefore(n, e.nextSibling);
        }
        setInnerHTML(t, e) {
          t.innerHTML = e;
        }
        getText(t) {
          return t.textContent;
        }
        setText(t, e) {
          t.textContent = e;
        }
        getValue(t) {
          return t.value;
        }
        setValue(t, e) {
          t.value = e;
        }
        getChecked(t) {
          return t.checked;
        }
        setChecked(t, e) {
          t.checked = e;
        }
        createComment(t) {
          return this.getDefaultDocument().createComment(t);
        }
        createTemplate(t) {
          const e = this.getDefaultDocument().createElement('template');
          return (e.innerHTML = t), e;
        }
        createElement(t, e) {
          return (e = e || this.getDefaultDocument()).createElement(t);
        }
        createElementNS(t, e, n) {
          return (n = n || this.getDefaultDocument()).createElementNS(t, e);
        }
        createTextNode(t, e) {
          return (e = e || this.getDefaultDocument()).createTextNode(t);
        }
        createScriptTag(t, e, n) {
          const s = (n = n || this.getDefaultDocument()).createElement('SCRIPT');
          return s.setAttribute(t, e), s;
        }
        createStyleElement(t, e) {
          const n = (e = e || this.getDefaultDocument()).createElement('style');
          return this.appendChild(n, this.createTextNode(t, e)), n;
        }
        createShadowRoot(t) {
          return t.createShadowRoot();
        }
        getShadowRoot(t) {
          return t.shadowRoot;
        }
        getHost(t) {
          return t.host;
        }
        clone(t) {
          return t.cloneNode(!0);
        }
        getElementsByClassName(t, e) {
          return t.getElementsByClassName(e);
        }
        getElementsByTagName(t, e) {
          return t.getElementsByTagName(e);
        }
        classList(t) {
          return Array.prototype.slice.call(t.classList, 0);
        }
        addClass(t, e) {
          t.classList.add(e);
        }
        removeClass(t, e) {
          t.classList.remove(e);
        }
        hasClass(t, e) {
          return t.classList.contains(e);
        }
        setStyle(t, e, n) {
          t.style[e] = n;
        }
        removeStyle(t, e) {
          t.style[e] = '';
        }
        getStyle(t, e) {
          return t.style[e];
        }
        hasStyle(t, e, n) {
          const s = this.getStyle(t, e) || '';
          return n ? s == n : s.length > 0;
        }
        tagName(t) {
          return t.tagName;
        }
        attributeMap(t) {
          const e = new Map(),
            n = t.attributes;
          for (let s = 0; s < n.length; s++) {
            const t = n.item(s);
            e.set(t.name, t.value);
          }
          return e;
        }
        hasAttribute(t, e) {
          return t.hasAttribute(e);
        }
        hasAttributeNS(t, e, n) {
          return t.hasAttributeNS(e, n);
        }
        getAttribute(t, e) {
          return t.getAttribute(e);
        }
        getAttributeNS(t, e, n) {
          return t.getAttributeNS(e, n);
        }
        setAttribute(t, e, n) {
          t.setAttribute(e, n);
        }
        setAttributeNS(t, e, n, s) {
          t.setAttributeNS(e, n, s);
        }
        removeAttribute(t, e) {
          t.removeAttribute(e);
        }
        removeAttributeNS(t, e, n) {
          t.removeAttributeNS(e, n);
        }
        templateAwareRoot(t) {
          return this.isTemplateElement(t) ? this.content(t) : t;
        }
        createHtmlDocument() {
          return document.implementation.createHTMLDocument('fakeTitle');
        }
        getDefaultDocument() {
          return document;
        }
        getBoundingClientRect(t) {
          try {
            return t.getBoundingClientRect();
          } catch (e) {
            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
          }
        }
        getTitle(t) {
          return t.title;
        }
        setTitle(t, e) {
          t.title = e || '';
        }
        elementMatches(t, e) {
          return (
            !!this.isElementNode(t) &&
            ((t.matches && t.matches(e)) ||
              (t.msMatchesSelector && t.msMatchesSelector(e)) ||
              (t.webkitMatchesSelector && t.webkitMatchesSelector(e)))
          );
        }
        isTemplateElement(t) {
          return this.isElementNode(t) && 'TEMPLATE' === t.nodeName;
        }
        isTextNode(t) {
          return t.nodeType === Node.TEXT_NODE;
        }
        isCommentNode(t) {
          return t.nodeType === Node.COMMENT_NODE;
        }
        isElementNode(t) {
          return t.nodeType === Node.ELEMENT_NODE;
        }
        hasShadowRoot(t) {
          return null != t.shadowRoot && t instanceof HTMLElement;
        }
        isShadowRoot(t) {
          return t instanceof DocumentFragment;
        }
        importIntoDoc(t) {
          return document.importNode(this.templateAwareRoot(t), !0);
        }
        adoptNode(t) {
          return document.adoptNode(t);
        }
        getHref(t) {
          return t.getAttribute('href');
        }
        getEventKey(t) {
          let e = t.key;
          if (null == e) {
            if (null == (e = t.keyIdentifier)) return 'Unidentified';
            e.startsWith('U+') &&
              ((e = String.fromCharCode(parseInt(e.substring(2), 16))),
              t.location === h && d.hasOwnProperty(e) && (e = d[e]));
          }
          return u[e] || e;
        }
        getGlobalEventTarget(t, e) {
          return 'window' === e ? window : 'document' === e ? t : 'body' === e ? t.body : null;
        }
        getHistory() {
          return window.history;
        }
        getLocation() {
          return window.location;
        }
        getBaseHref(t) {
          const e = g || (g = document.querySelector('base')) ? g.getAttribute('href') : null;
          return null == e
            ? null
            : ((n = e),
              f || (f = document.createElement('a')),
              f.setAttribute('href', n),
              '/' === f.pathname.charAt(0) ? f.pathname : '/' + f.pathname);
          var n;
        }
        resetBaseElement() {
          g = null;
        }
        getUserAgent() {
          return window.navigator.userAgent;
        }
        setData(t, e, n) {
          this.setAttribute(t, 'data-' + e, n);
        }
        getData(t, e) {
          return this.getAttribute(t, 'data-' + e);
        }
        getComputedStyle(t) {
          return getComputedStyle(t);
        }
        supportsWebAnimation() {
          return 'function' == typeof Element.prototype.animate;
        }
        performanceNow() {
          return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();
        }
        supportsCookies() {
          return !0;
        }
        getCookie(t) {
          return Object(s.B)(document.cookie, t);
        }
        setCookie(t, e) {
          document.cookie = encodeURIComponent(t) + '=' + encodeURIComponent(e);
        }
      }
      let f,
        g = null;
      function b() {
        return !!window.history.pushState;
      }
      let _ = (() => {
        class t extends s.r {
          constructor(t) {
            super(), (this._doc = t), this._init();
          }
          _init() {
            (this.location = o().getLocation()), (this._history = o().getHistory());
          }
          getBaseHrefFromDOM() {
            return o().getBaseHref(this._doc);
          }
          onPopState(t) {
            o()
              .getGlobalEventTarget(this._doc, 'window')
              .addEventListener('popstate', t, !1);
          }
          onHashChange(t) {
            o()
              .getGlobalEventTarget(this._doc, 'window')
              .addEventListener('hashchange', t, !1);
          }
          get href() {
            return this.location.href;
          }
          get protocol() {
            return this.location.protocol;
          }
          get hostname() {
            return this.location.hostname;
          }
          get port() {
            return this.location.port;
          }
          get pathname() {
            return this.location.pathname;
          }
          get search() {
            return this.location.search;
          }
          get hash() {
            return this.location.hash;
          }
          set pathname(t) {
            this.location.pathname = t;
          }
          pushState(t, e, n) {
            b() ? this._history.pushState(t, e, n) : (this.location.hash = n);
          }
          replaceState(t, e, n) {
            b() ? this._history.replaceState(t, e, n) : (this.location.hash = n);
          }
          forward() {
            this._history.forward();
          }
          back() {
            this._history.back();
          }
          getState() {
            return this._history.state;
          }
        }
        return (t.ctorParameters = () => [{ type: void 0, decorators: [{ type: i.o, args: [s.d] }] }]), t;
      })();
      const y = new i.p('TRANSITION_ID'),
        v = [
          {
            provide: i.d,
            useFactory: function(t, e, n) {
              return () => {
                n.get(i.e).donePromise.then(() => {
                  const n = o();
                  Array.prototype.slice
                    .apply(n.querySelectorAll(e, 'style[ng-transition]'))
                    .filter(e => n.getAttribute(e, 'ng-transition') === t)
                    .forEach(t => n.remove(t));
                });
              };
            },
            deps: [y, s.d, i.q],
            multi: !0
          }
        ];
      class w {
        static init() {
          Object(i.Y)(new w());
        }
        addToWindow(t) {
          (i.vb.getAngularTestability = (e, n = !0) => {
            const s = t.findTestabilityInTree(e, n);
            if (null == s) throw new Error('Could not find testability for element.');
            return s;
          }),
            (i.vb.getAllAngularTestabilities = () => t.getAllTestabilities()),
            (i.vb.getAllAngularRootElements = () => t.getAllRootElements()),
            i.vb.frameworkStabilizers || (i.vb.frameworkStabilizers = []),
            i.vb.frameworkStabilizers.push(t => {
              const e = i.vb.getAllAngularTestabilities();
              let n = e.length,
                s = !1;
              const r = function(e) {
                (s = s || e), 0 == --n && t(s);
              };
              e.forEach(function(t) {
                t.whenStable(r);
              });
            });
        }
        findTestabilityInTree(t, e, n) {
          if (null == e) return null;
          const s = t.getTestability(e);
          return null != s
            ? s
            : n
            ? o().isShadowRoot(e)
              ? this.findTestabilityInTree(t, o().getHost(e), !0)
              : this.findTestabilityInTree(t, o().parentElement(e), !0)
            : null;
        }
      }
      function C(t, e) {
        ('undefined' != typeof COMPILED && COMPILED) || ((i.vb.ng = i.vb.ng || {})[t] = e);
      }
      const x = (() => ({ ApplicationRef: i.g, NgZone: i.y }))(),
        E = 'probe',
        S = 'coreTokens';
      function k(t) {
        return Object(i.U)(t);
      }
      function D(t) {
        return C(E, k), C(S, Object.assign({}, x, (t || []).reduce((t, e) => ((t[e.name] = e.token), t), {}))), () => k;
      }
      const A = new i.p('EventManagerPlugins');
      let T = (() =>
        class {
          constructor(t, e) {
            (this._zone = e),
              (this._eventNameToPlugin = new Map()),
              t.forEach(t => (t.manager = this)),
              (this._plugins = t.slice().reverse());
          }
          addEventListener(t, e, n) {
            return this._findPluginFor(e).addEventListener(t, e, n);
          }
          addGlobalEventListener(t, e, n) {
            return this._findPluginFor(e).addGlobalEventListener(t, e, n);
          }
          getZone() {
            return this._zone;
          }
          _findPluginFor(t) {
            const e = this._eventNameToPlugin.get(t);
            if (e) return e;
            const n = this._plugins;
            for (let s = 0; s < n.length; s++) {
              const e = n[s];
              if (e.supports(t)) return this._eventNameToPlugin.set(t, e), e;
            }
            throw new Error(`No event manager plugin found for event ${t}`);
          }
        })();
      class O {
        constructor(t) {
          this._doc = t;
        }
        addGlobalEventListener(t, e, n) {
          const s = o().getGlobalEventTarget(this._doc, t);
          if (!s) throw new Error(`Unsupported event target ${s} for event ${e}`);
          return this.addEventListener(s, e, n);
        }
      }
      let I = (() =>
          class {
            constructor() {
              this._stylesSet = new Set();
            }
            addStyles(t) {
              const e = new Set();
              t.forEach(t => {
                this._stylesSet.has(t) || (this._stylesSet.add(t), e.add(t));
              }),
                this.onStylesAdded(e);
            }
            onStylesAdded(t) {}
            getAllStyles() {
              return Array.from(this._stylesSet);
            }
          })(),
        R = (() =>
          class extends I {
            constructor(t) {
              super(),
                (this._doc = t),
                (this._hostNodes = new Set()),
                (this._styleNodes = new Set()),
                this._hostNodes.add(t.head);
            }
            _addStylesToHost(t, e) {
              t.forEach(t => {
                const n = this._doc.createElement('style');
                (n.textContent = t), this._styleNodes.add(e.appendChild(n));
              });
            }
            addHost(t) {
              this._addStylesToHost(this._stylesSet, t), this._hostNodes.add(t);
            }
            removeHost(t) {
              this._hostNodes.delete(t);
            }
            onStylesAdded(t) {
              this._hostNodes.forEach(e => this._addStylesToHost(t, e));
            }
            ngOnDestroy() {
              this._styleNodes.forEach(t => o().remove(t));
            }
          })();
      const P = {
          svg: 'http://www.w3.org/2000/svg',
          xhtml: 'http://www.w3.org/1999/xhtml',
          xlink: 'http://www.w3.org/1999/xlink',
          xml: 'http://www.w3.org/XML/1998/namespace',
          xmlns: 'http://www.w3.org/2000/xmlns/'
        },
        N = /%COMP%/g,
        M = '_nghost-%COMP%',
        L = '_ngcontent-%COMP%';
      function j(t, e, n) {
        for (let s = 0; s < e.length; s++) {
          let i = e[s];
          Array.isArray(i) ? j(t, i, n) : ((i = i.replace(N, t)), n.push(i));
        }
        return n;
      }
      function F(t) {
        return e => {
          !1 === t(e) && (e.preventDefault(), (e.returnValue = !1));
        };
      }
      let B = (() =>
        class {
          constructor(t, e, n) {
            (this.eventManager = t),
              (this.sharedStylesHost = e),
              (this.appId = n),
              (this.rendererByCompId = new Map()),
              (this.defaultRenderer = new V(t));
          }
          createRenderer(t, e) {
            if (!t || !e) return this.defaultRenderer;
            switch (e.encapsulation) {
              case i.P.Emulated: {
                let n = this.rendererByCompId.get(e.id);
                return (
                  n ||
                    ((n = new z(this.eventManager, this.sharedStylesHost, e, this.appId)),
                    this.rendererByCompId.set(e.id, n)),
                  n.applyToHost(t),
                  n
                );
              }
              case i.P.Native:
              case i.P.ShadowDom:
                return new $(this.eventManager, this.sharedStylesHost, t, e);
              default:
                if (!this.rendererByCompId.has(e.id)) {
                  const t = j(e.id, e.styles, []);
                  this.sharedStylesHost.addStyles(t), this.rendererByCompId.set(e.id, this.defaultRenderer);
                }
                return this.defaultRenderer;
            }
          }
          begin() {}
          end() {}
        })();
      class V {
        constructor(t) {
          (this.eventManager = t), (this.data = Object.create(null));
        }
        destroy() {}
        createElement(t, e) {
          return e ? document.createElementNS(P[e] || e, t) : document.createElement(t);
        }
        createComment(t) {
          return document.createComment(t);
        }
        createText(t) {
          return document.createTextNode(t);
        }
        appendChild(t, e) {
          t.appendChild(e);
        }
        insertBefore(t, e, n) {
          t && t.insertBefore(e, n);
        }
        removeChild(t, e) {
          t && t.removeChild(e);
        }
        selectRootElement(t, e) {
          let n = 'string' == typeof t ? document.querySelector(t) : t;
          if (!n) throw new Error(`The selector "${t}" did not match any elements`);
          return e || (n.textContent = ''), n;
        }
        parentNode(t) {
          return t.parentNode;
        }
        nextSibling(t) {
          return t.nextSibling;
        }
        setAttribute(t, e, n, s) {
          if (s) {
            e = s + ':' + e;
            const i = P[s];
            i ? t.setAttributeNS(i, e, n) : t.setAttribute(e, n);
          } else t.setAttribute(e, n);
        }
        removeAttribute(t, e, n) {
          if (n) {
            const s = P[n];
            s ? t.removeAttributeNS(s, e) : t.removeAttribute(`${n}:${e}`);
          } else t.removeAttribute(e);
        }
        addClass(t, e) {
          t.classList.add(e);
        }
        removeClass(t, e) {
          t.classList.remove(e);
        }
        setStyle(t, e, n, s) {
          s & i.F.DashCase ? t.style.setProperty(e, n, s & i.F.Important ? 'important' : '') : (t.style[e] = n);
        }
        removeStyle(t, e, n) {
          n & i.F.DashCase ? t.style.removeProperty(e) : (t.style[e] = '');
        }
        setProperty(t, e, n) {
          H(e, 'property'), (t[e] = n);
        }
        setValue(t, e) {
          t.nodeValue = e;
        }
        listen(t, e, n) {
          return (
            H(e, 'listener'),
            'string' == typeof t
              ? this.eventManager.addGlobalEventListener(t, e, F(n))
              : this.eventManager.addEventListener(t, e, F(n))
          );
        }
      }
      const U = (() => '@'.charCodeAt(0))();
      function H(t, e) {
        if (t.charCodeAt(0) === U)
          throw new Error(
            `Found the synthetic ${e} ${t}. Please include either "BrowserAnimationsModule" or "NoopAnimationsModule" in your application.`
          );
      }
      class z extends V {
        constructor(t, e, n, s) {
          super(t), (this.component = n);
          const i = j(s + '-' + n.id, n.styles, []);
          e.addStyles(i),
            (this.contentAttr = L.replace(N, s + '-' + n.id)),
            (this.hostAttr = M.replace(N, s + '-' + n.id));
        }
        applyToHost(t) {
          super.setAttribute(t, this.hostAttr, '');
        }
        createElement(t, e) {
          const n = super.createElement(t, e);
          return super.setAttribute(n, this.contentAttr, ''), n;
        }
      }
      class $ extends V {
        constructor(t, e, n, s) {
          super(t),
            (this.sharedStylesHost = e),
            (this.hostEl = n),
            (this.component = s),
            (this.shadowRoot =
              s.encapsulation === i.P.ShadowDom ? n.attachShadow({ mode: 'open' }) : n.createShadowRoot()),
            this.sharedStylesHost.addHost(this.shadowRoot);
          const r = j(s.id, s.styles, []);
          for (let i = 0; i < r.length; i++) {
            const t = document.createElement('style');
            (t.textContent = r[i]), this.shadowRoot.appendChild(t);
          }
        }
        nodeOrShadowRoot(t) {
          return t === this.hostEl ? this.shadowRoot : t;
        }
        destroy() {
          this.sharedStylesHost.removeHost(this.shadowRoot);
        }
        appendChild(t, e) {
          return super.appendChild(this.nodeOrShadowRoot(t), e);
        }
        insertBefore(t, e, n) {
          return super.insertBefore(this.nodeOrShadowRoot(t), e, n);
        }
        removeChild(t, e) {
          return super.removeChild(this.nodeOrShadowRoot(t), e);
        }
        parentNode(t) {
          return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(t)));
        }
      }
      const q = (() =>
          ('undefined' != typeof Zone && Zone.__symbol__) ||
          function(t) {
            return '__zone_symbol__' + t;
          })(),
        W = q('addEventListener'),
        K = q('removeEventListener'),
        Y = {},
        Q = '__zone_symbol__propagationStopped',
        G = (() => {
          const t = 'undefined' != typeof Zone && Zone[q('BLACK_LISTED_EVENTS')];
          if (t) {
            const e = {};
            return (
              t.forEach(t => {
                e[t] = t;
              }),
              e
            );
          }
        })(),
        Z = function(t) {
          return !!G && G.hasOwnProperty(t);
        },
        X = function(t) {
          const e = Y[t.type];
          if (!e) return;
          const n = this[e];
          if (!n) return;
          const s = [t];
          if (1 === n.length) {
            const t = n[0];
            return t.zone !== Zone.current ? t.zone.run(t.handler, this, s) : t.handler.apply(this, s);
          }
          {
            const e = n.slice();
            for (let n = 0; n < e.length && !0 !== t[Q]; n++) {
              const t = e[n];
              t.zone !== Zone.current ? t.zone.run(t.handler, this, s) : t.handler.apply(this, s);
            }
          }
        };
      let J = (() =>
        class extends O {
          constructor(t, e, n) {
            super(t), (this.ngZone = e), (n && Object(s.u)(n)) || this.patchEvent();
          }
          patchEvent() {
            if ('undefined' == typeof Event || !Event || !Event.prototype) return;
            if (Event.prototype.__zone_symbol__stopImmediatePropagation) return;
            const t = (Event.prototype.__zone_symbol__stopImmediatePropagation =
              Event.prototype.stopImmediatePropagation);
            Event.prototype.stopImmediatePropagation = function() {
              this && (this[Q] = !0), t && t.apply(this, arguments);
            };
          }
          supports(t) {
            return !0;
          }
          addEventListener(t, e, n) {
            let s = n;
            if (!t[W] || (i.y.isInAngularZone() && !Z(e))) t.addEventListener(e, s, !1);
            else {
              let n = Y[e];
              n || (n = Y[e] = q('ANGULAR' + e + 'FALSE'));
              let i = t[n];
              const r = i && i.length > 0;
              i || (i = t[n] = []);
              const o = Z(e) ? Zone.root : Zone.current;
              if (0 === i.length) i.push({ zone: o, handler: s });
              else {
                let t = !1;
                for (let e = 0; e < i.length; e++)
                  if (i[e].handler === s) {
                    t = !0;
                    break;
                  }
                t || i.push({ zone: o, handler: s });
              }
              r || t[W](e, X, !1);
            }
            return () => this.removeEventListener(t, e, s);
          }
          removeEventListener(t, e, n) {
            let s = t[K];
            if (!s) return t.removeEventListener.apply(t, [e, n, !1]);
            let i = Y[e],
              r = i && t[i];
            if (!r) return t.removeEventListener.apply(t, [e, n, !1]);
            let o = !1;
            for (let a = 0; a < r.length; a++)
              if (r[a].handler === n) {
                (o = !0), r.splice(a, 1);
                break;
              }
            o ? 0 === r.length && s.apply(t, [e, X, !1]) : t.removeEventListener.apply(t, [e, n, !1]);
          }
        })();
      const tt = {
          pan: !0,
          panstart: !0,
          panmove: !0,
          panend: !0,
          pancancel: !0,
          panleft: !0,
          panright: !0,
          panup: !0,
          pandown: !0,
          pinch: !0,
          pinchstart: !0,
          pinchmove: !0,
          pinchend: !0,
          pinchcancel: !0,
          pinchin: !0,
          pinchout: !0,
          press: !0,
          pressup: !0,
          rotate: !0,
          rotatestart: !0,
          rotatemove: !0,
          rotateend: !0,
          rotatecancel: !0,
          swipe: !0,
          swipeleft: !0,
          swiperight: !0,
          swipeup: !0,
          swipedown: !0,
          tap: !0
        },
        et = new i.p('HammerGestureConfig'),
        nt = new i.p('HammerLoader');
      let st = (() =>
          class {
            constructor() {
              (this.events = []), (this.overrides = {});
            }
            buildHammer(t) {
              const e = new Hammer(t, this.options);
              e.get('pinch').set({ enable: !0 }), e.get('rotate').set({ enable: !0 });
              for (const n in this.overrides) e.get(n).set(this.overrides[n]);
              return e;
            }
          })(),
        it = (() =>
          class extends O {
            constructor(t, e, n, s) {
              super(t), (this._config = e), (this.console = n), (this.loader = s);
            }
            supports(t) {
              return !(
                (!tt.hasOwnProperty(t.toLowerCase()) && !this.isCustomEvent(t)) ||
                (!window.Hammer &&
                  !this.loader &&
                  (this.console.warn(
                    `The "${t}" event cannot be bound because Hammer.JS is not ` +
                      'loaded and no custom loader has been specified.'
                  ),
                  1))
              );
            }
            addEventListener(t, e, n) {
              const s = this.manager.getZone();
              if (((e = e.toLowerCase()), !window.Hammer && this.loader)) {
                let s = !1,
                  i = () => {
                    s = !0;
                  };
                return (
                  this.loader()
                    .then(() => {
                      if (!window.Hammer)
                        return (
                          this.console.warn('The custom HAMMER_LOADER completed, but Hammer.JS is not present.'),
                          void (i = () => {})
                        );
                      s || (i = this.addEventListener(t, e, n));
                    })
                    .catch(() => {
                      this.console.warn(
                        `The "${e}" event cannot be bound because the custom ` + 'Hammer.JS loader failed.'
                      ),
                        (i = () => {});
                    }),
                  () => {
                    i();
                  }
                );
              }
              return s.runOutsideAngular(() => {
                const i = this._config.buildHammer(t),
                  r = function(t) {
                    s.runGuarded(function() {
                      n(t);
                    });
                  };
                return (
                  i.on(e, r),
                  () => {
                    i.off(e, r), 'function' == typeof i.destroy && i.destroy();
                  }
                );
              });
            }
            isCustomEvent(t) {
              return this._config.events.indexOf(t) > -1;
            }
          })();
      const rt = ['alt', 'control', 'meta', 'shift'],
        ot = { alt: t => t.altKey, control: t => t.ctrlKey, meta: t => t.metaKey, shift: t => t.shiftKey };
      let at = (() => {
        class t extends O {
          constructor(t) {
            super(t);
          }
          supports(e) {
            return null != t.parseEventName(e);
          }
          addEventListener(e, n, s) {
            const i = t.parseEventName(n),
              r = t.eventCallback(i.fullKey, s, this.manager.getZone());
            return this.manager.getZone().runOutsideAngular(() => o().onAndCancel(e, i.domEventName, r));
          }
          static parseEventName(e) {
            const n = e.toLowerCase().split('.'),
              s = n.shift();
            if (0 === n.length || ('keydown' !== s && 'keyup' !== s)) return null;
            const i = t._normalizeKey(n.pop());
            let r = '';
            if (
              (rt.forEach(t => {
                const e = n.indexOf(t);
                e > -1 && (n.splice(e, 1), (r += t + '.'));
              }),
              (r += i),
              0 != n.length || 0 === i.length)
            )
              return null;
            const o = {};
            return (o.domEventName = s), (o.fullKey = r), o;
          }
          static getEventFullKey(t) {
            let e = '',
              n = o().getEventKey(t);
            return (
              ' ' === (n = n.toLowerCase()) ? (n = 'space') : '.' === n && (n = 'dot'),
              rt.forEach(s => {
                s != n && (0, ot[s])(t) && (e += s + '.');
              }),
              (e += n)
            );
          }
          static eventCallback(e, n, s) {
            return i => {
              t.getEventFullKey(i) === e && s.runGuarded(() => n(i));
            };
          }
          static _normalizeKey(t) {
            switch (t) {
              case 'esc':
                return 'escape';
              default:
                return t;
            }
          }
        }
        return t;
      })();
      class lt {}
      let ct = (() =>
        class extends lt {
          constructor(t) {
            super(), (this._doc = t);
          }
          sanitize(t, e) {
            if (null == e) return null;
            switch (t) {
              case i.H.NONE:
                return e;
              case i.H.HTML:
                return e instanceof ut
                  ? e.changingThisBreaksApplicationSecurity
                  : (this.checkNotSafeValue(e, 'HTML'), Object(i.eb)(this._doc, String(e)));
              case i.H.STYLE:
                return e instanceof dt
                  ? e.changingThisBreaksApplicationSecurity
                  : (this.checkNotSafeValue(e, 'Style'), Object(i.fb)(e));
              case i.H.SCRIPT:
                if (e instanceof pt) return e.changingThisBreaksApplicationSecurity;
                throw (this.checkNotSafeValue(e, 'Script'), new Error('unsafe value used in a script context'));
              case i.H.URL:
                return e instanceof ft || e instanceof mt
                  ? e.changingThisBreaksApplicationSecurity
                  : (this.checkNotSafeValue(e, 'URL'), Object(i.gb)(String(e)));
              case i.H.RESOURCE_URL:
                if (e instanceof ft) return e.changingThisBreaksApplicationSecurity;
                throw (this.checkNotSafeValue(e, 'ResourceURL'),
                new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)'));
              default:
                throw new Error(`Unexpected SecurityContext ${t} (see http://g.co/ng/security#xss)`);
            }
          }
          checkNotSafeValue(t, e) {
            if (t instanceof ht)
              throw new Error(`Required a safe ${e}, got a ${t.getTypeName()} ` + '(see http://g.co/ng/security#xss)');
          }
          bypassSecurityTrustHtml(t) {
            return new ut(t);
          }
          bypassSecurityTrustStyle(t) {
            return new dt(t);
          }
          bypassSecurityTrustScript(t) {
            return new pt(t);
          }
          bypassSecurityTrustUrl(t) {
            return new mt(t);
          }
          bypassSecurityTrustResourceUrl(t) {
            return new ft(t);
          }
        })();
      class ht {
        constructor(t) {
          this.changingThisBreaksApplicationSecurity = t;
        }
        toString() {
          return (
            `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +
            ' (see http://g.co/ng/security#xss)'
          );
        }
      }
      class ut extends ht {
        getTypeName() {
          return 'HTML';
        }
      }
      class dt extends ht {
        getTypeName() {
          return 'Style';
        }
      }
      class pt extends ht {
        getTypeName() {
          return 'Script';
        }
      }
      class mt extends ht {
        getTypeName() {
          return 'URL';
        }
      }
      class ft extends ht {
        getTypeName() {
          return 'ResourceURL';
        }
      }
      const gt = [
          { provide: i.A, useValue: s.z },
          {
            provide: i.B,
            useValue: function() {
              m.makeCurrent(), w.init();
            },
            multi: !0
          },
          { provide: s.r, useClass: _, deps: [s.d] },
          {
            provide: s.d,
            useFactory: function() {
              return document;
            },
            deps: []
          }
        ],
        bt = Object(i.R)(i.X, 'browser', gt);
      function _t() {
        return new i.l();
      }
      let yt = (() => {
        class t {
          constructor(t) {
            if (t)
              throw new Error(
                'BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.'
              );
          }
          static withServerTransition(e) {
            return {
              ngModule: t,
              providers: [{ provide: i.c, useValue: e.appId }, { provide: y, useExisting: i.c }, v]
            };
          }
        }
        return t;
      })();
      function vt() {
        return new wt(Object(i.Pb)(s.d));
      }
      let wt = (() => {
        class t {
          constructor(t) {
            this._doc = t;
          }
          getTitle() {
            return o().getTitle(this._doc);
          }
          setTitle(t) {
            o().setTitle(this._doc, t);
          }
        }
        return (t.ngInjectableDef = Object(i.Ob)({ factory: vt, token: t, providedIn: 'root' })), t;
      })();
      'undefined' != typeof window && window;
    },
    gRHU: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return r;
      });
      var s = n('2fFW'),
        i = n('NJ4a');
      const r = {
        closed: !0,
        next(t) {},
        error(t) {
          if (s.a.useDeprecatedSynchronousErrorHandling) throw t;
          Object(i.a)(t);
        },
        complete() {}
      };
    },
    jZKg: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return r;
      });
      var s = n('HDdC'),
        i = n('quSY');
      function r(t, e) {
        return new s.a(n => {
          const s = new i.a();
          let r = 0;
          return (
            s.add(
              e.schedule(function() {
                r !== t.length ? (n.next(t[r++]), n.closed || s.add(this.schedule())) : n.complete();
              })
            ),
            s
          );
        });
      }
    },
    kJWO: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return s;
      });
      const s = ('function' == typeof Symbol && Symbol.observable) || '@@observable';
    },
    l7GE: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return i;
      });
      var s = n('7o/Q');
      class i extends s.a {
        notifyNext(t, e, n, s, i) {
          this.destination.next(e);
        }
        notifyError(t, e) {
          this.destination.error(t);
        }
        notifyComplete(t) {
          this.destination.complete();
        }
      }
    },
    lJxs: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return i;
      });
      var s = n('7o/Q');
      function i(t, e) {
        return function(n) {
          if ('function' != typeof t) throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
          return n.lift(new r(t, e));
        };
      }
      class r {
        constructor(t, e) {
          (this.project = t), (this.thisArg = e);
        }
        call(t, e) {
          return e.subscribe(new o(t, this.project, this.thisArg));
        }
      }
      class o extends s.a {
        constructor(t, e, n) {
          super(t), (this.project = e), (this.count = 0), (this.thisArg = n || this);
        }
        _next(t) {
          let e;
          try {
            e = this.project.call(this.thisArg, t, this.count++);
          } catch (n) {
            return void this.destination.error(n);
          }
          this.destination.next(e);
        }
      }
    },
    mCNh: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return i;
      }),
        n.d(e, 'b', function() {
          return r;
        });
      var s = n('KqfI');
      function i(...t) {
        return r(t);
      }
      function r(t) {
        return t
          ? 1 === t.length
            ? t[0]
            : function(e) {
                return t.reduce((t, e) => e(t), e);
              }
          : s.a;
      }
    },
    n6bG: function(t, e, n) {
      'use strict';
      function s(t) {
        return 'function' == typeof t;
      }
      n.d(e, 'a', function() {
        return s;
      });
    },
    ngJS: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return s;
      });
      const s = t => e => {
        for (let n = 0, s = t.length; n < s && !e.closed; n++) e.next(t[n]);
        e.complete();
      };
    },
    oB13: function(t, e, n) {
      'use strict';
      var s = n('XNiG'),
        i = n('HDdC'),
        r = (n('7o/Q'), n('quSY')),
        o = n('x+ZX');
      const a = class extends i.a {
          constructor(t, e) {
            super(), (this.source = t), (this.subjectFactory = e), (this._refCount = 0), (this._isComplete = !1);
          }
          _subscribe(t) {
            return this.getSubject().subscribe(t);
          }
          getSubject() {
            const t = this._subject;
            return (t && !t.isStopped) || (this._subject = this.subjectFactory()), this._subject;
          }
          connect() {
            let t = this._connection;
            return (
              t ||
                ((this._isComplete = !1),
                (t = this._connection = new r.a()).add(this.source.subscribe(new c(this.getSubject(), this))),
                t.closed && ((this._connection = null), (t = r.a.EMPTY))),
              t
            );
          }
          refCount() {
            return Object(o.a)()(this);
          }
        }.prototype,
        l = {
          operator: { value: null },
          _refCount: { value: 0, writable: !0 },
          _subject: { value: null, writable: !0 },
          _connection: { value: null, writable: !0 },
          _subscribe: { value: a._subscribe },
          _isComplete: { value: a._isComplete, writable: !0 },
          getSubject: { value: a.getSubject },
          connect: { value: a.connect },
          refCount: { value: a.refCount }
        };
      class c extends s.b {
        constructor(t, e) {
          super(t), (this.connectable = e);
        }
        _error(t) {
          this._unsubscribe(), super._error(t);
        }
        _complete() {
          (this.connectable._isComplete = !0), this._unsubscribe(), super._complete();
        }
        _unsubscribe() {
          const t = this.connectable;
          if (t) {
            this.connectable = null;
            const e = t._connection;
            (t._refCount = 0), (t._subject = null), (t._connection = null), e && e.unsubscribe();
          }
        }
      }
      function h(t, e) {
        return function(n) {
          let s;
          if (
            ((s =
              'function' == typeof t
                ? t
                : function() {
                    return t;
                  }),
            'function' == typeof e)
          )
            return n.lift(new u(s, e));
          const i = Object.create(n, l);
          return (i.source = n), (i.subjectFactory = s), i;
        };
      }
      n.d(e, 'a', function() {
        return h;
      });
      class u {
        constructor(t, e) {
          (this.subjectFactory = t), (this.selector = e);
        }
        call(t, e) {
          const { selector: n } = this,
            s = this.subjectFactory(),
            i = n(s).subscribe(t);
          return i.add(e.subscribe(s)), i;
        }
      }
    },
    quSY: function(t, e, n) {
      'use strict';
      var s = n('DH7j'),
        i = n('XoHu'),
        r = n('n6bG');
      function o(t) {
        return (
          Error.call(this),
          (this.message = t
            ? `${t.length} errors occurred during unsubscription:\n${t
                .map((t, e) => `${e + 1}) ${t.toString()}`)
                .join('\n  ')}`
            : ''),
          (this.name = 'UnsubscriptionError'),
          (this.errors = t),
          this
        );
      }
      o.prototype = Object.create(Error.prototype);
      const a = o;
      n.d(e, 'a', function() {
        return l;
      });
      let l = (() => {
        class t {
          constructor(t) {
            (this.closed = !1),
              (this._parentOrParents = null),
              (this._subscriptions = null),
              t && (this._unsubscribe = t);
          }
          unsubscribe() {
            let e;
            if (this.closed) return;
            let { _parentOrParents: n, _unsubscribe: o, _subscriptions: l } = this;
            if (((this.closed = !0), (this._parentOrParents = null), (this._subscriptions = null), n instanceof t))
              n.remove(this);
            else if (null !== n) for (let t = 0; t < n.length; ++t) n[t].remove(this);
            if (Object(r.a)(o))
              try {
                o.call(this);
              } catch (h) {
                e = h instanceof a ? c(h.errors) : [h];
              }
            if (Object(s.a)(l)) {
              let t = -1,
                n = l.length;
              for (; ++t < n; ) {
                const n = l[t];
                if (Object(i.a)(n))
                  try {
                    n.unsubscribe();
                  } catch (h) {
                    (e = e || []), h instanceof a ? (e = e.concat(c(h.errors))) : e.push(h);
                  }
              }
            }
            if (e) throw new a(e);
          }
          add(e) {
            let n = e;
            if (!e) return t.EMPTY;
            switch (typeof e) {
              case 'function':
                n = new t(e);
              case 'object':
                if (n === this || n.closed || 'function' != typeof n.unsubscribe) return n;
                if (this.closed) return n.unsubscribe(), n;
                if (!(n instanceof t)) {
                  const e = n;
                  (n = new t())._subscriptions = [e];
                }
                break;
              default:
                throw new Error('unrecognized teardown ' + e + ' added to Subscription.');
            }
            let { _parentOrParents: s } = n;
            if (null === s) n._parentOrParents = this;
            else if (s instanceof t) {
              if (s === this) return n;
              n._parentOrParents = [s, this];
            } else {
              if (-1 !== s.indexOf(this)) return n;
              s.push(this);
            }
            const i = this._subscriptions;
            return null === i ? (this._subscriptions = [n]) : i.push(n), n;
          }
          remove(t) {
            const e = this._subscriptions;
            if (e) {
              const n = e.indexOf(t);
              -1 !== n && e.splice(n, 1);
            }
          }
        }
        return (
          (t.EMPTY = (function(t) {
            return (t.closed = !0), t;
          })(new t())),
          t
        );
      })();
      function c(t) {
        return t.reduce((t, e) => t.concat(e instanceof a ? e.errors : e), []);
      }
    },
    'rB/T': function(t, e, n) {
      'use strict';
      function s(t) {
        for (var n in t) e.hasOwnProperty(n) || (e[n] = t[n]);
      }
      Object.defineProperty(e, '__esModule', { value: !0 }), s(n('LbVS')), s(n('vauT')), s(n('PsNa'));
    },
    vauT: function(t, e, n) {
      'use strict';
      function s() {
        var t = document.querySelectorAll('input, textarea, select');
        return Array.prototype.slice.call(t).map(function(t) {
          var e = t.tagName.toLowerCase(),
            n = t.type,
            s = t.id && 'string' == typeof t.id ? t.id : null,
            i = t.name && 'string' == typeof t.name ? t.name : null,
            r = t.value && 'string' == typeof t.value ? t.value : null,
            o = t.childNodes,
            a = Boolean(t.selected),
            l = { tag: e, type: null, id: s, name: i, value: '', checked: !1, options: [] };
          if ('input' === e || 'textarea' === e) {
            if (((l.type = n), 'input' !== e)) return (l.value = r), l;
            switch (n) {
              case 'checkbox':
              case 'radio':
                return (l.checked = a), (l.value = r), l;
              case 'image':
              case 'button':
              case 'submit':
              case 'reset':
              default:
                return l;
            }
          } else if ('select' === e) {
            var c = Array.prototype.slice.call(o).map(function(t, e) {
              return { value: t.value, selected: Boolean(t.selected) };
            });
            return (l.options = c), l;
          }
          return l;
        });
      }
      function i(t) {
        var e = document.querySelectorAll('input, textarea');
        t.forEach(function(t, n) {
          if ('input' === t.tag || 'textarea' === t.tag)
            if ('input' !== t.tag || ('checkbox' !== t.type && 'radio' !== t.type))
              ('input' !== t.tagName.toLowerCase() ||
                ('image' !== t.type && 'button' !== t.type && 'submit' !== t.type && 'reset' !== t.type)) &&
                (null === t.id && null === t.name
                  ? !t.value.length ||
                    !e[n] ||
                    e[n].tagName.toLowerCase() !== t.tag ||
                    ('textarea' !== t.tag && e[n].getAttribute('type') !== t.type) ||
                    ('string' == typeof e[n].id && e[n].id.length) ||
                    ('string' == typeof e[n].getAttribute('name') && e[n].getAttribute('name').length) ||
                    ((e[n].value = t.value), e[n].dispatchEvent(new CustomEvent('input', { detail: e[n].value })))
                  : ((s =
                      'input' +
                      (null !== t.id ? '#' + t.id : '') +
                      ('input' === t.tag ? '[type="' + t.type + '"]' : '') +
                      (null !== t.name ? '[name="' + t.name + '"]' : '')),
                    (i = document.body.querySelector(s)) &&
                      t.value.length &&
                      ((i.value = t.value), i.dispatchEvent(new CustomEvent('input', { detail: i.value })))));
            else {
              var s =
                'input' +
                (null !== t.id ? '#' + t.id : '') +
                '[type="' +
                t.type +
                '"]' +
                (null !== t.name ? '[name="' + t.name + '"]' : '') +
                '[value="' +
                t.value +
                '"]';
              (i = document.body.querySelector(s)) &&
                Boolean(t.checked) &&
                ((i.checked = 'checked'), i.dispatchEvent(new CustomEvent('input', { detail: i.checked })));
            }
          else if ('select' === t.tag) {
            var i,
              r = null;
            null === t.id && null === t.name
              ? !e[n] ||
                e[n].tagName.toLowerCase() !== t.tag ||
                ('string' == typeof e[n].id && e[n].id.length) ||
                ('string' == typeof e[n].getAttribute('name') && e[n].getAttribute('name').length) ||
                (r = e[n])
              : ((s =
                  'select' + (null !== t.id ? '#' + t.id : '') + (null !== t.name ? '[name="' + t.name + '"]' : '')),
                (i = document.body.querySelector(s)) && (r = i)),
              r &&
                t.options.forEach(function(t, e) {
                  var n = r.querySelector('option[value="' + t.value + '"]');
                  n ||
                    !r.childNodes[e] ||
                    ('string' == typeof r.childNodes[e].value && r.childNodes[e].value.length) ||
                    (n = r.childNodes[e]),
                    n &&
                      t.selected &&
                      ((n.selected = 'selected'), n.dispatchEvent(new CustomEvent('input', { detail: n.selected })));
                });
          }
        });
      }
      Object.defineProperty(e, '__esModule', { value: !0 }),
        (e.__getInputValues = s),
        (e.__setInputValues = i),
        (e.__createInputTransfer = function() {
          var t = s();
          return function() {
            return i(t);
          };
        });
    },
    w1tV: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return a;
      });
      var s = n('oB13'),
        i = n('x+ZX'),
        r = n('XNiG');
      function o() {
        return new r.a();
      }
      function a() {
        return t => Object(i.a)()(Object(s.a)(o)(t));
      }
    },
    'x+ZX': function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return i;
      });
      var s = n('7o/Q');
      function i() {
        return function(t) {
          return t.lift(new r(t));
        };
      }
      class r {
        constructor(t) {
          this.connectable = t;
        }
        call(t, e) {
          const { connectable: n } = this;
          n._refCount++;
          const s = new o(t, n),
            i = e.subscribe(s);
          return s.closed || (s.connection = n.connect()), i;
        }
      }
      class o extends s.a {
        constructor(t, e) {
          super(t), (this.connectable = e);
        }
        _unsubscribe() {
          const { connectable: t } = this;
          if (!t) return void (this.connection = null);
          this.connectable = null;
          const e = t._refCount;
          if (e <= 0) return void (this.connection = null);
          if (((t._refCount = e - 1), e > 1)) return void (this.connection = null);
          const { connection: n } = this,
            s = t._connection;
          (this.connection = null), !s || (n && s !== n) || s.unsubscribe();
        }
      }
    },
    yCtX: function(t, e, n) {
      'use strict';
      n.d(e, 'a', function() {
        return o;
      });
      var s = n('HDdC'),
        i = n('ngJS'),
        r = n('jZKg');
      function o(t, e) {
        return e ? Object(r.a)(t, e) : new s.a(Object(i.a)(t));
      }
    },
    yLV6: function(t, e, n) {
      var s;
      !(function(i, r, o, a) {
        'use strict';
        var l,
          c = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'],
          h = r.createElement('div'),
          u = 'function',
          d = Math.round,
          p = Math.abs,
          m = Date.now;
        function f(t, e, n) {
          return setTimeout(C(t, n), e);
        }
        function g(t, e, n) {
          return !!Array.isArray(t) && (b(t, n[e], n), !0);
        }
        function b(t, e, n) {
          var s;
          if (t)
            if (t.forEach) t.forEach(e, n);
            else if (t.length !== a) for (s = 0; s < t.length; ) e.call(n, t[s], s, t), s++;
            else for (s in t) t.hasOwnProperty(s) && e.call(n, t[s], s, t);
        }
        function _(t, e, n) {
          var s = 'DEPRECATED METHOD: ' + e + '\n' + n + ' AT \n';
          return function() {
            var e = new Error('get-stack-trace'),
              n =
                e && e.stack
                  ? e.stack
                      .replace(/^[^\(]+?[\n$]/gm, '')
                      .replace(/^\s+at\s+/gm, '')
                      .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@')
                  : 'Unknown Stack Trace',
              r = i.console && (i.console.warn || i.console.log);
            return r && r.call(i.console, s, n), t.apply(this, arguments);
          };
        }
        l =
          'function' != typeof Object.assign
            ? function(t) {
                if (t === a || null === t) throw new TypeError('Cannot convert undefined or null to object');
                for (var e = Object(t), n = 1; n < arguments.length; n++) {
                  var s = arguments[n];
                  if (s !== a && null !== s) for (var i in s) s.hasOwnProperty(i) && (e[i] = s[i]);
                }
                return e;
              }
            : Object.assign;
        var y = _(
            function(t, e, n) {
              for (var s = Object.keys(e), i = 0; i < s.length; )
                (!n || (n && t[s[i]] === a)) && (t[s[i]] = e[s[i]]), i++;
              return t;
            },
            'extend',
            'Use `assign`.'
          ),
          v = _(
            function(t, e) {
              return y(t, e, !0);
            },
            'merge',
            'Use `assign`.'
          );
        function w(t, e, n) {
          var s,
            i = e.prototype;
          ((s = t.prototype = Object.create(i)).constructor = t), (s._super = i), n && l(s, n);
        }
        function C(t, e) {
          return function() {
            return t.apply(e, arguments);
          };
        }
        function x(t, e) {
          return typeof t == u ? t.apply((e && e[0]) || a, e) : t;
        }
        function E(t, e) {
          return t === a ? e : t;
        }
        function S(t, e, n) {
          b(T(e), function(e) {
            t.addEventListener(e, n, !1);
          });
        }
        function k(t, e, n) {
          b(T(e), function(e) {
            t.removeEventListener(e, n, !1);
          });
        }
        function D(t, e) {
          for (; t; ) {
            if (t == e) return !0;
            t = t.parentNode;
          }
          return !1;
        }
        function A(t, e) {
          return t.indexOf(e) > -1;
        }
        function T(t) {
          return t.trim().split(/\s+/g);
        }
        function O(t, e, n) {
          if (t.indexOf && !n) return t.indexOf(e);
          for (var s = 0; s < t.length; ) {
            if ((n && t[s][n] == e) || (!n && t[s] === e)) return s;
            s++;
          }
          return -1;
        }
        function I(t) {
          return Array.prototype.slice.call(t, 0);
        }
        function R(t, e, n) {
          for (var s = [], i = [], r = 0; r < t.length; ) {
            var o = e ? t[r][e] : t[r];
            O(i, o) < 0 && s.push(t[r]), (i[r] = o), r++;
          }
          return (
            n &&
              (s = e
                ? s.sort(function(t, n) {
                    return t[e] > n[e];
                  })
                : s.sort()),
            s
          );
        }
        function P(t, e) {
          for (var n, s, i = e[0].toUpperCase() + e.slice(1), r = 0; r < c.length; ) {
            if ((s = (n = c[r]) ? n + i : e) in t) return s;
            r++;
          }
          return a;
        }
        var N = 1;
        function M(t) {
          var e = t.ownerDocument || t;
          return e.defaultView || e.parentWindow || i;
        }
        var L = 'ontouchstart' in i,
          j = P(i, 'PointerEvent') !== a,
          F = L && /mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),
          B = 25,
          V = 1,
          U = 4,
          H = 8,
          z = 1,
          $ = 2,
          q = 4,
          W = 8,
          K = 16,
          Y = $ | q,
          Q = W | K,
          G = Y | Q,
          Z = ['x', 'y'],
          X = ['clientX', 'clientY'];
        function J(t, e) {
          var n = this;
          (this.manager = t),
            (this.callback = e),
            (this.element = t.element),
            (this.target = t.options.inputTarget),
            (this.domHandler = function(e) {
              x(t.options.enable, [t]) && n.handler(e);
            }),
            this.init();
        }
        function tt(t, e, n) {
          var s = n.pointers.length,
            i = n.changedPointers.length,
            r = e & V && s - i == 0,
            o = e & (U | H) && s - i == 0;
          (n.isFirst = !!r),
            (n.isFinal = !!o),
            r && (t.session = {}),
            (n.eventType = e),
            (function(t, e) {
              var n = t.session,
                s = e.pointers,
                i = s.length;
              n.firstInput || (n.firstInput = et(e)),
                i > 1 && !n.firstMultiple ? (n.firstMultiple = et(e)) : 1 === i && (n.firstMultiple = !1);
              var r = n.firstInput,
                o = n.firstMultiple,
                l = o ? o.center : r.center,
                c = (e.center = nt(s));
              (e.timeStamp = m()),
                (e.deltaTime = e.timeStamp - r.timeStamp),
                (e.angle = ot(l, c)),
                (e.distance = rt(l, c)),
                (function(t, e) {
                  var n = e.center,
                    s = t.offsetDelta || {},
                    i = t.prevDelta || {},
                    r = t.prevInput || {};
                  (e.eventType !== V && r.eventType !== U) ||
                    ((i = t.prevDelta = { x: r.deltaX || 0, y: r.deltaY || 0 }),
                    (s = t.offsetDelta = { x: n.x, y: n.y })),
                    (e.deltaX = i.x + (n.x - s.x)),
                    (e.deltaY = i.y + (n.y - s.y));
                })(n, e),
                (e.offsetDirection = it(e.deltaX, e.deltaY));
              var h,
                u,
                d = st(e.deltaTime, e.deltaX, e.deltaY);
              (e.overallVelocityX = d.x),
                (e.overallVelocityY = d.y),
                (e.overallVelocity = p(d.x) > p(d.y) ? d.x : d.y),
                (e.scale = o ? ((h = o.pointers), rt((u = s)[0], u[1], X) / rt(h[0], h[1], X)) : 1),
                (e.rotation = o
                  ? (function(t, e) {
                      return ot(s[1], s[0], X) + ot(t[1], t[0], X);
                    })(o.pointers)
                  : 0),
                (e.maxPointers = n.prevInput
                  ? e.pointers.length > n.prevInput.maxPointers
                    ? e.pointers.length
                    : n.prevInput.maxPointers
                  : e.pointers.length),
                (function(t, e) {
                  var n,
                    s,
                    i,
                    r,
                    o = t.lastInterval || e,
                    l = e.timeStamp - o.timeStamp;
                  if (e.eventType != H && (l > B || o.velocity === a)) {
                    var c = e.deltaX - o.deltaX,
                      h = e.deltaY - o.deltaY,
                      u = st(l, c, h);
                    (s = u.x), (i = u.y), (n = p(u.x) > p(u.y) ? u.x : u.y), (r = it(c, h)), (t.lastInterval = e);
                  } else (n = o.velocity), (s = o.velocityX), (i = o.velocityY), (r = o.direction);
                  (e.velocity = n), (e.velocityX = s), (e.velocityY = i), (e.direction = r);
                })(n, e);
              var f = t.element;
              D(e.srcEvent.target, f) && (f = e.srcEvent.target), (e.target = f);
            })(t, n),
            t.emit('hammer.input', n),
            t.recognize(n),
            (t.session.prevInput = n);
        }
        function et(t) {
          for (var e = [], n = 0; n < t.pointers.length; )
            (e[n] = { clientX: d(t.pointers[n].clientX), clientY: d(t.pointers[n].clientY) }), n++;
          return { timeStamp: m(), pointers: e, center: nt(e), deltaX: t.deltaX, deltaY: t.deltaY };
        }
        function nt(t) {
          var e = t.length;
          if (1 === e) return { x: d(t[0].clientX), y: d(t[0].clientY) };
          for (var n = 0, s = 0, i = 0; i < e; ) (n += t[i].clientX), (s += t[i].clientY), i++;
          return { x: d(n / e), y: d(s / e) };
        }
        function st(t, e, n) {
          return { x: e / t || 0, y: n / t || 0 };
        }
        function it(t, e) {
          return t === e ? z : p(t) >= p(e) ? (t < 0 ? $ : q) : e < 0 ? W : K;
        }
        function rt(t, e, n) {
          n || (n = Z);
          var s = e[n[0]] - t[n[0]],
            i = e[n[1]] - t[n[1]];
          return Math.sqrt(s * s + i * i);
        }
        function ot(t, e, n) {
          return n || (n = Z), (180 * Math.atan2(e[n[1]] - t[n[1]], e[n[0]] - t[n[0]])) / Math.PI;
        }
        J.prototype = {
          handler: function() {},
          init: function() {
            this.evEl && S(this.element, this.evEl, this.domHandler),
              this.evTarget && S(this.target, this.evTarget, this.domHandler),
              this.evWin && S(M(this.element), this.evWin, this.domHandler);
          },
          destroy: function() {
            this.evEl && k(this.element, this.evEl, this.domHandler),
              this.evTarget && k(this.target, this.evTarget, this.domHandler),
              this.evWin && k(M(this.element), this.evWin, this.domHandler);
          }
        };
        var at = { mousedown: V, mousemove: 2, mouseup: U },
          lt = 'mousedown',
          ct = 'mousemove mouseup';
        function ht() {
          (this.evEl = lt), (this.evWin = ct), (this.pressed = !1), J.apply(this, arguments);
        }
        w(ht, J, {
          handler: function(t) {
            var e = at[t.type];
            e & V && 0 === t.button && (this.pressed = !0),
              2 & e && 1 !== t.which && (e = U),
              this.pressed &&
                (e & U && (this.pressed = !1),
                this.callback(this.manager, e, {
                  pointers: [t],
                  changedPointers: [t],
                  pointerType: 'mouse',
                  srcEvent: t
                }));
          }
        });
        var ut = { pointerdown: V, pointermove: 2, pointerup: U, pointercancel: H, pointerout: H },
          dt = { 2: 'touch', 3: 'pen', 4: 'mouse', 5: 'kinect' },
          pt = 'pointerdown',
          mt = 'pointermove pointerup pointercancel';
        function ft() {
          (this.evEl = pt),
            (this.evWin = mt),
            J.apply(this, arguments),
            (this.store = this.manager.session.pointerEvents = []);
        }
        i.MSPointerEvent &&
          !i.PointerEvent &&
          ((pt = 'MSPointerDown'), (mt = 'MSPointerMove MSPointerUp MSPointerCancel')),
          w(ft, J, {
            handler: function(t) {
              var e = this.store,
                n = !1,
                s = t.type.toLowerCase().replace('ms', ''),
                i = ut[s],
                r = dt[t.pointerType] || t.pointerType,
                o = 'touch' == r,
                a = O(e, t.pointerId, 'pointerId');
              i & V && (0 === t.button || o) ? a < 0 && (e.push(t), (a = e.length - 1)) : i & (U | H) && (n = !0),
                a < 0 ||
                  ((e[a] = t),
                  this.callback(this.manager, i, { pointers: e, changedPointers: [t], pointerType: r, srcEvent: t }),
                  n && e.splice(a, 1));
            }
          });
        var gt = { touchstart: V, touchmove: 2, touchend: U, touchcancel: H },
          bt = 'touchstart',
          _t = 'touchstart touchmove touchend touchcancel';
        function yt() {
          (this.evTarget = bt), (this.evWin = _t), (this.started = !1), J.apply(this, arguments);
        }
        w(yt, J, {
          handler: function(t) {
            var e = gt[t.type];
            if ((e === V && (this.started = !0), this.started)) {
              var n = function(t, e) {
                var n = I(t.touches),
                  s = I(t.changedTouches);
                return e & (U | H) && (n = R(n.concat(s), 'identifier', !0)), [n, s];
              }.call(this, t, e);
              e & (U | H) && n[0].length - n[1].length == 0 && (this.started = !1),
                this.callback(this.manager, e, {
                  pointers: n[0],
                  changedPointers: n[1],
                  pointerType: 'touch',
                  srcEvent: t
                });
            }
          }
        });
        var vt = { touchstart: V, touchmove: 2, touchend: U, touchcancel: H },
          wt = 'touchstart touchmove touchend touchcancel';
        function Ct() {
          (this.evTarget = wt), (this.targetIds = {}), J.apply(this, arguments);
        }
        w(Ct, J, {
          handler: function(t) {
            var e = vt[t.type],
              n = function(t, e) {
                var n = I(t.touches),
                  s = this.targetIds;
                if (e & (2 | V) && 1 === n.length) return (s[n[0].identifier] = !0), [n, n];
                var i,
                  r,
                  o = I(t.changedTouches),
                  a = [],
                  l = this.target;
                if (
                  ((r = n.filter(function(t) {
                    return D(t.target, l);
                  })),
                  e === V)
                )
                  for (i = 0; i < r.length; ) (s[r[i].identifier] = !0), i++;
                for (i = 0; i < o.length; )
                  s[o[i].identifier] && a.push(o[i]), e & (U | H) && delete s[o[i].identifier], i++;
                return a.length ? [R(r.concat(a), 'identifier', !0), a] : void 0;
              }.call(this, t, e);
            n &&
              this.callback(this.manager, e, {
                pointers: n[0],
                changedPointers: n[1],
                pointerType: 'touch',
                srcEvent: t
              });
          }
        });
        var xt = 2500;
        function Et() {
          J.apply(this, arguments);
          var t = C(this.handler, this);
          (this.touch = new Ct(this.manager, t)),
            (this.mouse = new ht(this.manager, t)),
            (this.primaryTouch = null),
            (this.lastTouches = []);
        }
        function St(t) {
          var e = t.changedPointers[0];
          if (e.identifier === this.primaryTouch) {
            var n = { x: e.clientX, y: e.clientY };
            this.lastTouches.push(n);
            var s = this.lastTouches;
            setTimeout(function() {
              var t = s.indexOf(n);
              t > -1 && s.splice(t, 1);
            }, xt);
          }
        }
        w(Et, J, {
          handler: function(t, e, n) {
            var s = 'mouse' == n.pointerType;
            if (!(s && n.sourceCapabilities && n.sourceCapabilities.firesTouchEvents)) {
              if ('touch' == n.pointerType)
                (function(t, e) {
                  t & V
                    ? ((this.primaryTouch = e.changedPointers[0].identifier), St.call(this, e))
                    : t & (U | H) && St.call(this, e);
                }.call(this, e, n));
              else if (
                s &&
                function(t) {
                  for (var e = t.srcEvent.clientX, n = t.srcEvent.clientY, s = 0; s < this.lastTouches.length; s++) {
                    var i = this.lastTouches[s],
                      r = Math.abs(e - i.x),
                      o = Math.abs(n - i.y);
                    if (r <= 25 && o <= 25) return !0;
                  }
                  return !1;
                }.call(this, n)
              )
                return;
              this.callback(t, e, n);
            }
          },
          destroy: function() {
            this.touch.destroy(), this.mouse.destroy();
          }
        });
        var kt = P(h.style, 'touchAction'),
          Dt = kt !== a,
          At = (function() {
            if (!Dt) return !1;
            var t = {},
              e = i.CSS && i.CSS.supports;
            return (
              ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(n) {
                t[n] = !e || i.CSS.supports('touch-action', n);
              }),
              t
            );
          })();
        function Tt(t, e) {
          (this.manager = t), this.set(e);
        }
        Tt.prototype = {
          set: function(t) {
            'compute' == t && (t = this.compute()),
              Dt && this.manager.element.style && At[t] && (this.manager.element.style[kt] = t),
              (this.actions = t.toLowerCase().trim());
          },
          update: function() {
            this.set(this.manager.options.touchAction);
          },
          compute: function() {
            var t = [];
            return (
              b(this.manager.recognizers, function(e) {
                x(e.options.enable, [e]) && (t = t.concat(e.getTouchAction()));
              }),
              (function(t) {
                if (A(t, 'none')) return 'none';
                var e = A(t, 'pan-x'),
                  n = A(t, 'pan-y');
                return e && n
                  ? 'none'
                  : e || n
                  ? e
                    ? 'pan-x'
                    : 'pan-y'
                  : A(t, 'manipulation')
                  ? 'manipulation'
                  : 'auto';
              })(t.join(' '))
            );
          },
          preventDefaults: function(t) {
            var e = t.srcEvent,
              n = t.offsetDirection;
            if (this.manager.session.prevented) e.preventDefault();
            else {
              var s = this.actions,
                i = A(s, 'none') && !At.none,
                r = A(s, 'pan-y') && !At['pan-y'],
                o = A(s, 'pan-x') && !At['pan-x'];
              if (i && 1 === t.pointers.length && t.distance < 2 && t.deltaTime < 250) return;
              if (!o || !r) return i || (r && n & Y) || (o && n & Q) ? this.preventSrc(e) : void 0;
            }
          },
          preventSrc: function(t) {
            (this.manager.session.prevented = !0), t.preventDefault();
          }
        };
        var Ot = 1,
          It = 2,
          Rt = 4,
          Pt = 8,
          Nt = Pt,
          Mt = 16;
        function Lt(t) {
          (this.options = l({}, this.defaults, t || {})),
            (this.id = N++),
            (this.manager = null),
            (this.options.enable = E(this.options.enable, !0)),
            (this.state = Ot),
            (this.simultaneous = {}),
            (this.requireFail = []);
        }
        function jt(t) {
          return t & Mt ? 'cancel' : t & Pt ? 'end' : t & Rt ? 'move' : t & It ? 'start' : '';
        }
        function Ft(t) {
          return t == K ? 'down' : t == W ? 'up' : t == $ ? 'left' : t == q ? 'right' : '';
        }
        function Bt(t, e) {
          var n = e.manager;
          return n ? n.get(t) : t;
        }
        function Vt() {
          Lt.apply(this, arguments);
        }
        function Ut() {
          Vt.apply(this, arguments), (this.pX = null), (this.pY = null);
        }
        function Ht() {
          Vt.apply(this, arguments);
        }
        function zt() {
          Lt.apply(this, arguments), (this._timer = null), (this._input = null);
        }
        function $t() {
          Vt.apply(this, arguments);
        }
        function qt() {
          Vt.apply(this, arguments);
        }
        function Wt() {
          Lt.apply(this, arguments),
            (this.pTime = !1),
            (this.pCenter = !1),
            (this._timer = null),
            (this._input = null),
            (this.count = 0);
        }
        function Kt(t, e) {
          return ((e = e || {}).recognizers = E(e.recognizers, Kt.defaults.preset)), new Yt(t, e);
        }
        function Yt(t, e) {
          var n;
          (this.options = l({}, Kt.defaults, e || {})),
            (this.options.inputTarget = this.options.inputTarget || t),
            (this.handlers = {}),
            (this.session = {}),
            (this.recognizers = []),
            (this.oldCssProps = {}),
            (this.element = t),
            (this.input = new ((n = this).options.inputClass || (j ? ft : F ? Ct : L ? Et : ht))(n, tt)),
            (this.touchAction = new Tt(this, this.options.touchAction)),
            Qt(this, !0),
            b(
              this.options.recognizers,
              function(t) {
                var e = this.add(new t[0](t[1]));
                t[2] && e.recognizeWith(t[2]), t[3] && e.requireFailure(t[3]);
              },
              this
            );
        }
        function Qt(t, e) {
          var n,
            s = t.element;
          s.style &&
            (b(t.options.cssProps, function(i, r) {
              (n = P(s.style, r)),
                e ? ((t.oldCssProps[n] = s.style[n]), (s.style[n] = i)) : (s.style[n] = t.oldCssProps[n] || '');
            }),
            e || (t.oldCssProps = {}));
        }
        (Lt.prototype = {
          defaults: {},
          set: function(t) {
            return l(this.options, t), this.manager && this.manager.touchAction.update(), this;
          },
          recognizeWith: function(t) {
            if (g(t, 'recognizeWith', this)) return this;
            var e = this.simultaneous;
            return e[(t = Bt(t, this)).id] || ((e[t.id] = t), t.recognizeWith(this)), this;
          },
          dropRecognizeWith: function(t) {
            return g(t, 'dropRecognizeWith', this) ? this : ((t = Bt(t, this)), delete this.simultaneous[t.id], this);
          },
          requireFailure: function(t) {
            if (g(t, 'requireFailure', this)) return this;
            var e = this.requireFail;
            return -1 === O(e, (t = Bt(t, this))) && (e.push(t), t.requireFailure(this)), this;
          },
          dropRequireFailure: function(t) {
            if (g(t, 'dropRequireFailure', this)) return this;
            t = Bt(t, this);
            var e = O(this.requireFail, t);
            return e > -1 && this.requireFail.splice(e, 1), this;
          },
          hasRequireFailures: function() {
            return this.requireFail.length > 0;
          },
          canRecognizeWith: function(t) {
            return !!this.simultaneous[t.id];
          },
          emit: function(t) {
            var e = this,
              n = this.state;
            function s(n) {
              e.manager.emit(n, t);
            }
            n < Pt && s(e.options.event + jt(n)),
              s(e.options.event),
              t.additionalEvent && s(t.additionalEvent),
              n >= Pt && s(e.options.event + jt(n));
          },
          tryEmit: function(t) {
            if (this.canEmit()) return this.emit(t);
            this.state = 32;
          },
          canEmit: function() {
            for (var t = 0; t < this.requireFail.length; ) {
              if (!(this.requireFail[t].state & (32 | Ot))) return !1;
              t++;
            }
            return !0;
          },
          recognize: function(t) {
            var e = l({}, t);
            if (!x(this.options.enable, [this, e])) return this.reset(), void (this.state = 32);
            this.state & (Nt | Mt | 32) && (this.state = Ot),
              (this.state = this.process(e)),
              this.state & (It | Rt | Pt | Mt) && this.tryEmit(e);
          },
          process: function(t) {},
          getTouchAction: function() {},
          reset: function() {}
        }),
          w(Vt, Lt, {
            defaults: { pointers: 1 },
            attrTest: function(t) {
              var e = this.options.pointers;
              return 0 === e || t.pointers.length === e;
            },
            process: function(t) {
              var e = this.state,
                n = t.eventType,
                s = e & (It | Rt),
                i = this.attrTest(t);
              return s && (n & H || !i) ? e | Mt : s || i ? (n & U ? e | Pt : e & It ? e | Rt : It) : 32;
            }
          }),
          w(Ut, Vt, {
            defaults: { event: 'pan', threshold: 10, pointers: 1, direction: G },
            getTouchAction: function() {
              var t = this.options.direction,
                e = [];
              return t & Y && e.push('pan-y'), t & Q && e.push('pan-x'), e;
            },
            directionTest: function(t) {
              var e = this.options,
                n = !0,
                s = t.distance,
                i = t.direction,
                r = t.deltaX,
                o = t.deltaY;
              return (
                i & e.direction ||
                  (e.direction & Y
                    ? ((i = 0 === r ? z : r < 0 ? $ : q), (n = r != this.pX), (s = Math.abs(t.deltaX)))
                    : ((i = 0 === o ? z : o < 0 ? W : K), (n = o != this.pY), (s = Math.abs(t.deltaY)))),
                (t.direction = i),
                n && s > e.threshold && i & e.direction
              );
            },
            attrTest: function(t) {
              return (
                Vt.prototype.attrTest.call(this, t) &&
                (this.state & It || (!(this.state & It) && this.directionTest(t)))
              );
            },
            emit: function(t) {
              (this.pX = t.deltaX), (this.pY = t.deltaY);
              var e = Ft(t.direction);
              e && (t.additionalEvent = this.options.event + e), this._super.emit.call(this, t);
            }
          }),
          w(Ht, Vt, {
            defaults: { event: 'pinch', threshold: 0, pointers: 2 },
            getTouchAction: function() {
              return ['none'];
            },
            attrTest: function(t) {
              return (
                this._super.attrTest.call(this, t) &&
                (Math.abs(t.scale - 1) > this.options.threshold || this.state & It)
              );
            },
            emit: function(t) {
              1 !== t.scale && (t.additionalEvent = this.options.event + (t.scale < 1 ? 'in' : 'out')),
                this._super.emit.call(this, t);
            }
          }),
          w(zt, Lt, {
            defaults: { event: 'press', pointers: 1, time: 251, threshold: 9 },
            getTouchAction: function() {
              return ['auto'];
            },
            process: function(t) {
              var e = this.options,
                n = t.pointers.length === e.pointers,
                s = t.distance < e.threshold,
                i = t.deltaTime > e.time;
              if (((this._input = t), !s || !n || (t.eventType & (U | H) && !i))) this.reset();
              else if (t.eventType & V)
                this.reset(),
                  (this._timer = f(
                    function() {
                      (this.state = Nt), this.tryEmit();
                    },
                    e.time,
                    this
                  ));
              else if (t.eventType & U) return Nt;
              return 32;
            },
            reset: function() {
              clearTimeout(this._timer);
            },
            emit: function(t) {
              this.state === Nt &&
                (t && t.eventType & U
                  ? this.manager.emit(this.options.event + 'up', t)
                  : ((this._input.timeStamp = m()), this.manager.emit(this.options.event, this._input)));
            }
          }),
          w($t, Vt, {
            defaults: { event: 'rotate', threshold: 0, pointers: 2 },
            getTouchAction: function() {
              return ['none'];
            },
            attrTest: function(t) {
              return (
                this._super.attrTest.call(this, t) && (Math.abs(t.rotation) > this.options.threshold || this.state & It)
              );
            }
          }),
          w(qt, Vt, {
            defaults: { event: 'swipe', threshold: 10, velocity: 0.3, direction: Y | Q, pointers: 1 },
            getTouchAction: function() {
              return Ut.prototype.getTouchAction.call(this);
            },
            attrTest: function(t) {
              var e,
                n = this.options.direction;
              return (
                n & (Y | Q)
                  ? (e = t.overallVelocity)
                  : n & Y
                  ? (e = t.overallVelocityX)
                  : n & Q && (e = t.overallVelocityY),
                this._super.attrTest.call(this, t) &&
                  n & t.offsetDirection &&
                  t.distance > this.options.threshold &&
                  t.maxPointers == this.options.pointers &&
                  p(e) > this.options.velocity &&
                  t.eventType & U
              );
            },
            emit: function(t) {
              var e = Ft(t.offsetDirection);
              e && this.manager.emit(this.options.event + e, t), this.manager.emit(this.options.event, t);
            }
          }),
          w(Wt, Lt, {
            defaults: { event: 'tap', pointers: 1, taps: 1, interval: 300, time: 250, threshold: 9, posThreshold: 10 },
            getTouchAction: function() {
              return ['manipulation'];
            },
            process: function(t) {
              var e = this.options,
                n = t.pointers.length === e.pointers,
                s = t.distance < e.threshold,
                i = t.deltaTime < e.time;
              if ((this.reset(), t.eventType & V && 0 === this.count)) return this.failTimeout();
              if (s && i && n) {
                if (t.eventType != U) return this.failTimeout();
                var r = !this.pTime || t.timeStamp - this.pTime < e.interval,
                  o = !this.pCenter || rt(this.pCenter, t.center) < e.posThreshold;
                if (
                  ((this.pTime = t.timeStamp),
                  (this.pCenter = t.center),
                  o && r ? (this.count += 1) : (this.count = 1),
                  (this._input = t),
                  0 == this.count % e.taps)
                )
                  return this.hasRequireFailures()
                    ? ((this._timer = f(
                        function() {
                          (this.state = Nt), this.tryEmit();
                        },
                        e.interval,
                        this
                      )),
                      It)
                    : Nt;
              }
              return 32;
            },
            failTimeout: function() {
              return (
                (this._timer = f(
                  function() {
                    this.state = 32;
                  },
                  this.options.interval,
                  this
                )),
                32
              );
            },
            reset: function() {
              clearTimeout(this._timer);
            },
            emit: function() {
              this.state == Nt &&
                ((this._input.tapCount = this.count), this.manager.emit(this.options.event, this._input));
            }
          }),
          (Kt.VERSION = '2.0.7'),
          (Kt.defaults = {
            domEvents: !1,
            touchAction: 'compute',
            enable: !0,
            inputTarget: null,
            inputClass: null,
            preset: [
              [$t, { enable: !1 }],
              [Ht, { enable: !1 }, ['rotate']],
              [qt, { direction: Y }],
              [Ut, { direction: Y }, ['swipe']],
              [Wt],
              [Wt, { event: 'doubletap', taps: 2 }, ['tap']],
              [zt]
            ],
            cssProps: {
              userSelect: 'none',
              touchSelect: 'none',
              touchCallout: 'none',
              contentZooming: 'none',
              userDrag: 'none',
              tapHighlightColor: 'rgba(0,0,0,0)'
            }
          }),
          (Yt.prototype = {
            set: function(t) {
              return (
                l(this.options, t),
                t.touchAction && this.touchAction.update(),
                t.inputTarget && (this.input.destroy(), (this.input.target = t.inputTarget), this.input.init()),
                this
              );
            },
            stop: function(t) {
              this.session.stopped = t ? 2 : 1;
            },
            recognize: function(t) {
              var e = this.session;
              if (!e.stopped) {
                var n;
                this.touchAction.preventDefaults(t);
                var s = this.recognizers,
                  i = e.curRecognizer;
                (!i || (i && i.state & Nt)) && (i = e.curRecognizer = null);
                for (var r = 0; r < s.length; )
                  (n = s[r]),
                    2 === e.stopped || (i && n != i && !n.canRecognizeWith(i)) ? n.reset() : n.recognize(t),
                    !i && n.state & (It | Rt | Pt) && (i = e.curRecognizer = n),
                    r++;
              }
            },
            get: function(t) {
              if (t instanceof Lt) return t;
              for (var e = this.recognizers, n = 0; n < e.length; n++) if (e[n].options.event == t) return e[n];
              return null;
            },
            add: function(t) {
              if (g(t, 'add', this)) return this;
              var e = this.get(t.options.event);
              return e && this.remove(e), this.recognizers.push(t), (t.manager = this), this.touchAction.update(), t;
            },
            remove: function(t) {
              if (g(t, 'remove', this)) return this;
              if ((t = this.get(t))) {
                var e = this.recognizers,
                  n = O(e, t);
                -1 !== n && (e.splice(n, 1), this.touchAction.update());
              }
              return this;
            },
            on: function(t, e) {
              if (t !== a && e !== a) {
                var n = this.handlers;
                return (
                  b(T(t), function(t) {
                    (n[t] = n[t] || []), n[t].push(e);
                  }),
                  this
                );
              }
            },
            off: function(t, e) {
              if (t !== a) {
                var n = this.handlers;
                return (
                  b(T(t), function(t) {
                    e ? n[t] && n[t].splice(O(n[t], e), 1) : delete n[t];
                  }),
                  this
                );
              }
            },
            emit: function(t, e) {
              this.options.domEvents &&
                (function(t, e) {
                  var n = r.createEvent('Event');
                  n.initEvent(t, !0, !0), (n.gesture = e), e.target.dispatchEvent(n);
                })(t, e);
              var n = this.handlers[t] && this.handlers[t].slice();
              if (n && n.length) {
                (e.type = t),
                  (e.preventDefault = function() {
                    e.srcEvent.preventDefault();
                  });
                for (var s = 0; s < n.length; ) n[s](e), s++;
              }
            },
            destroy: function() {
              this.element && Qt(this, !1),
                (this.handlers = {}),
                (this.session = {}),
                this.input.destroy(),
                (this.element = null);
            }
          }),
          l(Kt, {
            INPUT_START: V,
            INPUT_MOVE: 2,
            INPUT_END: U,
            INPUT_CANCEL: H,
            STATE_POSSIBLE: Ot,
            STATE_BEGAN: It,
            STATE_CHANGED: Rt,
            STATE_ENDED: Pt,
            STATE_RECOGNIZED: Nt,
            STATE_CANCELLED: Mt,
            STATE_FAILED: 32,
            DIRECTION_NONE: z,
            DIRECTION_LEFT: $,
            DIRECTION_RIGHT: q,
            DIRECTION_UP: W,
            DIRECTION_DOWN: K,
            DIRECTION_HORIZONTAL: Y,
            DIRECTION_VERTICAL: Q,
            DIRECTION_ALL: G,
            Manager: Yt,
            Input: J,
            TouchAction: Tt,
            TouchInput: Ct,
            MouseInput: ht,
            PointerEventInput: ft,
            TouchMouseInput: Et,
            SingleTouchInput: yt,
            Recognizer: Lt,
            AttrRecognizer: Vt,
            Tap: Wt,
            Pan: Ut,
            Swipe: qt,
            Pinch: Ht,
            Rotate: $t,
            Press: zt,
            on: S,
            off: k,
            each: b,
            merge: v,
            extend: y,
            assign: l,
            inherit: w,
            bindFn: C,
            prefixed: P
          }),
          ((void 0 !== i ? i : 'undefined' != typeof self ? self : {}).Hammer = Kt),
          (s = function() {
            return Kt;
          }.call(e, n, e, t)) === a || (t.exports = s);
      })(window, document);
    },
    'z+Ro': function(t, e, n) {
      'use strict';
      function s(t) {
        return t && 'function' == typeof t.schedule;
      }
      n.d(e, 'a', function() {
        return s;
      });
    },
    zUnb: function(t, e, n) {
      'use strict';
      n.r(e),
        function(t) {
          n.d(e, '\u02750', function() {
            return c;
          }),
            n('yLV6');
          var s = n('8Y7J'),
            i = n('AytR'),
            r = n('0QMH'),
            o = n('Ss9G'),
            a = n('cUpR');
          i.a.production && Object(s.S)();
          const l = () => a.i().bootstrapModuleFactory(o.a),
            c = l;
          i.a.hmr ? Object(r.a)(t, l) : l().catch(t => console.error(t));
        }.call(this, n('3UD+')(t));
    },
    zn8P: function(t, e) {
      function n(t) {
        return Promise.resolve().then(function() {
          var e = new Error("Cannot find module '" + t + "'");
          throw ((e.code = 'MODULE_NOT_FOUND'), e);
        });
      }
      (n.keys = function() {
        return [];
      }),
        (n.resolve = n),
        (t.exports = n),
        (n.id = 'zn8P');
    }
  },
  [[0, 0]]
]);
